// Code generated by protoc-gen-go.
// source: channel.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ChannelInviteMemberResponse_ErrorType int32

const (
	ChannelInviteMemberResponse_NONE                ChannelInviteMemberResponse_ErrorType = 0
	ChannelInviteMemberResponse_INVALID_INPUT       ChannelInviteMemberResponse_ErrorType = 1
	ChannelInviteMemberResponse_FORBIDDEN           ChannelInviteMemberResponse_ErrorType = 2
	ChannelInviteMemberResponse_USER_ALREADY_JOINED ChannelInviteMemberResponse_ErrorType = 3
	ChannelInviteMemberResponse_SERVER              ChannelInviteMemberResponse_ErrorType = 4
	ChannelInviteMemberResponse_USER_NOT_ALLOWED    ChannelInviteMemberResponse_ErrorType = 5
)

var ChannelInviteMemberResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "INVALID_INPUT",
	2: "FORBIDDEN",
	3: "USER_ALREADY_JOINED",
	4: "SERVER",
	5: "USER_NOT_ALLOWED",
}
var ChannelInviteMemberResponse_ErrorType_value = map[string]int32{
	"NONE":                0,
	"INVALID_INPUT":       1,
	"FORBIDDEN":           2,
	"USER_ALREADY_JOINED": 3,
	"SERVER":              4,
	"USER_NOT_ALLOWED":    5,
}

func (x ChannelInviteMemberResponse_ErrorType) String() string {
	return proto.EnumName(ChannelInviteMemberResponse_ErrorType_name, int32(x))
}

type ChannelUpdateResponse_ErrorType int32

const (
	ChannelUpdateResponse_NONE              ChannelUpdateResponse_ErrorType = 0
	ChannelUpdateResponse_UNKNOWN           ChannelUpdateResponse_ErrorType = 1
	ChannelUpdateResponse_USER_BANNED       ChannelUpdateResponse_ErrorType = 2
	ChannelUpdateResponse_USER_NOT_A_MEMBER ChannelUpdateResponse_ErrorType = 3
)

var ChannelUpdateResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "UNKNOWN",
	2: "USER_BANNED",
	3: "USER_NOT_A_MEMBER",
}
var ChannelUpdateResponse_ErrorType_value = map[string]int32{
	"NONE":              0,
	"UNKNOWN":           1,
	"USER_BANNED":       2,
	"USER_NOT_A_MEMBER": 3,
}

func (x ChannelUpdateResponse_ErrorType) String() string {
	return proto.EnumName(ChannelUpdateResponse_ErrorType_name, int32(x))
}

type RPCChannelAddUsersToHubChannelResponse_ErrorType int32

const (
	RPCChannelAddUsersToHubChannelResponse_NONE          RPCChannelAddUsersToHubChannelResponse_ErrorType = 0
	RPCChannelAddUsersToHubChannelResponse_UNKNOWN_ERROR RPCChannelAddUsersToHubChannelResponse_ErrorType = 1
	RPCChannelAddUsersToHubChannelResponse_BAD_REQUEST   RPCChannelAddUsersToHubChannelResponse_ErrorType = 2
)

var RPCChannelAddUsersToHubChannelResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "UNKNOWN_ERROR",
	2: "BAD_REQUEST",
}
var RPCChannelAddUsersToHubChannelResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_REQUEST":   2,
}

func (x RPCChannelAddUsersToHubChannelResponse_ErrorType) String() string {
	return proto.EnumName(RPCChannelAddUsersToHubChannelResponse_ErrorType_name, int32(x))
}

type RPCChannelAddUserToHubChannelsResponse_ErrorType int32

const (
	RPCChannelAddUserToHubChannelsResponse_NONE          RPCChannelAddUserToHubChannelsResponse_ErrorType = 0
	RPCChannelAddUserToHubChannelsResponse_UNKNOWN_ERROR RPCChannelAddUserToHubChannelsResponse_ErrorType = 1
	RPCChannelAddUserToHubChannelsResponse_BAD_REQUEST   RPCChannelAddUserToHubChannelsResponse_ErrorType = 2
)

var RPCChannelAddUserToHubChannelsResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "UNKNOWN_ERROR",
	2: "BAD_REQUEST",
}
var RPCChannelAddUserToHubChannelsResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_REQUEST":   2,
}

func (x RPCChannelAddUserToHubChannelsResponse_ErrorType) String() string {
	return proto.EnumName(RPCChannelAddUserToHubChannelsResponse_ErrorType_name, int32(x))
}

type ChannelInfoResponse struct {
	Channel    *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Group      *Group   `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	Game       *Game    `protobuf:"bytes,3,opt,name=game" json:"game,omitempty"`
	IsJoinable bool     `protobuf:"varint,4,opt,name=isJoinable" json:"isJoinable,omitempty"`
}

func (m *ChannelInfoResponse) Reset()         { *m = ChannelInfoResponse{} }
func (m *ChannelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelInfoResponse) ProtoMessage()    {}

func (m *ChannelInfoResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelInfoResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ChannelInfoResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type EditChannelRequest struct {
	Title      *OptionalString `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Topic      *OptionalString `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Visibility *OptionalBool   `protobuf:"bytes,3,opt,name=visibility" json:"visibility,omitempty"`
}

func (m *EditChannelRequest) Reset()         { *m = EditChannelRequest{} }
func (m *EditChannelRequest) String() string { return proto.CompactTextString(m) }
func (*EditChannelRequest) ProtoMessage()    {}

func (m *EditChannelRequest) GetTitle() *OptionalString {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *EditChannelRequest) GetTopic() *OptionalString {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *EditChannelRequest) GetVisibility() *OptionalBool {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type ChannelReadStatusResponseEntry struct {
	ChannelId          string            `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	Timestamp          string            `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	LatestMessage      *WebsocketMessage `protobuf:"bytes,3,opt,name=latest_message" json:"latest_message,omitempty"`
	UnreadCount        int32             `protobuf:"varint,4,opt,name=unread_count" json:"unread_count,omitempty"`
	UnreadMentionCount int32             `protobuf:"varint,5,opt,name=unread_mention_count" json:"unread_mention_count,omitempty"`
}

func (m *ChannelReadStatusResponseEntry) Reset()         { *m = ChannelReadStatusResponseEntry{} }
func (m *ChannelReadStatusResponseEntry) String() string { return proto.CompactTextString(m) }
func (*ChannelReadStatusResponseEntry) ProtoMessage()    {}

func (m *ChannelReadStatusResponseEntry) GetLatestMessage() *WebsocketMessage {
	if m != nil {
		return m.LatestMessage
	}
	return nil
}

type ChannelReadStatusResponse struct {
	Channels []*ChannelReadStatusResponseEntry `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
}

func (m *ChannelReadStatusResponse) Reset()         { *m = ChannelReadStatusResponse{} }
func (m *ChannelReadStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelReadStatusResponse) ProtoMessage()    {}

func (m *ChannelReadStatusResponse) GetChannels() []*ChannelReadStatusResponseEntry {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ChannelKickBanRequest struct {
	ChannelId   string         `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	KickedId    string         `protobuf:"bytes,2,opt,name=kicked_id" json:"kicked_id,omitempty"`
	Ban         bool           `protobuf:"varint,3,opt,name=ban" json:"ban,omitempty"`
	BanDuration *OptionalInt64 `protobuf:"bytes,4,opt,name=ban_duration" json:"ban_duration,omitempty"`
}

func (m *ChannelKickBanRequest) Reset()         { *m = ChannelKickBanRequest{} }
func (m *ChannelKickBanRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelKickBanRequest) ProtoMessage()    {}

func (m *ChannelKickBanRequest) GetBanDuration() *OptionalInt64 {
	if m != nil {
		return m.BanDuration
	}
	return nil
}

type ChannelKickBanResponse struct {
}

func (m *ChannelKickBanResponse) Reset()         { *m = ChannelKickBanResponse{} }
func (m *ChannelKickBanResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelKickBanResponse) ProtoMessage()    {}

type ChannelUnBanRequest struct {
	ChannelId  string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	UnbannedId string `protobuf:"bytes,2,opt,name=unbanned_id" json:"unbanned_id,omitempty"`
}

func (m *ChannelUnBanRequest) Reset()         { *m = ChannelUnBanRequest{} }
func (m *ChannelUnBanRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelUnBanRequest) ProtoMessage()    {}

type ChannelUnBanResponse struct {
}

func (m *ChannelUnBanResponse) Reset()         { *m = ChannelUnBanResponse{} }
func (m *ChannelUnBanResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelUnBanResponse) ProtoMessage()    {}

type ChannelJoinGameChannelRequest struct {
	GameId string   `protobuf:"bytes,1,opt,name=game_id" json:"game_id,omitempty"`
	Tags   []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *ChannelJoinGameChannelRequest) Reset()         { *m = ChannelJoinGameChannelRequest{} }
func (m *ChannelJoinGameChannelRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelJoinGameChannelRequest) ProtoMessage()    {}

type ChannelJoinGameChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *ChannelJoinGameChannelResponse) Reset()         { *m = ChannelJoinGameChannelResponse{} }
func (m *ChannelJoinGameChannelResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelJoinGameChannelResponse) ProtoMessage()    {}

func (m *ChannelJoinGameChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type ChannelCreateGroupChannelRequest struct {
	GroupId string              `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	Title   string              `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Type    Channel_ChannelType `protobuf:"varint,3,opt,name=type,enum=proto.Channel_ChannelType" json:"type,omitempty"`
}

func (m *ChannelCreateGroupChannelRequest) Reset()         { *m = ChannelCreateGroupChannelRequest{} }
func (m *ChannelCreateGroupChannelRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelCreateGroupChannelRequest) ProtoMessage()    {}

type ChannelCreateGroupChannelResponse struct {
	User    *User    `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *ChannelCreateGroupChannelResponse) Reset()         { *m = ChannelCreateGroupChannelResponse{} }
func (m *ChannelCreateGroupChannelResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelCreateGroupChannelResponse) ProtoMessage()    {}

func (m *ChannelCreateGroupChannelResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChannelCreateGroupChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type ChannelInviteMemberRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *ChannelInviteMemberRequest) Reset()         { *m = ChannelInviteMemberRequest{} }
func (m *ChannelInviteMemberRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelInviteMemberRequest) ProtoMessage()    {}

type ChannelInviteMemberResponse struct {
	Error ChannelInviteMemberResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.ChannelInviteMemberResponse_ErrorType" json:"error,omitempty"`
}

func (m *ChannelInviteMemberResponse) Reset()         { *m = ChannelInviteMemberResponse{} }
func (m *ChannelInviteMemberResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelInviteMemberResponse) ProtoMessage()    {}

type GameResponse struct {
	Game     *Game      `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
	Channels []*Channel `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty"`
}

func (m *GameResponse) Reset()         { *m = GameResponse{} }
func (m *GameResponse) String() string { return proto.CompactTextString(m) }
func (*GameResponse) ProtoMessage()    {}

func (m *GameResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *GameResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type RPCJoinProprietaryChannelsRequest struct {
	UserId string                          `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Type   ProprietaryUserGroupRecord_Type `protobuf:"varint,2,opt,name=type,enum=proto.ProprietaryUserGroupRecord_Type" json:"type,omitempty"`
}

func (m *RPCJoinProprietaryChannelsRequest) Reset()         { *m = RPCJoinProprietaryChannelsRequest{} }
func (m *RPCJoinProprietaryChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCJoinProprietaryChannelsRequest) ProtoMessage()    {}

type RPCJoinProprietaryChannelsResponse struct {
}

func (m *RPCJoinProprietaryChannelsResponse) Reset()         { *m = RPCJoinProprietaryChannelsResponse{} }
func (m *RPCJoinProprietaryChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCJoinProprietaryChannelsResponse) ProtoMessage()    {}

type RPCJoinChannelInfoRequest struct {
	UserId  string   `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Invite  string   `protobuf:"bytes,3,opt,name=invite" json:"invite,omitempty"`
}

func (m *RPCJoinChannelInfoRequest) Reset()         { *m = RPCJoinChannelInfoRequest{} }
func (m *RPCJoinChannelInfoRequest) String() string { return proto.CompactTextString(m) }
func (*RPCJoinChannelInfoRequest) ProtoMessage()    {}

func (m *RPCJoinChannelInfoRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCJoinChannelInfoResponse struct {
	IsJoinable bool `protobuf:"varint,1,opt,name=isJoinable" json:"isJoinable,omitempty"`
}

func (m *RPCJoinChannelInfoResponse) Reset()         { *m = RPCJoinChannelInfoResponse{} }
func (m *RPCJoinChannelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RPCJoinChannelInfoResponse) ProtoMessage()    {}

type RPCDeleteChannelRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
}

func (m *RPCDeleteChannelRequest) Reset()         { *m = RPCDeleteChannelRequest{} }
func (m *RPCDeleteChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCDeleteChannelRequest) ProtoMessage()    {}

type RPCDeleteChannelResponse struct {
}

func (m *RPCDeleteChannelResponse) Reset()         { *m = RPCDeleteChannelResponse{} }
func (m *RPCDeleteChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCDeleteChannelResponse) ProtoMessage()    {}

type RPCEditChannelRequest struct {
	UserId     string          `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId  string          `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	Title      *OptionalString `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Topic      *OptionalString `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Visibility *OptionalBool   `protobuf:"bytes,5,opt,name=visibility" json:"visibility,omitempty"`
}

func (m *RPCEditChannelRequest) Reset()         { *m = RPCEditChannelRequest{} }
func (m *RPCEditChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCEditChannelRequest) ProtoMessage()    {}

func (m *RPCEditChannelRequest) GetTitle() *OptionalString {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *RPCEditChannelRequest) GetTopic() *OptionalString {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *RPCEditChannelRequest) GetVisibility() *OptionalBool {
	if m != nil {
		return m.Visibility
	}
	return nil
}

type RPCEditChannelResponse struct {
	Channel           *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	TitleUpdated      bool     `protobuf:"varint,2,opt,name=title_updated" json:"title_updated,omitempty"`
	TopicUpdated      bool     `protobuf:"varint,3,opt,name=topic_updated" json:"topic_updated,omitempty"`
	VisibilityUpdated bool     `protobuf:"varint,4,opt,name=visibility_updated" json:"visibility_updated,omitempty"`
}

func (m *RPCEditChannelResponse) Reset()         { *m = RPCEditChannelResponse{} }
func (m *RPCEditChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCEditChannelResponse) ProtoMessage()    {}

func (m *RPCEditChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCChannelCreateGroupChannelRequest struct {
	UserId  string              `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	GroupId string              `protobuf:"bytes,2,opt,name=group_id" json:"group_id,omitempty"`
	Title   string              `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Type    Channel_ChannelType `protobuf:"varint,4,opt,name=type,enum=proto.Channel_ChannelType" json:"type,omitempty"`
}

func (m *RPCChannelCreateGroupChannelRequest) Reset()         { *m = RPCChannelCreateGroupChannelRequest{} }
func (m *RPCChannelCreateGroupChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelCreateGroupChannelRequest) ProtoMessage()    {}

type RPCChannelCreateGroupChannelResponse struct {
	User    *User    `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *RPCChannelCreateGroupChannelResponse) Reset()         { *m = RPCChannelCreateGroupChannelResponse{} }
func (m *RPCChannelCreateGroupChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelCreateGroupChannelResponse) ProtoMessage()    {}

func (m *RPCChannelCreateGroupChannelResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RPCChannelCreateGroupChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCChannelCreateChannelRequest struct {
	Title   string              `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Type    Channel_ChannelType `protobuf:"varint,2,opt,name=type,enum=proto.Channel_ChannelType" json:"type,omitempty"`
	GroupId string              `protobuf:"bytes,3,opt,name=group_id" json:"group_id,omitempty"`
}

func (m *RPCChannelCreateChannelRequest) Reset()         { *m = RPCChannelCreateChannelRequest{} }
func (m *RPCChannelCreateChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelCreateChannelRequest) ProtoMessage()    {}

type RPCChannelCreateChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *RPCChannelCreateChannelResponse) Reset()         { *m = RPCChannelCreateChannelResponse{} }
func (m *RPCChannelCreateChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelCreateChannelResponse) ProtoMessage()    {}

func (m *RPCChannelCreateChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCExtendedChannelInfoResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Group   *Group   `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	Game    *Game    `protobuf:"bytes,3,opt,name=game" json:"game,omitempty"`
}

func (m *RPCExtendedChannelInfoResponse) Reset()         { *m = RPCExtendedChannelInfoResponse{} }
func (m *RPCExtendedChannelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RPCExtendedChannelInfoResponse) ProtoMessage()    {}

func (m *RPCExtendedChannelInfoResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *RPCExtendedChannelInfoResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RPCExtendedChannelInfoResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type ChannelUpdateRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	Invite    string `protobuf:"bytes,3,opt,name=invite" json:"invite,omitempty"`
	// enforce, ignoring access rights
	Force bool `protobuf:"varint,4,opt,name=force" json:"force,omitempty"`
}

func (m *ChannelUpdateRequest) Reset()         { *m = ChannelUpdateRequest{} }
func (m *ChannelUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdateRequest) ProtoMessage()    {}

type ChannelUpdateResponse struct {
	Error ChannelUpdateResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.ChannelUpdateResponse_ErrorType" json:"error,omitempty"`
	User  *User                           `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *ChannelUpdateResponse) Reset()         { *m = ChannelUpdateResponse{} }
func (m *ChannelUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelUpdateResponse) ProtoMessage()    {}

func (m *ChannelUpdateResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCChannelAddUsersToHubChannelRequest struct {
	ChannelId                  string   `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	HubId                      string   `protobuf:"bytes,2,opt,name=hub_id" json:"hub_id,omitempty"`
	UserIds                    []string `protobuf:"bytes,3,rep,name=user_ids" json:"user_ids,omitempty"`
	Remove                     bool     `protobuf:"varint,4,opt,name=remove" json:"remove,omitempty"`
	PublishProfilePullRequests bool     `protobuf:"varint,5,opt,name=publish_profile_pull_requests" json:"publish_profile_pull_requests,omitempty"`
}

func (m *RPCChannelAddUsersToHubChannelRequest) Reset()         { *m = RPCChannelAddUsersToHubChannelRequest{} }
func (m *RPCChannelAddUsersToHubChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelAddUsersToHubChannelRequest) ProtoMessage()    {}

type RPCChannelAddUsersToHubChannelResponse struct {
	Error            RPCChannelAddUsersToHubChannelResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCChannelAddUsersToHubChannelResponse_ErrorType" json:"error,omitempty"`
	ProcessedUserIds []string                                         `protobuf:"bytes,2,rep,name=processed_user_ids" json:"processed_user_ids,omitempty"`
}

func (m *RPCChannelAddUsersToHubChannelResponse) Reset() {
	*m = RPCChannelAddUsersToHubChannelResponse{}
}
func (m *RPCChannelAddUsersToHubChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelAddUsersToHubChannelResponse) ProtoMessage()    {}

type RPCChannelAddUserToHubChannelsRequest struct {
	ChannelIds []string `protobuf:"bytes,1,rep,name=channel_ids" json:"channel_ids,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	Remove     bool     `protobuf:"varint,3,opt,name=remove" json:"remove,omitempty"`
}

func (m *RPCChannelAddUserToHubChannelsRequest) Reset()         { *m = RPCChannelAddUserToHubChannelsRequest{} }
func (m *RPCChannelAddUserToHubChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelAddUserToHubChannelsRequest) ProtoMessage()    {}

type RPCChannelAddUserToHubChannelsResponse struct {
	Error RPCChannelAddUserToHubChannelsResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCChannelAddUserToHubChannelsResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCChannelAddUserToHubChannelsResponse) Reset() {
	*m = RPCChannelAddUserToHubChannelsResponse{}
}
func (m *RPCChannelAddUserToHubChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelAddUserToHubChannelsResponse) ProtoMessage()    {}

type RPCChannelGetChannelRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
}

func (m *RPCChannelGetChannelRequest) Reset()         { *m = RPCChannelGetChannelRequest{} }
func (m *RPCChannelGetChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelGetChannelRequest) ProtoMessage()    {}

type RPCChannelGetChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *RPCChannelGetChannelResponse) Reset()         { *m = RPCChannelGetChannelResponse{} }
func (m *RPCChannelGetChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelGetChannelResponse) ProtoMessage()    {}

func (m *RPCChannelGetChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCChannelJoinGameChannelRequest struct {
	UserId string   `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	GameId string   `protobuf:"bytes,2,opt,name=game_id" json:"game_id,omitempty"`
	Tags   []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *RPCChannelJoinGameChannelRequest) Reset()         { *m = RPCChannelJoinGameChannelRequest{} }
func (m *RPCChannelJoinGameChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelJoinGameChannelRequest) ProtoMessage()    {}

type RPCChannelJoinGameChannelResponse struct {
	Channel *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *RPCChannelJoinGameChannelResponse) Reset()         { *m = RPCChannelJoinGameChannelResponse{} }
func (m *RPCChannelJoinGameChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelJoinGameChannelResponse) ProtoMessage()    {}

func (m *RPCChannelJoinGameChannelResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type RPCChannelKickBanRequest struct {
	ChannelId   string         `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	KickerId    string         `protobuf:"bytes,2,opt,name=kicker_id" json:"kicker_id,omitempty"`
	KickedId    string         `protobuf:"bytes,3,opt,name=kicked_id" json:"kicked_id,omitempty"`
	Ban         bool           `protobuf:"varint,4,opt,name=ban" json:"ban,omitempty"`
	BanDuration *OptionalInt64 `protobuf:"bytes,5,opt,name=ban_duration" json:"ban_duration,omitempty"`
}

func (m *RPCChannelKickBanRequest) Reset()         { *m = RPCChannelKickBanRequest{} }
func (m *RPCChannelKickBanRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelKickBanRequest) ProtoMessage()    {}

func (m *RPCChannelKickBanRequest) GetBanDuration() *OptionalInt64 {
	if m != nil {
		return m.BanDuration
	}
	return nil
}

type RPCChannelKickBanResponse struct {
}

func (m *RPCChannelKickBanResponse) Reset()         { *m = RPCChannelKickBanResponse{} }
func (m *RPCChannelKickBanResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelKickBanResponse) ProtoMessage()    {}

type RPCChannelUnBanRequest struct {
	ChannelId  string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	UnbannerId string `protobuf:"bytes,2,opt,name=unbanner_id" json:"unbanner_id,omitempty"`
	UnbannedId string `protobuf:"bytes,3,opt,name=unbanned_id" json:"unbanned_id,omitempty"`
}

func (m *RPCChannelUnBanRequest) Reset()         { *m = RPCChannelUnBanRequest{} }
func (m *RPCChannelUnBanRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelUnBanRequest) ProtoMessage()    {}

type RPCChannelUnBanResponse struct {
}

func (m *RPCChannelUnBanResponse) Reset()         { *m = RPCChannelUnBanResponse{} }
func (m *RPCChannelUnBanResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelUnBanResponse) ProtoMessage()    {}

type RPCChannelGetChannelUsersRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
}

func (m *RPCChannelGetChannelUsersRequest) Reset()         { *m = RPCChannelGetChannelUsersRequest{} }
func (m *RPCChannelGetChannelUsersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelGetChannelUsersRequest) ProtoMessage()    {}

type RPCChannelGetChannelUsersResponse struct {
	Users []*ChannelUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *RPCChannelGetChannelUsersResponse) Reset()         { *m = RPCChannelGetChannelUsersResponse{} }
func (m *RPCChannelGetChannelUsersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelGetChannelUsersResponse) ProtoMessage()    {}

func (m *RPCChannelGetChannelUsersResponse) GetUsers() []*ChannelUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type RPCChannelUnhideChannelRequest struct {
	UserIds   []string `protobuf:"bytes,1,rep,name=user_ids" json:"user_ids,omitempty"`
	ChannelId string   `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
}

func (m *RPCChannelUnhideChannelRequest) Reset()         { *m = RPCChannelUnhideChannelRequest{} }
func (m *RPCChannelUnhideChannelRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelUnhideChannelRequest) ProtoMessage()    {}

type RPCChannelUnhideChannelResponse struct {
}

func (m *RPCChannelUnhideChannelResponse) Reset()         { *m = RPCChannelUnhideChannelResponse{} }
func (m *RPCChannelUnhideChannelResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelUnhideChannelResponse) ProtoMessage()    {}

type RPCChannelInviteMemberRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	InviterId string `protobuf:"bytes,2,opt,name=inviter_id" json:"inviter_id,omitempty"`
	InviteeId string `protobuf:"bytes,3,opt,name=invitee_id" json:"invitee_id,omitempty"`
}

func (m *RPCChannelInviteMemberRequest) Reset()         { *m = RPCChannelInviteMemberRequest{} }
func (m *RPCChannelInviteMemberRequest) String() string { return proto.CompactTextString(m) }
func (*RPCChannelInviteMemberRequest) ProtoMessage()    {}

type RPCChannelInviteMemberResponse struct {
	Error ChannelInviteMemberResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.ChannelInviteMemberResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCChannelInviteMemberResponse) Reset()         { *m = RPCChannelInviteMemberResponse{} }
func (m *RPCChannelInviteMemberResponse) String() string { return proto.CompactTextString(m) }
func (*RPCChannelInviteMemberResponse) ProtoMessage()    {}

type RPCGameGetGamesRequest struct {
	CacheId    string `protobuf:"bytes,1,opt,name=cache_id" json:"cache_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number" json:"page_number,omitempty"`
	PageSize   int32  `protobuf:"varint,3,opt,name=page_size" json:"page_size,omitempty"`
}

func (m *RPCGameGetGamesRequest) Reset()         { *m = RPCGameGetGamesRequest{} }
func (m *RPCGameGetGamesRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGameGetGamesRequest) ProtoMessage()    {}

type RPCGameGetGamesResponse struct {
	Page    *GameListPage `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	CacheId string        `protobuf:"bytes,2,opt,name=cache_id" json:"cache_id,omitempty"`
}

func (m *RPCGameGetGamesResponse) Reset()         { *m = RPCGameGetGamesResponse{} }
func (m *RPCGameGetGamesResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGameGetGamesResponse) ProtoMessage()    {}

func (m *RPCGameGetGamesResponse) GetPage() *GameListPage {
	if m != nil {
		return m.Page
	}
	return nil
}

type RPCGameGetGameChannelsRequest struct {
	CacheId    string `protobuf:"bytes,1,opt,name=cache_id" json:"cache_id,omitempty"`
	GameId     string `protobuf:"bytes,2,opt,name=game_id" json:"game_id,omitempty"`
	PageNumber int32  `protobuf:"varint,3,opt,name=page_number" json:"page_number,omitempty"`
	PageSize   int32  `protobuf:"varint,4,opt,name=page_size" json:"page_size,omitempty"`
}

func (m *RPCGameGetGameChannelsRequest) Reset()         { *m = RPCGameGetGameChannelsRequest{} }
func (m *RPCGameGetGameChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGameGetGameChannelsRequest) ProtoMessage()    {}

type RPCGameGetGameChannelsResponse struct {
	Page    *GameChannelListPage `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	CacheId string               `protobuf:"bytes,2,opt,name=cache_id" json:"cache_id,omitempty"`
}

func (m *RPCGameGetGameChannelsResponse) Reset()         { *m = RPCGameGetGameChannelsResponse{} }
func (m *RPCGameGetGameChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGameGetGameChannelsResponse) ProtoMessage()    {}

func (m *RPCGameGetGameChannelsResponse) GetPage() *GameChannelListPage {
	if m != nil {
		return m.Page
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.ChannelInviteMemberResponse_ErrorType", ChannelInviteMemberResponse_ErrorType_name, ChannelInviteMemberResponse_ErrorType_value)
	proto.RegisterEnum("proto.ChannelUpdateResponse_ErrorType", ChannelUpdateResponse_ErrorType_name, ChannelUpdateResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCChannelAddUsersToHubChannelResponse_ErrorType", RPCChannelAddUsersToHubChannelResponse_ErrorType_name, RPCChannelAddUsersToHubChannelResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCChannelAddUserToHubChannelsResponse_ErrorType", RPCChannelAddUserToHubChannelsResponse_ErrorType_name, RPCChannelAddUserToHubChannelsResponse_ErrorType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ChannelService service

type ChannelServiceClient interface {
	CreateChannel(ctx context.Context, in *RPCChannelCreateChannelRequest, opts ...grpc.CallOption) (*RPCChannelCreateChannelResponse, error)
	JoinChannel(ctx context.Context, in *ChannelUpdateRequest, opts ...grpc.CallOption) (*ChannelUpdateResponse, error)
	LeaveChannel(ctx context.Context, in *ChannelUpdateRequest, opts ...grpc.CallOption) (*ChannelUpdateResponse, error)
	AddUsersToHubChannel(ctx context.Context, in *RPCChannelAddUsersToHubChannelRequest, opts ...grpc.CallOption) (*RPCChannelAddUsersToHubChannelResponse, error)
	AddUserToHubChannels(ctx context.Context, in *RPCChannelAddUserToHubChannelsRequest, opts ...grpc.CallOption) (*RPCChannelAddUserToHubChannelsResponse, error)
	GetChannel(ctx context.Context, in *RPCChannelGetChannelRequest, opts ...grpc.CallOption) (*RPCChannelGetChannelResponse, error)
	JoinGameChannel(ctx context.Context, in *RPCChannelJoinGameChannelRequest, opts ...grpc.CallOption) (*RPCChannelJoinGameChannelResponse, error)
	CreateGroupChannel(ctx context.Context, in *RPCChannelCreateGroupChannelRequest, opts ...grpc.CallOption) (*RPCChannelCreateGroupChannelResponse, error)
	KickBan(ctx context.Context, in *RPCChannelKickBanRequest, opts ...grpc.CallOption) (*RPCChannelKickBanResponse, error)
	UnBan(ctx context.Context, in *RPCChannelUnBanRequest, opts ...grpc.CallOption) (*RPCChannelUnBanResponse, error)
	GetGame(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*GameResponse, error)
	GetGames(ctx context.Context, in *RPCGameGetGamesRequest, opts ...grpc.CallOption) (*RPCGameGetGamesResponse, error)
	GetGameChannels(ctx context.Context, in *RPCGameGetGameChannelsRequest, opts ...grpc.CallOption) (*RPCGameGetGameChannelsResponse, error)
	GetChannelUsers(ctx context.Context, in *RPCChannelGetChannelUsersRequest, opts ...grpc.CallOption) (*RPCChannelGetChannelUsersResponse, error)
	UnhideChannelIfNeeded(ctx context.Context, in *RPCChannelUnhideChannelRequest, opts ...grpc.CallOption) (*RPCChannelUnhideChannelResponse, error)
	InviteMember(ctx context.Context, in *RPCChannelInviteMemberRequest, opts ...grpc.CallOption) (*RPCChannelInviteMemberResponse, error)
	EditChannel(ctx context.Context, in *RPCEditChannelRequest, opts ...grpc.CallOption) (*RPCEditChannelResponse, error)
	DeleteChannel(ctx context.Context, in *RPCDeleteChannelRequest, opts ...grpc.CallOption) (*RPCDeleteChannelResponse, error)
	CanJoinChannel(ctx context.Context, in *RPCJoinChannelInfoRequest, opts ...grpc.CallOption) (*RPCJoinChannelInfoResponse, error)
	JoinProprietaryChannels(ctx context.Context, in *RPCJoinProprietaryChannelsRequest, opts ...grpc.CallOption) (*RPCJoinProprietaryChannelsResponse, error)
	GetExtendedChannelInfo(ctx context.Context, in *RPCChannelGetChannelRequest, opts ...grpc.CallOption) (*RPCExtendedChannelInfoResponse, error)
}

type channelServiceClient struct {
	cc *grpc.ClientConn
}

func NewChannelServiceClient(cc *grpc.ClientConn) ChannelServiceClient {
	return &channelServiceClient{cc}
}

func (c *channelServiceClient) CreateChannel(ctx context.Context, in *RPCChannelCreateChannelRequest, opts ...grpc.CallOption) (*RPCChannelCreateChannelResponse, error) {
	out := new(RPCChannelCreateChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/CreateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) JoinChannel(ctx context.Context, in *ChannelUpdateRequest, opts ...grpc.CallOption) (*ChannelUpdateResponse, error) {
	out := new(ChannelUpdateResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/JoinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) LeaveChannel(ctx context.Context, in *ChannelUpdateRequest, opts ...grpc.CallOption) (*ChannelUpdateResponse, error) {
	out := new(ChannelUpdateResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/LeaveChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) AddUsersToHubChannel(ctx context.Context, in *RPCChannelAddUsersToHubChannelRequest, opts ...grpc.CallOption) (*RPCChannelAddUsersToHubChannelResponse, error) {
	out := new(RPCChannelAddUsersToHubChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/AddUsersToHubChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) AddUserToHubChannels(ctx context.Context, in *RPCChannelAddUserToHubChannelsRequest, opts ...grpc.CallOption) (*RPCChannelAddUserToHubChannelsResponse, error) {
	out := new(RPCChannelAddUserToHubChannelsResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/AddUserToHubChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannel(ctx context.Context, in *RPCChannelGetChannelRequest, opts ...grpc.CallOption) (*RPCChannelGetChannelResponse, error) {
	out := new(RPCChannelGetChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) JoinGameChannel(ctx context.Context, in *RPCChannelJoinGameChannelRequest, opts ...grpc.CallOption) (*RPCChannelJoinGameChannelResponse, error) {
	out := new(RPCChannelJoinGameChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/JoinGameChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CreateGroupChannel(ctx context.Context, in *RPCChannelCreateGroupChannelRequest, opts ...grpc.CallOption) (*RPCChannelCreateGroupChannelResponse, error) {
	out := new(RPCChannelCreateGroupChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/CreateGroupChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) KickBan(ctx context.Context, in *RPCChannelKickBanRequest, opts ...grpc.CallOption) (*RPCChannelKickBanResponse, error) {
	out := new(RPCChannelKickBanResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/KickBan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) UnBan(ctx context.Context, in *RPCChannelUnBanRequest, opts ...grpc.CallOption) (*RPCChannelUnBanResponse, error) {
	out := new(RPCChannelUnBanResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/UnBan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetGame(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*GameResponse, error) {
	out := new(GameResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetGames(ctx context.Context, in *RPCGameGetGamesRequest, opts ...grpc.CallOption) (*RPCGameGetGamesResponse, error) {
	out := new(RPCGameGetGamesResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetGames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetGameChannels(ctx context.Context, in *RPCGameGetGameChannelsRequest, opts ...grpc.CallOption) (*RPCGameGetGameChannelsResponse, error) {
	out := new(RPCGameGetGameChannelsResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetGameChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetChannelUsers(ctx context.Context, in *RPCChannelGetChannelUsersRequest, opts ...grpc.CallOption) (*RPCChannelGetChannelUsersResponse, error) {
	out := new(RPCChannelGetChannelUsersResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetChannelUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) UnhideChannelIfNeeded(ctx context.Context, in *RPCChannelUnhideChannelRequest, opts ...grpc.CallOption) (*RPCChannelUnhideChannelResponse, error) {
	out := new(RPCChannelUnhideChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/UnhideChannelIfNeeded", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) InviteMember(ctx context.Context, in *RPCChannelInviteMemberRequest, opts ...grpc.CallOption) (*RPCChannelInviteMemberResponse, error) {
	out := new(RPCChannelInviteMemberResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/InviteMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) EditChannel(ctx context.Context, in *RPCEditChannelRequest, opts ...grpc.CallOption) (*RPCEditChannelResponse, error) {
	out := new(RPCEditChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/EditChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) DeleteChannel(ctx context.Context, in *RPCDeleteChannelRequest, opts ...grpc.CallOption) (*RPCDeleteChannelResponse, error) {
	out := new(RPCDeleteChannelResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/DeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) CanJoinChannel(ctx context.Context, in *RPCJoinChannelInfoRequest, opts ...grpc.CallOption) (*RPCJoinChannelInfoResponse, error) {
	out := new(RPCJoinChannelInfoResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/CanJoinChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) JoinProprietaryChannels(ctx context.Context, in *RPCJoinProprietaryChannelsRequest, opts ...grpc.CallOption) (*RPCJoinProprietaryChannelsResponse, error) {
	out := new(RPCJoinProprietaryChannelsResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/JoinProprietaryChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelServiceClient) GetExtendedChannelInfo(ctx context.Context, in *RPCChannelGetChannelRequest, opts ...grpc.CallOption) (*RPCExtendedChannelInfoResponse, error) {
	out := new(RPCExtendedChannelInfoResponse)
	err := grpc.Invoke(ctx, "/proto.ChannelService/GetExtendedChannelInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChannelService service

type ChannelServiceServer interface {
	CreateChannel(context.Context, *RPCChannelCreateChannelRequest) (*RPCChannelCreateChannelResponse, error)
	JoinChannel(context.Context, *ChannelUpdateRequest) (*ChannelUpdateResponse, error)
	LeaveChannel(context.Context, *ChannelUpdateRequest) (*ChannelUpdateResponse, error)
	AddUsersToHubChannel(context.Context, *RPCChannelAddUsersToHubChannelRequest) (*RPCChannelAddUsersToHubChannelResponse, error)
	AddUserToHubChannels(context.Context, *RPCChannelAddUserToHubChannelsRequest) (*RPCChannelAddUserToHubChannelsResponse, error)
	GetChannel(context.Context, *RPCChannelGetChannelRequest) (*RPCChannelGetChannelResponse, error)
	JoinGameChannel(context.Context, *RPCChannelJoinGameChannelRequest) (*RPCChannelJoinGameChannelResponse, error)
	CreateGroupChannel(context.Context, *RPCChannelCreateGroupChannelRequest) (*RPCChannelCreateGroupChannelResponse, error)
	KickBan(context.Context, *RPCChannelKickBanRequest) (*RPCChannelKickBanResponse, error)
	UnBan(context.Context, *RPCChannelUnBanRequest) (*RPCChannelUnBanResponse, error)
	GetGame(context.Context, *StringValue) (*GameResponse, error)
	GetGames(context.Context, *RPCGameGetGamesRequest) (*RPCGameGetGamesResponse, error)
	GetGameChannels(context.Context, *RPCGameGetGameChannelsRequest) (*RPCGameGetGameChannelsResponse, error)
	GetChannelUsers(context.Context, *RPCChannelGetChannelUsersRequest) (*RPCChannelGetChannelUsersResponse, error)
	UnhideChannelIfNeeded(context.Context, *RPCChannelUnhideChannelRequest) (*RPCChannelUnhideChannelResponse, error)
	InviteMember(context.Context, *RPCChannelInviteMemberRequest) (*RPCChannelInviteMemberResponse, error)
	EditChannel(context.Context, *RPCEditChannelRequest) (*RPCEditChannelResponse, error)
	DeleteChannel(context.Context, *RPCDeleteChannelRequest) (*RPCDeleteChannelResponse, error)
	CanJoinChannel(context.Context, *RPCJoinChannelInfoRequest) (*RPCJoinChannelInfoResponse, error)
	JoinProprietaryChannels(context.Context, *RPCJoinProprietaryChannelsRequest) (*RPCJoinProprietaryChannelsResponse, error)
	GetExtendedChannelInfo(context.Context, *RPCChannelGetChannelRequest) (*RPCExtendedChannelInfoResponse, error)
}

func RegisterChannelServiceServer(s *grpc.Server, srv ChannelServiceServer) {
	s.RegisterService(&_ChannelService_serviceDesc, srv)
}

func _ChannelService_CreateChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelCreateChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).CreateChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_JoinChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ChannelUpdateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).JoinChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_LeaveChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ChannelUpdateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).LeaveChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_AddUsersToHubChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelAddUsersToHubChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).AddUsersToHubChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_AddUserToHubChannels_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelAddUserToHubChannelsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).AddUserToHubChannels(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelGetChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_JoinGameChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelJoinGameChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).JoinGameChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_CreateGroupChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelCreateGroupChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).CreateGroupChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_KickBan_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelKickBanRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).KickBan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_UnBan_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelUnBanRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).UnBan(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetGame_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StringValue)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetGame(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetGames_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGameGetGamesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetGames(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetGameChannels_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGameGetGameChannelsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetGameChannels(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetChannelUsers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelGetChannelUsersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetChannelUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_UnhideChannelIfNeeded_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelUnhideChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).UnhideChannelIfNeeded(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_InviteMember_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelInviteMemberRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).InviteMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_EditChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCEditChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).EditChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_DeleteChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCDeleteChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).DeleteChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_CanJoinChannel_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCJoinChannelInfoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).CanJoinChannel(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_JoinProprietaryChannels_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCJoinProprietaryChannelsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).JoinProprietaryChannels(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ChannelService_GetExtendedChannelInfo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCChannelGetChannelRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChannelServiceServer).GetExtendedChannelInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ChannelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChannelService",
	HandlerType: (*ChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelService_CreateChannel_Handler,
		},
		{
			MethodName: "JoinChannel",
			Handler:    _ChannelService_JoinChannel_Handler,
		},
		{
			MethodName: "LeaveChannel",
			Handler:    _ChannelService_LeaveChannel_Handler,
		},
		{
			MethodName: "AddUsersToHubChannel",
			Handler:    _ChannelService_AddUsersToHubChannel_Handler,
		},
		{
			MethodName: "AddUserToHubChannels",
			Handler:    _ChannelService_AddUserToHubChannels_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChannelService_GetChannel_Handler,
		},
		{
			MethodName: "JoinGameChannel",
			Handler:    _ChannelService_JoinGameChannel_Handler,
		},
		{
			MethodName: "CreateGroupChannel",
			Handler:    _ChannelService_CreateGroupChannel_Handler,
		},
		{
			MethodName: "KickBan",
			Handler:    _ChannelService_KickBan_Handler,
		},
		{
			MethodName: "UnBan",
			Handler:    _ChannelService_UnBan_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _ChannelService_GetGame_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _ChannelService_GetGames_Handler,
		},
		{
			MethodName: "GetGameChannels",
			Handler:    _ChannelService_GetGameChannels_Handler,
		},
		{
			MethodName: "GetChannelUsers",
			Handler:    _ChannelService_GetChannelUsers_Handler,
		},
		{
			MethodName: "UnhideChannelIfNeeded",
			Handler:    _ChannelService_UnhideChannelIfNeeded_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _ChannelService_InviteMember_Handler,
		},
		{
			MethodName: "EditChannel",
			Handler:    _ChannelService_EditChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelService_DeleteChannel_Handler,
		},
		{
			MethodName: "CanJoinChannel",
			Handler:    _ChannelService_CanJoinChannel_Handler,
		},
		{
			MethodName: "JoinProprietaryChannels",
			Handler:    _ChannelService_JoinProprietaryChannels_Handler,
		},
		{
			MethodName: "GetExtendedChannelInfo",
			Handler:    _ChannelService_GetExtendedChannelInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
