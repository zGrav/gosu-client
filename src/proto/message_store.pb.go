// Code generated by protoc-gen-go.
// source: message_store.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type GetMessageRequest struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id" json:"message_id,omitempty"`
}

func (m *GetMessageRequest) Reset()         { *m = GetMessageRequest{} }
func (m *GetMessageRequest) String() string { return proto.CompactTextString(m) }
func (*GetMessageRequest) ProtoMessage()    {}

type GetMessageResponse struct {
	Message *WebsocketMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Success bool              `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error   *APIError         `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetMessageResponse) Reset()         { *m = GetMessageResponse{} }
func (m *GetMessageResponse) String() string { return proto.CompactTextString(m) }
func (*GetMessageResponse) ProtoMessage()    {}

func (m *GetMessageResponse) GetMessage() *WebsocketMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GetMessageResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

// Example Messages Until:
// GetMessagesRequest {
//     channel_id: 'uuid',
//     end: '99999999999.0',
// }
//
// Example Messages From:
// GetMessagesRequest {
//     channel_id: 'uuid',
//     start: '123456789.0',
// }
type GetMessagesRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	// start timestamp for message range
	Start string `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// end timestamp for message range
	End string `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	// messages are sorted by timestamp in ascending order (older messages first)
	SortAscending bool `protobuf:"varint,4,opt,name=sort_ascending" json:"sort_ascending,omitempty"`
	// deleted messages not included by default
	IncludeDeleted bool `protobuf:"varint,5,opt,name=include_deleted" json:"include_deleted,omitempty"`
	// defaults to 40
	Limit int64 `protobuf:"varint,6,opt,name=limit" json:"limit,omitempty"`
}

func (m *GetMessagesRequest) Reset()         { *m = GetMessagesRequest{} }
func (m *GetMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*GetMessagesRequest) ProtoMessage()    {}

type GetMessagesResponse struct {
	Messages []*WebsocketMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	Success  bool                `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error    *APIError           `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetMessagesResponse) Reset()         { *m = GetMessagesResponse{} }
func (m *GetMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*GetMessagesResponse) ProtoMessage()    {}

func (m *GetMessagesResponse) GetMessages() []*WebsocketMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *GetMessagesResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type IndexMessagesRequest struct {
	Messages []*WebsocketMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *IndexMessagesRequest) Reset()         { *m = IndexMessagesRequest{} }
func (m *IndexMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*IndexMessagesRequest) ProtoMessage()    {}

func (m *IndexMessagesRequest) GetMessages() []*WebsocketMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type IndexMessagesResponse struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   *APIError `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *IndexMessagesResponse) Reset()         { *m = IndexMessagesResponse{} }
func (m *IndexMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*IndexMessagesResponse) ProtoMessage()    {}

func (m *IndexMessagesResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteMessagesRequest struct {
	MessageIds []string `protobuf:"bytes,1,rep,name=message_ids" json:"message_ids,omitempty"`
	UserId     string   `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *DeleteMessagesRequest) Reset()         { *m = DeleteMessagesRequest{} }
func (m *DeleteMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMessagesRequest) ProtoMessage()    {}

type DeleteMessagesResponse struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   *APIError `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteMessagesResponse) Reset()         { *m = DeleteMessagesResponse{} }
func (m *DeleteMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMessagesResponse) ProtoMessage()    {}

func (m *DeleteMessagesResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteMessageBatchRequest struct {
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id" json:"channel_id,omitempty"`
	Start     string `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	End       string `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	UserId    string `protobuf:"bytes,4,opt,name=user_id" json:"user_id,omitempty"`
	DeleterId string `protobuf:"bytes,5,opt,name=deleter_id" json:"deleter_id,omitempty"`
}

func (m *DeleteMessageBatchRequest) Reset()         { *m = DeleteMessageBatchRequest{} }
func (m *DeleteMessageBatchRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMessageBatchRequest) ProtoMessage()    {}

type DeleteMessageBatchResponse struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   *APIError `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteMessageBatchResponse) Reset()         { *m = DeleteMessageBatchResponse{} }
func (m *DeleteMessageBatchResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMessageBatchResponse) ProtoMessage()    {}

func (m *DeleteMessageBatchResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for MessageService service

type MessageServiceClient interface {
	// Message store does no validation if user is allowed to load messages for target channel
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	IndexMessages(ctx context.Context, in *IndexMessagesRequest, opts ...grpc.CallOption) (*IndexMessagesResponse, error)
	DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error)
	DeleteMessageBatch(ctx context.Context, in *DeleteMessageBatchRequest, opts ...grpc.CallOption) (*DeleteMessageBatchResponse, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	out := new(GetMessageResponse)
	err := grpc.Invoke(ctx, "/proto.MessageService/GetMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := grpc.Invoke(ctx, "/proto.MessageService/GetMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) IndexMessages(ctx context.Context, in *IndexMessagesRequest, opts ...grpc.CallOption) (*IndexMessagesResponse, error) {
	out := new(IndexMessagesResponse)
	err := grpc.Invoke(ctx, "/proto.MessageService/IndexMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error) {
	out := new(DeleteMessagesResponse)
	err := grpc.Invoke(ctx, "/proto.MessageService/DeleteMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) DeleteMessageBatch(ctx context.Context, in *DeleteMessageBatchRequest, opts ...grpc.CallOption) (*DeleteMessageBatchResponse, error) {
	out := new(DeleteMessageBatchResponse)
	err := grpc.Invoke(ctx, "/proto.MessageService/DeleteMessageBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	// Message store does no validation if user is allowed to load messages for target channel
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	IndexMessages(context.Context, *IndexMessagesRequest) (*IndexMessagesResponse, error)
	DeleteMessages(context.Context, *DeleteMessagesRequest) (*DeleteMessagesResponse, error)
	DeleteMessageBatch(context.Context, *DeleteMessageBatchRequest) (*DeleteMessageBatchResponse, error)
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_GetMessage_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).GetMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MessageService_GetMessages_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).GetMessages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MessageService_IndexMessages_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(IndexMessagesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).IndexMessages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MessageService_DeleteMessages_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteMessagesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).DeleteMessages(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MessageService_DeleteMessageBatch_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteMessageBatchRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MessageServiceServer).DeleteMessageBatch(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessage",
			Handler:    _MessageService_GetMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _MessageService_GetMessages_Handler,
		},
		{
			MethodName: "IndexMessages",
			Handler:    _MessageService_IndexMessages_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _MessageService_DeleteMessages_Handler,
		},
		{
			MethodName: "DeleteMessageBatch",
			Handler:    _MessageService_DeleteMessageBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
