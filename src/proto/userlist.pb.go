// Code generated by protoc-gen-go.
// source: userlist.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RPCUserlistGetChannelUsersResponse_ErrorType int32

const (
	RPCUserlistGetChannelUsersResponse_NONE          RPCUserlistGetChannelUsersResponse_ErrorType = 0
	RPCUserlistGetChannelUsersResponse_UNKNOWN_ERROR RPCUserlistGetChannelUsersResponse_ErrorType = 1
	RPCUserlistGetChannelUsersResponse_BAD_REQUEST   RPCUserlistGetChannelUsersResponse_ErrorType = 2
	RPCUserlistGetChannelUsersResponse_FORBIDDEN     RPCUserlistGetChannelUsersResponse_ErrorType = 3
)

var RPCUserlistGetChannelUsersResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "UNKNOWN_ERROR",
	2: "BAD_REQUEST",
	3: "FORBIDDEN",
}
var RPCUserlistGetChannelUsersResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_REQUEST":   2,
	"FORBIDDEN":     3,
}

func (x RPCUserlistGetChannelUsersResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserlistGetChannelUsersResponse_ErrorType_name, int32(x))
}

type RPCUserlistGetHubMembersResponse_ErrorType int32

const (
	RPCUserlistGetHubMembersResponse_NONE          RPCUserlistGetHubMembersResponse_ErrorType = 0
	RPCUserlistGetHubMembersResponse_UNKNOWN_ERROR RPCUserlistGetHubMembersResponse_ErrorType = 1
	RPCUserlistGetHubMembersResponse_BAD_REQUEST   RPCUserlistGetHubMembersResponse_ErrorType = 2
	RPCUserlistGetHubMembersResponse_FORBIDDEN     RPCUserlistGetHubMembersResponse_ErrorType = 3
)

var RPCUserlistGetHubMembersResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "UNKNOWN_ERROR",
	2: "BAD_REQUEST",
	3: "FORBIDDEN",
}
var RPCUserlistGetHubMembersResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"UNKNOWN_ERROR": 1,
	"BAD_REQUEST":   2,
	"FORBIDDEN":     3,
}

func (x RPCUserlistGetHubMembersResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserlistGetHubMembersResponse_ErrorType_name, int32(x))
}

type RPCUserlistGetChannelUsersRequest struct {
	RequestingUserId string `protobuf:"bytes,1,opt,name=requesting_user_id" json:"requesting_user_id,omitempty"`
	ChannelId        string `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	Size             int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	From             int64  `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`
	ExcludeOffline   bool   `protobuf:"varint,5,opt,name=exclude_offline" json:"exclude_offline,omitempty"`
}

func (m *RPCUserlistGetChannelUsersRequest) Reset()         { *m = RPCUserlistGetChannelUsersRequest{} }
func (m *RPCUserlistGetChannelUsersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetChannelUsersRequest) ProtoMessage()    {}

type RPCUserlistGetChannelUsersResponse struct {
	Error       RPCUserlistGetChannelUsersResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCUserlistGetChannelUsersResponse_ErrorType" json:"error,omitempty"`
	TotalUsers  int64                                        `protobuf:"varint,2,opt,name=total_users" json:"total_users,omitempty"`
	From        int64                                        `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	Users       []*ChannelUser                               `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	OnlineUsers int64                                        `protobuf:"varint,5,opt,name=online_users" json:"online_users,omitempty"`
	PagedUsers  int64                                        `protobuf:"varint,6,opt,name=paged_users" json:"paged_users,omitempty"`
}

func (m *RPCUserlistGetChannelUsersResponse) Reset()         { *m = RPCUserlistGetChannelUsersResponse{} }
func (m *RPCUserlistGetChannelUsersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetChannelUsersResponse) ProtoMessage()    {}

func (m *RPCUserlistGetChannelUsersResponse) GetUsers() []*ChannelUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type RPCUserlistGetHubMembersRequest struct {
	RequestingUserId string `protobuf:"bytes,1,opt,name=requesting_user_id" json:"requesting_user_id,omitempty"`
	HubId            string `protobuf:"bytes,2,opt,name=hub_id" json:"hub_id,omitempty"`
	Size             int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	From             int64  `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`
}

func (m *RPCUserlistGetHubMembersRequest) Reset()         { *m = RPCUserlistGetHubMembersRequest{} }
func (m *RPCUserlistGetHubMembersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetHubMembersRequest) ProtoMessage()    {}

type RPCUserlistGetHubMembersResponse struct {
	Error      RPCUserlistGetHubMembersResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCUserlistGetHubMembersResponse_ErrorType" json:"error,omitempty"`
	TotalUsers int64                                      `protobuf:"varint,2,opt,name=total_users" json:"total_users,omitempty"`
	From       int64                                      `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	Users      []*MembershipEntry                         `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	PagedUsers int64                                      `protobuf:"varint,6,opt,name=paged_users" json:"paged_users,omitempty"`
}

func (m *RPCUserlistGetHubMembersResponse) Reset()         { *m = RPCUserlistGetHubMembersResponse{} }
func (m *RPCUserlistGetHubMembersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetHubMembersResponse) ProtoMessage()    {}

func (m *RPCUserlistGetHubMembersResponse) GetUsers() []*MembershipEntry {
	if m != nil {
		return m.Users
	}
	return nil
}

type RPCUserlistSearchHubMembersRequest struct {
	RequestingUserId string `protobuf:"bytes,1,opt,name=requesting_user_id" json:"requesting_user_id,omitempty"`
	HubId            string `protobuf:"bytes,2,opt,name=hub_id" json:"hub_id,omitempty"`
	Size             int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	From             int64  `protobuf:"varint,4,opt,name=from" json:"from,omitempty"`
	Term             string `protobuf:"bytes,5,opt,name=term" json:"term,omitempty"`
	Fuzzy            bool   `protobuf:"varint,6,opt,name=fuzzy" json:"fuzzy,omitempty"`
}

func (m *RPCUserlistSearchHubMembersRequest) Reset()         { *m = RPCUserlistSearchHubMembersRequest{} }
func (m *RPCUserlistSearchHubMembersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistSearchHubMembersRequest) ProtoMessage()    {}

type RPCUserlistSearchHubMembersResponse struct {
	Error      SearchMembersResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.SearchMembersResponse_ErrorType" json:"error,omitempty"`
	From       int64                           `protobuf:"varint,2,opt,name=from" json:"from,omitempty"`
	Users      []*MembershipEntry              `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	PagedUsers int64                           `protobuf:"varint,4,opt,name=paged_users" json:"paged_users,omitempty"`
}

func (m *RPCUserlistSearchHubMembersResponse) Reset()         { *m = RPCUserlistSearchHubMembersResponse{} }
func (m *RPCUserlistSearchHubMembersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistSearchHubMembersResponse) ProtoMessage()    {}

func (m *RPCUserlistSearchHubMembersResponse) GetUsers() []*MembershipEntry {
	if m != nil {
		return m.Users
	}
	return nil
}

type RPCUserlistGetUserCountsRequest struct {
	RequestingUserId string   `protobuf:"bytes,1,opt,name=requesting_user_id" json:"requesting_user_id,omitempty"`
	HubIds           []string `protobuf:"bytes,2,rep,name=hub_ids" json:"hub_ids,omitempty"`
	ExcludeOffline   bool     `protobuf:"varint,3,opt,name=exclude_offline" json:"exclude_offline,omitempty"`
}

func (m *RPCUserlistGetUserCountsRequest) Reset()         { *m = RPCUserlistGetUserCountsRequest{} }
func (m *RPCUserlistGetUserCountsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetUserCountsRequest) ProtoMessage()    {}

type RPCUserlistGetUserCountsResponse struct {
	Counts map[string]int64 `protobuf:"bytes,1,rep,name=counts" json:"counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *RPCUserlistGetUserCountsResponse) Reset()         { *m = RPCUserlistGetUserCountsResponse{} }
func (m *RPCUserlistGetUserCountsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserlistGetUserCountsResponse) ProtoMessage()    {}

func (m *RPCUserlistGetUserCountsResponse) GetCounts() map[string]int64 {
	if m != nil {
		return m.Counts
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.RPCUserlistGetChannelUsersResponse_ErrorType", RPCUserlistGetChannelUsersResponse_ErrorType_name, RPCUserlistGetChannelUsersResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCUserlistGetHubMembersResponse_ErrorType", RPCUserlistGetHubMembersResponse_ErrorType_name, RPCUserlistGetHubMembersResponse_ErrorType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for UserlistService service

type UserlistServiceClient interface {
	GetChannelUsers(ctx context.Context, in *RPCUserlistGetChannelUsersRequest, opts ...grpc.CallOption) (*RPCUserlistGetChannelUsersResponse, error)
	GetHubMembers(ctx context.Context, in *RPCUserlistGetHubMembersRequest, opts ...grpc.CallOption) (*RPCUserlistGetHubMembersResponse, error)
	SearchHubMembers(ctx context.Context, in *RPCUserlistSearchHubMembersRequest, opts ...grpc.CallOption) (*RPCUserlistSearchHubMembersResponse, error)
	GetUserCounts(ctx context.Context, in *RPCUserlistGetUserCountsRequest, opts ...grpc.CallOption) (*RPCUserlistGetUserCountsResponse, error)
}

type userlistServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserlistServiceClient(cc *grpc.ClientConn) UserlistServiceClient {
	return &userlistServiceClient{cc}
}

func (c *userlistServiceClient) GetChannelUsers(ctx context.Context, in *RPCUserlistGetChannelUsersRequest, opts ...grpc.CallOption) (*RPCUserlistGetChannelUsersResponse, error) {
	out := new(RPCUserlistGetChannelUsersResponse)
	err := grpc.Invoke(ctx, "/proto.UserlistService/GetChannelUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userlistServiceClient) GetHubMembers(ctx context.Context, in *RPCUserlistGetHubMembersRequest, opts ...grpc.CallOption) (*RPCUserlistGetHubMembersResponse, error) {
	out := new(RPCUserlistGetHubMembersResponse)
	err := grpc.Invoke(ctx, "/proto.UserlistService/GetHubMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userlistServiceClient) SearchHubMembers(ctx context.Context, in *RPCUserlistSearchHubMembersRequest, opts ...grpc.CallOption) (*RPCUserlistSearchHubMembersResponse, error) {
	out := new(RPCUserlistSearchHubMembersResponse)
	err := grpc.Invoke(ctx, "/proto.UserlistService/SearchHubMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userlistServiceClient) GetUserCounts(ctx context.Context, in *RPCUserlistGetUserCountsRequest, opts ...grpc.CallOption) (*RPCUserlistGetUserCountsResponse, error) {
	out := new(RPCUserlistGetUserCountsResponse)
	err := grpc.Invoke(ctx, "/proto.UserlistService/GetUserCounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserlistService service

type UserlistServiceServer interface {
	GetChannelUsers(context.Context, *RPCUserlistGetChannelUsersRequest) (*RPCUserlistGetChannelUsersResponse, error)
	GetHubMembers(context.Context, *RPCUserlistGetHubMembersRequest) (*RPCUserlistGetHubMembersResponse, error)
	SearchHubMembers(context.Context, *RPCUserlistSearchHubMembersRequest) (*RPCUserlistSearchHubMembersResponse, error)
	GetUserCounts(context.Context, *RPCUserlistGetUserCountsRequest) (*RPCUserlistGetUserCountsResponse, error)
}

func RegisterUserlistServiceServer(s *grpc.Server, srv UserlistServiceServer) {
	s.RegisterService(&_UserlistService_serviceDesc, srv)
}

func _UserlistService_GetChannelUsers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserlistGetChannelUsersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserlistServiceServer).GetChannelUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserlistService_GetHubMembers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserlistGetHubMembersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserlistServiceServer).GetHubMembers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserlistService_SearchHubMembers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserlistSearchHubMembersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserlistServiceServer).SearchHubMembers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserlistService_GetUserCounts_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserlistGetUserCountsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserlistServiceServer).GetUserCounts(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _UserlistService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserlistService",
	HandlerType: (*UserlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelUsers",
			Handler:    _UserlistService_GetChannelUsers_Handler,
		},
		{
			MethodName: "GetHubMembers",
			Handler:    _UserlistService_GetHubMembers_Handler,
		},
		{
			MethodName: "SearchHubMembers",
			Handler:    _UserlistService_SearchHubMembers_Handler,
		},
		{
			MethodName: "GetUserCounts",
			Handler:    _UserlistService_GetUserCounts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
