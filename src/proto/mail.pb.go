// Code generated by protoc-gen-go.
// source: mail.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type SendEmailRequest struct {
	RecipientName    string            `protobuf:"bytes,1,opt,name=recipient_name" json:"recipient_name,omitempty"`
	RecipientAddress string            `protobuf:"bytes,2,opt,name=recipient_address" json:"recipient_address,omitempty"`
	Subject          string            `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Template         string            `protobuf:"bytes,4,opt,name=template" json:"template,omitempty"`
	Variables        map[string]string `protobuf:"bytes,5,rep,name=variables" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SendEmailRequest) Reset()         { *m = SendEmailRequest{} }
func (m *SendEmailRequest) String() string { return proto.CompactTextString(m) }
func (*SendEmailRequest) ProtoMessage()    {}

func (m *SendEmailRequest) GetVariables() map[string]string {
	if m != nil {
		return m.Variables
	}
	return nil
}

type SendEmailResponse struct {
}

func (m *SendEmailResponse) Reset()         { *m = SendEmailResponse{} }
func (m *SendEmailResponse) String() string { return proto.CompactTextString(m) }
func (*SendEmailResponse) ProtoMessage()    {}

type SendPushReminderRequest struct {
	Recipient    *User             `protobuf:"bytes,1,opt,name=recipient" json:"recipient,omitempty"`
	Message      *WebsocketMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Channel      *Channel          `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Group        *Group            `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`
	Game         *Game             `protobuf:"bytes,5,opt,name=game" json:"game,omitempty"`
	Participants []*User           `protobuf:"bytes,6,rep,name=participants" json:"participants,omitempty"`
	WasMention   bool              `protobuf:"varint,7,opt,name=wasMention" json:"wasMention,omitempty"`
}

func (m *SendPushReminderRequest) Reset()         { *m = SendPushReminderRequest{} }
func (m *SendPushReminderRequest) String() string { return proto.CompactTextString(m) }
func (*SendPushReminderRequest) ProtoMessage()    {}

func (m *SendPushReminderRequest) GetRecipient() *User {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *SendPushReminderRequest) GetMessage() *WebsocketMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SendPushReminderRequest) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *SendPushReminderRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *SendPushReminderRequest) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *SendPushReminderRequest) GetParticipants() []*User {
	if m != nil {
		return m.Participants
	}
	return nil
}

type SendPushReminderResponse struct {
	Recipient    *User             `protobuf:"bytes,1,opt,name=recipient" json:"recipient,omitempty"`
	Message      *WebsocketMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Channel      *Channel          `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Group        *Group            `protobuf:"bytes,4,opt,name=group" json:"group,omitempty"`
	Game         *Game             `protobuf:"bytes,5,opt,name=game" json:"game,omitempty"`
	Participants []*User           `protobuf:"bytes,6,rep,name=participants" json:"participants,omitempty"`
}

func (m *SendPushReminderResponse) Reset()         { *m = SendPushReminderResponse{} }
func (m *SendPushReminderResponse) String() string { return proto.CompactTextString(m) }
func (*SendPushReminderResponse) ProtoMessage()    {}

func (m *SendPushReminderResponse) GetRecipient() *User {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *SendPushReminderResponse) GetMessage() *WebsocketMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SendPushReminderResponse) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *SendPushReminderResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *SendPushReminderResponse) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

func (m *SendPushReminderResponse) GetParticipants() []*User {
	if m != nil {
		return m.Participants
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for MailService service

type MailServiceClient interface {
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
	SendPushReminder(ctx context.Context, in *SendPushReminderRequest, opts ...grpc.CallOption) (*SendPushReminderResponse, error)
}

type mailServiceClient struct {
	cc *grpc.ClientConn
}

func NewMailServiceClient(cc *grpc.ClientConn) MailServiceClient {
	return &mailServiceClient{cc}
}

func (c *mailServiceClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := grpc.Invoke(ctx, "/proto.MailService/SendEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailServiceClient) SendPushReminder(ctx context.Context, in *SendPushReminderRequest, opts ...grpc.CallOption) (*SendPushReminderResponse, error) {
	out := new(SendPushReminderResponse)
	err := grpc.Invoke(ctx, "/proto.MailService/SendPushReminder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MailService service

type MailServiceServer interface {
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	SendPushReminder(context.Context, *SendPushReminderRequest) (*SendPushReminderResponse, error)
}

func RegisterMailServiceServer(s *grpc.Server, srv MailServiceServer) {
	s.RegisterService(&_MailService_serviceDesc, srv)
}

func _MailService_SendEmail_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MailServiceServer).SendEmail(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MailService_SendPushReminder_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SendPushReminderRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MailServiceServer).SendPushReminder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MailService",
	HandlerType: (*MailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _MailService_SendEmail_Handler,
		},
		{
			MethodName: "SendPushReminder",
			Handler:    _MailService_SendPushReminder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
