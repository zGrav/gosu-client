syntax = "proto3";

package proto;
import "profile.proto";
import "profile_userinfo.proto";
import "message.proto";
import "optional.proto";
import "prefs.proto";
import "hub_base.proto";
option java_package = "maple.proto";
option go_package = "gosuproto";

// API - Auth

message AuthLoginRequest {
    string username = 1;
    string password = 2;
    string agent_id = 3;
    string agent_name = 4;
    UserAgent.UserAgentType agent_type = 5;
}

message AuthLoginResponse {
    bool success = 1;
    string token = 2;
    User user = 3;
}

message AuthWithTokenRequest {
    string token = 1;
}

message AuthWithTokenResponse {
    bool success = 1;
    string token = 2;
}

message AuthRegisterRequest {
    string username = 1;
    string password = 2;
    string email = 3;
    string invite_code = 4;
    bool newsletter = 5;
    bool terms_of_service = 6;
    string gosu_invite_code = 7;
    string agent_id = 8;
    string agent_name = 9;
    UserAgent.UserAgentType agent_type = 10;
    bool ephemeral = 11;
    repeated string join_communities = 12;
    bool auto_generate_name_suffix = 13;
}

message AuthRegisterResponse {
    enum ErrorType {
        NONE = 0;
        USERNAME_TAKEN = 1;
        EMAIL_TAKEN = 2;
        PW_TOO_SHORT = 3;
        PW_BAD = 4;
        EMAIL_INVALID = 5;
        SERVER_ERROR = 6;
        USERNAME_INVALID = 7;
        DISPLAYNAME_TAKEN = 8;
        DISPLAYNAME_INVALID = 9;
        AVATAR_INVALID = 10;
        GROUP_INVITE_CODE_INVALID = 11;
        GOSU_INVITE_CODE_INVALID = 12;
        INVITE_CODE_MISSING = 13;
        BACKGROUND_IMAGE_INVALID = 14;
        TITLE_IMAGE_INVALID = 15;
    }

    bool success = 1;
    string token = 2;
    ErrorType error = 3;
    User user = 4;
    string AutoGeneratedPassword = 5;
}

message AuthActivateResponse {
    bool success = 1;
}

message AuthPasswordResetRequest {
    string email = 1;
}

message AuthPasswordResetResponse {
    bool success = 1;
}

message AuthExecutePasswordResetRequest {
    string secret = 2;
    string new_password = 3;
}

message AuthExecutePasswordResetResponse {
    bool success = 1;
}

// API - User

message ProfileGetOwnProfileResponse {
    UserInfo user_info = 1;
}

message ProfileGetOtherProfileResponse {
    ChatUserInfo user_info = 1;
}

message ProfileUpdateRequest {
    OptionalString email = 1;
    OptionalString display_name = 2;
    OptionalString avatar_image = 3;
    User.UserStatus status = 4;
    OptionalBool terms_of_service = 5;
    OptionalBool newsletter = 6;
    OptionalString background_image = 7;
    OptionalString title_image = 8;

    BiographyUpdateData biography = 16;
}

message ProfileUpdateResponse {
    AuthRegisterResponse.ErrorType error = 1;
    User user = 2;
}

message ProfileUpdatePasswordRequest {
    string old_password = 2;
    string new_password = 3;
}

message ProfileUpdatePasswordResponse {
    bool success = 1;
}

message ProfileRequestFriendshipRequest {
    string user_id = 1;
    string message = 2;
}

message ProfileRequestFriendshipResponse {
    enum FriendshipStatus {
        NONE = 0;
        REQUESTED = 1;
        ACCEPTED = 2;
    }

    FriendshipStatus status = 1;
}

message ProfileUnfriendResponse {
}

message ProfileGetFriendsResponse {
    repeated ChatUser friends = 1;
    repeated FriendRequest sent_friend_requests = 2;
    repeated FriendRequest received_friend_requests = 3;
}

message UserSetChannelRoleRequest {
    string user_id = 1;
    ChannelMembershipRecord.MembershipType membership_type = 2;
}

message UserSetChannelRoleResponse {
    enum ErrorType {
        NONE = 0;
        UNKNOWN = 1;
        USER_NOT_IN_CHANNEL = 2;
        FORBIDDEN = 3;
        BAD_REQUEST = 4;
    }
    ErrorType error = 1;
}

message UserSetGroupRoleRequest {
    string user_id = 1;
    GroupMembershipRecord.MembershipType membership_type = 2;
}

message UserSetGroupRoleResponse {
    enum ErrorType {
        NONE = 0;
        UNKNOWN = 1;
        USER_NOT_IN_GROUP = 2;
        FORBIDDEN = 3;
        BAD_REQUEST = 4;
    }
    ErrorType error = 1;
}

message UserValidateUsernameRequest {
    string username = 1;
}

message UserValidateUsernameResponse {
    AuthRegisterResponse.ErrorType error = 1;
}

message UserConvertEphemeralUserRequest {
    string username = 1;
    string email_address = 2;
    string password = 3;
    bool newsletter = 4;
    bool terms_of_service = 5;
}

message UserConvertEphemeralUserResponse {
    enum ErrorType {
        NONE = 0;
        BAD_REQUEST = 1;
        UNKNOWN_ERROR = 2;
        USER_NOT_EPHEMERAL = 3;
        USERNAME_TAKEN = 4;
        USERNAME_INVALID = 5;
        EMAIL_TAKEN = 6;
        EMAIL_INVALID = 7;
        PW_TOO_SHORT = 8;
        PW_BAD = 9;
    }

    ErrorType error = 1;
    string token = 2;
    User user = 3;
}

// API - Chat

message ChatHandshakeResponse {
    string socket_address = 1;

    // TODO: send channel and user information?
    // ben sagt NEE!
    // daniel sagt vieleicht
    // josh hat nichts zu sagen
    // felix sagt: Topic closed... or is it?
}

message ChatGetMessagesResponse {
    repeated WebsocketMessage messages = 1;
}

message ChatGetUsersResponse {
    repeated ChatUser users = 1;
}

message ChatGetChannelUsersResponse {
    repeated ChannelUser users = 1;
    int64 paged_users = 2;
    int64 from = 3;
    int64 online_users = 4;
    int64 total_users = 5;
}

message ChatGetChannelsResponse {
    repeated Channel channels = 1;
}

message ChatPostJoinedChannelsRequest {
    repeated string channel_ids = 1;
}

message ChatGetS3UploadDataResponse {
    string url = 1;
    string access_key_id = 2;
    string filename = 3;
    string policy = 4;
    string signed = 5;
}

message ChatGetDirectMessageChannelRequest {
    repeated string user_ids = 1;
}

message ChatGetDirectMessageChannelResponse {
    Channel channel = 1;
}

// API - Groups

enum CreateGroupErrorType {
    NONE = 0;
    NAME_INVALID = 1;
    NAME_TAKEN = 2;
    TITLE_IMAGE_INVALID = 3;
    BACKGROUND_IMAGE_INVALID = 4;
    SERVER_ERROR = 5;
}

message GroupCreateGroupRequest {
    string name = 1;
    string description = 2;
    string title_image = 3;
    string background_image = 4;
}

message GroupCreateGroupResponse {
    CreateGroupErrorType error = 1;
    Group group = 2;
}

message GroupEditGroupRequest {
    string id = 1;
    OptionalString name = 2;
    OptionalString description = 3;
    OptionalString title_image = 4;
    OptionalString background_image = 5;
}

message GroupEditGroupResponse {
    CreateGroupErrorType error = 1;
    Group group = 2;
}

message GroupGetGroupResponse {
    Group group = 1;
    repeated Hub linked_hubs = 2;
}

message GroupCreateInviteCodeRequest {
    string group_id = 1;
}

message GroupCreateInviteCodeResponse {
    string invite_code = 1;
}

message GroupGetInviteCodeInfoRequest {
    string invite_code = 1;
}

message GroupGetInviteCodeInfoResponse {
    Group group = 1;
}

message GroupAcceptInviteRequest {
    string invite_code = 1;
}

message GroupAcceptInviteResponse {
    bool success = 1;
}

message GroupLeaveGroupRequest {
    string group_id = 1;
}

message GroupLeaveGroupResponse {
    UserInfo user_info = 1;
}

message GroupGetGroupsResponse {
    repeated Group groups = 1;
}

message GroupAddGroupMembersRequest {
    string group_id = 1;
    repeated PotentialGroupMember invitees = 3;
}

message GroupAddGroupMembersResponse {
}

message GroupJoinRequest {
    string code = 1;
}

message GroupJoinResponse {
    enum ErrorType {
        NONE = 0;
        UNKNOWN_ERROR = 1;
        BAD_REQUEST = 2;
        FORBIDDEN = 3;
        BANNED = 4;
        INVALID_CODE = 5;
    }
    ErrorType error = 1;
}

message GroupLeaveResponse {
    enum ErrorType {
        NONE = 0;
        UNKNOWN_ERROR = 1;
        BAD_REQUEST = 2;
    }
    ErrorType error = 1;
}

message GroupGetGroupTokenResponse {
    enum ErrorType {
        NONE = 0;
        UNKNOWN_ERROR = 1;
        BAD_REQUEST = 2;
        FORBIDDEN = 3;
    }
    ErrorType error = 1;
    string token = 2;
}

// API - Prefs

message PrefsGetPrefResponse {
    Pref pref = 1;
}

message PrefsGetPrefsResponse {
    repeated Pref prefs = 1;
}

message PrefsSetPrefsRequest {
    repeated Pref prefs = 1;
}

message PrefsSetPrefsResponse {
}

message PrefsDeletePrefsResponse {
}

// API - Search

message SearchSearchRequest {
    string search_term = 1;
    int32 limit = 2;
    bool search_users = 3;
    bool search_channels = 4;
    bool search_groups = 5;
    bool search_games = 6;
    bool search_tags = 7;
}

message SearchSearchResponse {
    repeated ChatUser users = 1;
    repeated Channel channels = 2;
    repeated Group groups = 3;
    repeated Game games = 4;
    repeated string tags = 5;
}

// Game Channels

message ChannelGetGameListResponse {
    GameListPage page = 1;
    string cache_id = 2;
}

message ChannelGetGameChannelListResponse {
    GameChannelListPage page = 1;
    string cache_id = 2;
}

// Reporting

message ReportRequest {
    enum Reason {
        UNKNOWN = 0;
        ABUSIVE_LANGUAGE = 1;
        GRIEFING = 2;
        MOBBING = 3;
        RACISM = 4;
        SPAM = 5;
        OTHER = 6;
    }

    string user_id = 1;
    string display_name = 2;
    string avatar_image_url = 3;
    string channel_id = 4;
    string channel_name = 5;
    string message_id = 6;
    string message_timestamp = 7;
    string message_body = 8;
    Reason reason = 9;
}
