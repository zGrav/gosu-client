// Code generated by protoc-gen-go.
// source: struct.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
type NullValue int32

const (
	// Null value.
	NullValue_NULL NullValue = 0
)

var NullValue_name = map[int32]string{
	0: "NULL",
}
var NullValue_value = map[string]int32{
	"NULL": 0,
}

func (x NullValue) String() string {
	return proto.EnumName(NullValue_name, int32(x))
}

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
type Struct struct {
	// Unordered map of dynamically typed values.
	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Struct) Reset()         { *m = Struct{} }
func (m *Struct) String() string { return proto.CompactTextString(m) }
func (*Struct) ProtoMessage()    {}

func (m *Struct) GetFields() map[string]*Value {
	if m != nil {
		return m.Fields
	}
	return nil
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of that
// variants, absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
type Value struct {
	// Represents a null value.
	NullValue NullValue `protobuf:"varint,1,opt,name=null_value,enum=proto.NullValue" json:"null_value,omitempty"`
	// Represents a double value.
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value" json:"number_value,omitempty"`
	// Represents a string value.
	StringValue string `protobuf:"bytes,3,opt,name=string_value" json:"string_value,omitempty"`
	// Represents a boolean value.
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value" json:"bool_value,omitempty"`
	// Represents a structured value.
	StructValue *Struct `protobuf:"bytes,5,opt,name=struct_value" json:"struct_value,omitempty"`
	// Represents a repeated `Value`.
	ListValue *ListValue `protobuf:"bytes,6,opt,name=list_value" json:"list_value,omitempty"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}

func (m *Value) GetStructValue() *Struct {
	if m != nil {
		return m.StructValue
	}
	return nil
}

func (m *Value) GetListValue() *ListValue {
	if m != nil {
		return m.ListValue
	}
	return nil
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
type ListValue struct {
	// Repeated field of dynamically typed values.
	Values []*Value `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *ListValue) Reset()         { *m = ListValue{} }
func (m *ListValue) String() string { return proto.CompactTextString(m) }
func (*ListValue) ProtoMessage()    {}

func (m *ListValue) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.NullValue", NullValue_name, NullValue_value)
}
