// Code generated by protoc-gen-go.
// source: push.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type PushRegisterRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId  string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Provider string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	Language string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
}

func (m *PushRegisterRequest) Reset()         { *m = PushRegisterRequest{} }
func (m *PushRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PushRegisterRequest) ProtoMessage()    {}

type PushRegisterResponse struct {
	UserId       string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId      string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Provider     string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	SubscriberId string `protobuf:"bytes,5,opt,name=subscriber_id" json:"subscriber_id,omitempty"`
}

func (m *PushRegisterResponse) Reset()         { *m = PushRegisterResponse{} }
func (m *PushRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*PushRegisterResponse) ProtoMessage()    {}

type PushMessageRequest struct {
	Event     string            `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Message   string            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Title     string            `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Localized map[string]string `protobuf:"bytes,4,rep,name=localized" json:"localized,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data      map[string]string `protobuf:"bytes,5,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Increment bool              `protobuf:"varint,6,opt,name=increment" json:"increment,omitempty"`
	Category  string            `protobuf:"bytes,7,opt,name=category" json:"category,omitempty"`
	Sound     string            `protobuf:"bytes,8,opt,name=sound" json:"sound,omitempty"`
}

func (m *PushMessageRequest) Reset()         { *m = PushMessageRequest{} }
func (m *PushMessageRequest) String() string { return proto.CompactTextString(m) }
func (*PushMessageRequest) ProtoMessage()    {}

func (m *PushMessageRequest) GetLocalized() map[string]string {
	if m != nil {
		return m.Localized
	}
	return nil
}

func (m *PushMessageRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushMessageResponse struct {
}

func (m *PushMessageResponse) Reset()         { *m = PushMessageResponse{} }
func (m *PushMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PushMessageResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PushService service

type PushServiceClient interface {
	Register(ctx context.Context, in *PushRegisterRequest, opts ...grpc.CallOption) (*PushRegisterResponse, error)
	SendMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*PushMessageResponse, error)
}

type pushServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushServiceClient(cc *grpc.ClientConn) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) Register(ctx context.Context, in *PushRegisterRequest, opts ...grpc.CallOption) (*PushRegisterResponse, error) {
	out := new(PushRegisterResponse)
	err := grpc.Invoke(ctx, "/proto.PushService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SendMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*PushMessageResponse, error) {
	out := new(PushMessageResponse)
	err := grpc.Invoke(ctx, "/proto.PushService/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PushService service

type PushServiceServer interface {
	Register(context.Context, *PushRegisterRequest) (*PushRegisterResponse, error)
	SendMessage(context.Context, *PushMessageRequest) (*PushMessageResponse, error)
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_Register_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PushRegisterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PushServiceServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PushService_SendMessage_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PushMessageRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PushServiceServer).SendMessage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PushService_Register_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _PushService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
