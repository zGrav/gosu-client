// Code generated by protoc-gen-go.
// source: notifications.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Notification_NotificationType int32

const (
	Notification_UNKNOWN        Notification_NotificationType = 0
	Notification_NEW_MESSAGE    Notification_NotificationType = 1
	Notification_MESSAGE_REPLY  Notification_NotificationType = 2
	Notification_CHANNEL_INVITE Notification_NotificationType = 3
)

var Notification_NotificationType_name = map[int32]string{
	0: "UNKNOWN",
	1: "NEW_MESSAGE",
	2: "MESSAGE_REPLY",
	3: "CHANNEL_INVITE",
}
var Notification_NotificationType_value = map[string]int32{
	"UNKNOWN":        0,
	"NEW_MESSAGE":    1,
	"MESSAGE_REPLY":  2,
	"CHANNEL_INVITE": 3,
}

func (x Notification_NotificationType) String() string {
	return proto.EnumName(Notification_NotificationType_name, int32(x))
}

type NotificationPreference_Value int32

const (
	NotificationPreference_UNKNOWN          NotificationPreference_Value = 0
	NotificationPreference_ALL_MESSAGES     NotificationPreference_Value = 1
	NotificationPreference_ONLY_MENTIONS    NotificationPreference_Value = 2
	NotificationPreference_NO_NOTIFICATIONS NotificationPreference_Value = 3
)

var NotificationPreference_Value_name = map[int32]string{
	0: "UNKNOWN",
	1: "ALL_MESSAGES",
	2: "ONLY_MENTIONS",
	3: "NO_NOTIFICATIONS",
}
var NotificationPreference_Value_value = map[string]int32{
	"UNKNOWN":          0,
	"ALL_MESSAGES":     1,
	"ONLY_MENTIONS":    2,
	"NO_NOTIFICATIONS": 3,
}

func (x NotificationPreference_Value) String() string {
	return proto.EnumName(NotificationPreference_Value_name, int32(x))
}

type ReadStatusUpdate struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *ReadStatusUpdate) Reset()         { *m = ReadStatusUpdate{} }
func (m *ReadStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*ReadStatusUpdate) ProtoMessage()    {}

type Notification struct {
	Id        string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title     string                        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Detail    string                        `protobuf:"bytes,3,opt,name=detail" json:"detail,omitempty"`
	ImageUrl  string                        `protobuf:"bytes,4,opt,name=image_url" json:"image_url,omitempty"`
	Read      bool                          `protobuf:"varint,5,opt,name=read" json:"read,omitempty"`
	Priority  int32                         `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty"`
	Type      Notification_NotificationType `protobuf:"varint,7,opt,name=type,enum=proto.Notification_NotificationType" json:"type,omitempty"`
	CreatedAt int64                         `protobuf:"varint,8,opt,name=created_at" json:"created_at,omitempty"`
	UpdatedAt int64                         `protobuf:"varint,9,opt,name=updated_at" json:"updated_at,omitempty"`
	DeletedAt int64                         `protobuf:"varint,10,opt,name=deleted_at" json:"deleted_at,omitempty"`
	// relations
	ChannelId string `protobuf:"bytes,11,opt,name=channel_id" json:"channel_id,omitempty"`
	UserId    string `protobuf:"bytes,12,opt,name=user_id" json:"user_id,omitempty"`
	Data      *Any   `protobuf:"bytes,13,opt,name=data" json:"data,omitempty"`
}

func (m *Notification) Reset()         { *m = Notification{} }
func (m *Notification) String() string { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()    {}

func (m *Notification) GetData() *Any {
	if m != nil {
		return m.Data
	}
	return nil
}

type NotificationPreference struct {
	Value NotificationPreference_Value `protobuf:"varint,1,opt,name=value,enum=proto.NotificationPreference_Value" json:"value,omitempty"`
}

func (m *NotificationPreference) Reset()         { *m = NotificationPreference{} }
func (m *NotificationPreference) String() string { return proto.CompactTextString(m) }
func (*NotificationPreference) ProtoMessage()    {}

type NotificationPreferences struct {
	UserId      string                             `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Preferences map[string]*NotificationPreference `protobuf:"bytes,2,rep,name=preferences" json:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NotificationPreferences) Reset()         { *m = NotificationPreferences{} }
func (m *NotificationPreferences) String() string { return proto.CompactTextString(m) }
func (*NotificationPreferences) ProtoMessage()    {}

func (m *NotificationPreferences) GetPreferences() map[string]*NotificationPreference {
	if m != nil {
		return m.Preferences
	}
	return nil
}

type GetNotificationsRequest struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId   string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *GetNotificationsRequest) Reset()         { *m = GetNotificationsRequest{} }
func (m *GetNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNotificationsRequest) ProtoMessage()    {}

type GetNotificationsResponse struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	Success       bool            `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error         *APIError       `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetNotificationsResponse) Reset()         { *m = GetNotificationsResponse{} }
func (m *GetNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*GetNotificationsResponse) ProtoMessage()    {}

func (m *GetNotificationsResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *GetNotificationsResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type DeleteNotificationsRequest struct {
	UserId          string   `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	NotificationIds []string `protobuf:"bytes,3,rep,name=notification_ids" json:"notification_ids,omitempty"`
}

func (m *DeleteNotificationsRequest) Reset()         { *m = DeleteNotificationsRequest{} }
func (m *DeleteNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNotificationsRequest) ProtoMessage()    {}

type DeleteNotificationsResponse struct {
	Success bool      `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error   *APIError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteNotificationsResponse) Reset()         { *m = DeleteNotificationsResponse{} }
func (m *DeleteNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNotificationsResponse) ProtoMessage()    {}

func (m *DeleteNotificationsResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type RegisterTokenRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId  string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Provider string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	Language string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
}

func (m *RegisterTokenRequest) Reset()         { *m = RegisterTokenRequest{} }
func (m *RegisterTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterTokenRequest) ProtoMessage()    {}

type RegisterTokenResponse struct {
	UserId       string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId      string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Token        string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	Provider     string `protobuf:"bytes,4,opt,name=provider" json:"provider,omitempty"`
	SubscriberId string `protobuf:"bytes,5,opt,name=subscriber_id" json:"subscriber_id,omitempty"`
}

func (m *RegisterTokenResponse) Reset()         { *m = RegisterTokenResponse{} }
func (m *RegisterTokenResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterTokenResponse) ProtoMessage()    {}

type GetPreferencesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *GetPreferencesRequest) Reset()         { *m = GetPreferencesRequest{} }
func (m *GetPreferencesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPreferencesRequest) ProtoMessage()    {}

type GetPreferencesResponse struct {
	Preferences *NotificationPreferences `protobuf:"bytes,1,opt,name=preferences" json:"preferences,omitempty"`
	Success     bool                     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error       *APIError                `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *GetPreferencesResponse) Reset()         { *m = GetPreferencesResponse{} }
func (m *GetPreferencesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPreferencesResponse) ProtoMessage()    {}

func (m *GetPreferencesResponse) GetPreferences() *NotificationPreferences {
	if m != nil {
		return m.Preferences
	}
	return nil
}

func (m *GetPreferencesResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

type UpdatePreferenceRequest struct {
	UserId     string                  `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId  string                  `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	Preference *NotificationPreference `protobuf:"bytes,3,opt,name=preference" json:"preference,omitempty"`
}

func (m *UpdatePreferenceRequest) Reset()         { *m = UpdatePreferenceRequest{} }
func (m *UpdatePreferenceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePreferenceRequest) ProtoMessage()    {}

func (m *UpdatePreferenceRequest) GetPreference() *NotificationPreference {
	if m != nil {
		return m.Preference
	}
	return nil
}

type UpdatePreferenceResponse struct {
	Success bool      `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Error   *APIError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *UpdatePreferenceResponse) Reset()         { *m = UpdatePreferenceResponse{} }
func (m *UpdatePreferenceResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePreferenceResponse) ProtoMessage()    {}

func (m *UpdatePreferenceResponse) GetError() *APIError {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Notification_NotificationType", Notification_NotificationType_name, Notification_NotificationType_value)
	proto.RegisterEnum("proto.NotificationPreference_Value", NotificationPreference_Value_name, NotificationPreference_Value_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for NotificationService service

type NotificationServiceClient interface {
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*DeleteNotificationsResponse, error)
	GetPreferences(ctx context.Context, in *GetPreferencesRequest, opts ...grpc.CallOption) (*GetPreferencesResponse, error)
	UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...grpc.CallOption) (*UpdatePreferenceResponse, error)
	RegisterPushToken(ctx context.Context, in *RegisterTokenRequest, opts ...grpc.CallOption) (*RegisterTokenResponse, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := grpc.Invoke(ctx, "/proto.NotificationService/GetNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*DeleteNotificationsResponse, error) {
	out := new(DeleteNotificationsResponse)
	err := grpc.Invoke(ctx, "/proto.NotificationService/DeleteNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) GetPreferences(ctx context.Context, in *GetPreferencesRequest, opts ...grpc.CallOption) (*GetPreferencesResponse, error) {
	out := new(GetPreferencesResponse)
	err := grpc.Invoke(ctx, "/proto.NotificationService/GetPreferences", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...grpc.CallOption) (*UpdatePreferenceResponse, error) {
	out := new(UpdatePreferenceResponse)
	err := grpc.Invoke(ctx, "/proto.NotificationService/UpdatePreference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RegisterPushToken(ctx context.Context, in *RegisterTokenRequest, opts ...grpc.CallOption) (*RegisterTokenResponse, error) {
	out := new(RegisterTokenResponse)
	err := grpc.Invoke(ctx, "/proto.NotificationService/RegisterPushToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NotificationService service

type NotificationServiceServer interface {
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	DeleteNotifications(context.Context, *DeleteNotificationsRequest) (*DeleteNotificationsResponse, error)
	GetPreferences(context.Context, *GetPreferencesRequest) (*GetPreferencesResponse, error)
	UpdatePreference(context.Context, *UpdatePreferenceRequest) (*UpdatePreferenceResponse, error)
	RegisterPushToken(context.Context, *RegisterTokenRequest) (*RegisterTokenResponse, error)
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_GetNotifications_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).GetNotifications(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NotificationService_DeleteNotifications_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteNotificationsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).DeleteNotifications(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NotificationService_GetPreferences_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetPreferencesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).GetPreferences(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NotificationService_UpdatePreference_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UpdatePreferenceRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).UpdatePreference(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NotificationService_RegisterPushToken_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RegisterTokenRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NotificationServiceServer).RegisterPushToken(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationService_GetNotifications_Handler,
		},
		{
			MethodName: "DeleteNotifications",
			Handler:    _NotificationService_DeleteNotifications_Handler,
		},
		{
			MethodName: "GetPreferences",
			Handler:    _NotificationService_GetPreferences_Handler,
		},
		{
			MethodName: "UpdatePreference",
			Handler:    _NotificationService_UpdatePreference_Handler,
		},
		{
			MethodName: "RegisterPushToken",
			Handler:    _NotificationService_RegisterPushToken_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
