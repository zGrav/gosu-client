// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package gosuproto

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RPCUserGetOwnProfileResponse_ErrorType int32

const (
	RPCUserGetOwnProfileResponse_NONE          RPCUserGetOwnProfileResponse_ErrorType = 0
	RPCUserGetOwnProfileResponse_BAD_REQUEST   RPCUserGetOwnProfileResponse_ErrorType = 1
	RPCUserGetOwnProfileResponse_UNKNOWN_ERROR RPCUserGetOwnProfileResponse_ErrorType = 2
	RPCUserGetOwnProfileResponse_NOT_FOUND     RPCUserGetOwnProfileResponse_ErrorType = 3
)

var RPCUserGetOwnProfileResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "BAD_REQUEST",
	2: "UNKNOWN_ERROR",
	3: "NOT_FOUND",
}
var RPCUserGetOwnProfileResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"BAD_REQUEST":   1,
	"UNKNOWN_ERROR": 2,
	"NOT_FOUND":     3,
}

func (x RPCUserGetOwnProfileResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserGetOwnProfileResponse_ErrorType_name, int32(x))
}

type RPCUserDeleteUserResponse_ErrorType int32

const (
	RPCUserDeleteUserResponse_NONE          RPCUserDeleteUserResponse_ErrorType = 0
	RPCUserDeleteUserResponse_BAD_REQUEST   RPCUserDeleteUserResponse_ErrorType = 1
	RPCUserDeleteUserResponse_UNKNOWN_ERROR RPCUserDeleteUserResponse_ErrorType = 2
)

var RPCUserDeleteUserResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "BAD_REQUEST",
	2: "UNKNOWN_ERROR",
}
var RPCUserDeleteUserResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"BAD_REQUEST":   1,
	"UNKNOWN_ERROR": 2,
}

func (x RPCUserDeleteUserResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserDeleteUserResponse_ErrorType_name, int32(x))
}

type RPCUserRemoveUserFromHubsResponse_ErrorType int32

const (
	RPCUserRemoveUserFromHubsResponse_NONE          RPCUserRemoveUserFromHubsResponse_ErrorType = 0
	RPCUserRemoveUserFromHubsResponse_BAD_REQUEST   RPCUserRemoveUserFromHubsResponse_ErrorType = 1
	RPCUserRemoveUserFromHubsResponse_UNKNOWN_ERROR RPCUserRemoveUserFromHubsResponse_ErrorType = 2
)

var RPCUserRemoveUserFromHubsResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "BAD_REQUEST",
	2: "UNKNOWN_ERROR",
}
var RPCUserRemoveUserFromHubsResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"BAD_REQUEST":   1,
	"UNKNOWN_ERROR": 2,
}

func (x RPCUserRemoveUserFromHubsResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserRemoveUserFromHubsResponse_ErrorType_name, int32(x))
}

type RPCUserAddMutualContactsResponse_ErrorType int32

const (
	RPCUserAddMutualContactsResponse_NONE          RPCUserAddMutualContactsResponse_ErrorType = 0
	RPCUserAddMutualContactsResponse_BAD_REQUEST   RPCUserAddMutualContactsResponse_ErrorType = 1
	RPCUserAddMutualContactsResponse_UNKNOWN_ERROR RPCUserAddMutualContactsResponse_ErrorType = 2
)

var RPCUserAddMutualContactsResponse_ErrorType_name = map[int32]string{
	0: "NONE",
	1: "BAD_REQUEST",
	2: "UNKNOWN_ERROR",
}
var RPCUserAddMutualContactsResponse_ErrorType_value = map[string]int32{
	"NONE":          0,
	"BAD_REQUEST":   1,
	"UNKNOWN_ERROR": 2,
}

func (x RPCUserAddMutualContactsResponse_ErrorType) String() string {
	return proto.EnumName(RPCUserAddMutualContactsResponse_ErrorType_name, int32(x))
}

type RPCGenericResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RPCGenericResponse) Reset()         { *m = RPCGenericResponse{} }
func (m *RPCGenericResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGenericResponse) ProtoMessage()    {}

type RPCCreateRelationRequest struct {
	UserId string                          `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Type   ProprietaryUserGroupRecord_Type `protobuf:"varint,2,opt,name=type,enum=proto.ProprietaryUserGroupRecord_Type" json:"type,omitempty"`
}

func (m *RPCCreateRelationRequest) Reset()         { *m = RPCCreateRelationRequest{} }
func (m *RPCCreateRelationRequest) String() string { return proto.CompactTextString(m) }
func (*RPCCreateRelationRequest) ProtoMessage()    {}

type RPCCreateRelationResponse struct {
}

func (m *RPCCreateRelationResponse) Reset()         { *m = RPCCreateRelationResponse{} }
func (m *RPCCreateRelationResponse) String() string { return proto.CompactTextString(m) }
func (*RPCCreateRelationResponse) ProtoMessage()    {}

type RPCAuthLoginRequest struct {
	Username      string                  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password      string                  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	AgentId       string                  `protobuf:"bytes,3,opt,name=agent_id" json:"agent_id,omitempty"`
	AgentName     string                  `protobuf:"bytes,4,opt,name=agent_name" json:"agent_name,omitempty"`
	AgentType     UserAgent_UserAgentType `protobuf:"varint,5,opt,name=agent_type,enum=proto.UserAgent_UserAgentType" json:"agent_type,omitempty"`
	ClientIp      string                  `protobuf:"bytes,6,opt,name=client_ip" json:"client_ip,omitempty"`
	CurrentUserId string                  `protobuf:"bytes,7,opt,name=current_user_id" json:"current_user_id,omitempty"`
}

func (m *RPCAuthLoginRequest) Reset()         { *m = RPCAuthLoginRequest{} }
func (m *RPCAuthLoginRequest) String() string { return proto.CompactTextString(m) }
func (*RPCAuthLoginRequest) ProtoMessage()    {}

type RPCAuthLoginOAuthRequest struct {
	CurrentUserId     string                              `protobuf:"bytes,1,opt,name=current_user_id" json:"current_user_id,omitempty"`
	OauthToken        string                              `protobuf:"bytes,2,opt,name=oauth_token" json:"oauth_token,omitempty"`
	OauthProvider     AuthLoginOAuthRequest_OAuthProvider `protobuf:"varint,3,opt,name=oauth_provider,enum=proto.AuthLoginOAuthRequest_OAuthProvider" json:"oauth_provider,omitempty"`
	RequestedUsername string                              `protobuf:"bytes,4,opt,name=requested_username" json:"requested_username,omitempty"`
	EmailAddress      string                              `protobuf:"bytes,5,opt,name=email_address" json:"email_address,omitempty"`
	AgentId           string                              `protobuf:"bytes,6,opt,name=agent_id" json:"agent_id,omitempty"`
	AgentName         string                              `protobuf:"bytes,7,opt,name=agent_name" json:"agent_name,omitempty"`
	AgentType         UserAgent_UserAgentType             `protobuf:"varint,8,opt,name=agent_type,enum=proto.UserAgent_UserAgentType" json:"agent_type,omitempty"`
	ClientIp          string                              `protobuf:"bytes,9,opt,name=client_ip" json:"client_ip,omitempty"`
	OauthCode         string                              `protobuf:"bytes,10,opt,name=oauth_code" json:"oauth_code,omitempty"`
	OauthRedirectUri  string                              `protobuf:"bytes,11,opt,name=oauth_redirect_uri" json:"oauth_redirect_uri,omitempty"`
}

func (m *RPCAuthLoginOAuthRequest) Reset()         { *m = RPCAuthLoginOAuthRequest{} }
func (m *RPCAuthLoginOAuthRequest) String() string { return proto.CompactTextString(m) }
func (*RPCAuthLoginOAuthRequest) ProtoMessage()    {}

type RPCAuthLoginEmailRequest struct {
	CurrentUserId     string                  `protobuf:"bytes,1,opt,name=current_user_id" json:"current_user_id,omitempty"`
	Email             string                  `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	SourceUrl         string                  `protobuf:"bytes,3,opt,name=source_url" json:"source_url,omitempty"`
	Code              string                  `protobuf:"bytes,4,opt,name=code" json:"code,omitempty"`
	RequestedUsername string                  `protobuf:"bytes,5,opt,name=requested_username" json:"requested_username,omitempty"`
	AgentId           string                  `protobuf:"bytes,6,opt,name=agent_id" json:"agent_id,omitempty"`
	AgentName         string                  `protobuf:"bytes,7,opt,name=agent_name" json:"agent_name,omitempty"`
	AgentType         UserAgent_UserAgentType `protobuf:"varint,8,opt,name=agent_type,enum=proto.UserAgent_UserAgentType" json:"agent_type,omitempty"`
	ClientIp          string                  `protobuf:"bytes,9,opt,name=client_ip" json:"client_ip,omitempty"`
	ResetPassword     bool                    `protobuf:"varint,10,opt,name=reset_password" json:"reset_password,omitempty"`
	NewPassword       string                  `protobuf:"bytes,11,opt,name=new_password" json:"new_password,omitempty"`
}

func (m *RPCAuthLoginEmailRequest) Reset()         { *m = RPCAuthLoginEmailRequest{} }
func (m *RPCAuthLoginEmailRequest) String() string { return proto.CompactTextString(m) }
func (*RPCAuthLoginEmailRequest) ProtoMessage()    {}

type RPCAuthLoginResponse struct {
	Success bool                        `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Token   string                      `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	User    *User                       `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Error   AuthLoginResponse_ErrorType `protobuf:"varint,4,opt,name=error,enum=proto.AuthLoginResponse_ErrorType" json:"error,omitempty"`
	NewUser bool                        `protobuf:"varint,5,opt,name=new_user" json:"new_user,omitempty"`
}

func (m *RPCAuthLoginResponse) Reset()         { *m = RPCAuthLoginResponse{} }
func (m *RPCAuthLoginResponse) String() string { return proto.CompactTextString(m) }
func (*RPCAuthLoginResponse) ProtoMessage()    {}

func (m *RPCAuthLoginResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCAuthRegisterRequest struct {
	Username               string                  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password               string                  `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Email                  string                  `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	InviteCode             string                  `protobuf:"bytes,4,opt,name=invite_code" json:"invite_code,omitempty"`
	Newsletter             bool                    `protobuf:"varint,5,opt,name=newsletter" json:"newsletter,omitempty"`
	TermsOfService         bool                    `protobuf:"varint,6,opt,name=terms_of_service" json:"terms_of_service,omitempty"`
	GosuInviteCode         string                  `protobuf:"bytes,7,opt,name=gosu_invite_code" json:"gosu_invite_code,omitempty"`
	AgentId                string                  `protobuf:"bytes,8,opt,name=agent_id" json:"agent_id,omitempty"`
	AgentName              string                  `protobuf:"bytes,9,opt,name=agent_name" json:"agent_name,omitempty"`
	AgentType              UserAgent_UserAgentType `protobuf:"varint,10,opt,name=agent_type,enum=proto.UserAgent_UserAgentType" json:"agent_type,omitempty"`
	ClientIp               string                  `protobuf:"bytes,11,opt,name=client_ip" json:"client_ip,omitempty"`
	Languages              string                  `protobuf:"bytes,12,opt,name=languages" json:"languages,omitempty"`
	Ephemeral              bool                    `protobuf:"varint,13,opt,name=ephemeral" json:"ephemeral,omitempty"`
	JoinCommunities        []string                `protobuf:"bytes,14,rep,name=join_communities" json:"join_communities,omitempty"`
	AutoGenerateNameSuffix bool                    `protobuf:"varint,15,opt,name=auto_generate_name_suffix" json:"auto_generate_name_suffix,omitempty"`
	AvatarImage            string                  `protobuf:"bytes,16,opt,name=avatar_image" json:"avatar_image,omitempty"`
}

func (m *RPCAuthRegisterRequest) Reset()         { *m = RPCAuthRegisterRequest{} }
func (m *RPCAuthRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RPCAuthRegisterRequest) ProtoMessage()    {}

type RPCUserConvertEphemeralUserRequest struct {
	UserId         string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	AgentId        string `protobuf:"bytes,2,opt,name=agent_id" json:"agent_id,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	EmailAddress   string `protobuf:"bytes,4,opt,name=email_address" json:"email_address,omitempty"`
	Password       string `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	Newsletter     bool   `protobuf:"varint,6,opt,name=newsletter" json:"newsletter,omitempty"`
	TermsOfService bool   `protobuf:"varint,7,opt,name=terms_of_service" json:"terms_of_service,omitempty"`
	AvatarImage    string `protobuf:"bytes,8,opt,name=avatar_image" json:"avatar_image,omitempty"`
}

func (m *RPCUserConvertEphemeralUserRequest) Reset()         { *m = RPCUserConvertEphemeralUserRequest{} }
func (m *RPCUserConvertEphemeralUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserConvertEphemeralUserRequest) ProtoMessage()    {}

type RPCUserConvertEphemeralUserResponse struct {
	Error UserConvertEphemeralUserResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserConvertEphemeralUserResponse_ErrorType" json:"error,omitempty"`
	Token string                                     `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	User  *User                                      `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
}

func (m *RPCUserConvertEphemeralUserResponse) Reset()         { *m = RPCUserConvertEphemeralUserResponse{} }
func (m *RPCUserConvertEphemeralUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserConvertEphemeralUserResponse) ProtoMessage()    {}

func (m *RPCUserConvertEphemeralUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCProfileGetRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCProfileGetRequest) Reset()         { *m = RPCProfileGetRequest{} }
func (m *RPCProfileGetRequest) String() string { return proto.CompactTextString(m) }
func (*RPCProfileGetRequest) ProtoMessage()    {}

type RPCUserUpdateRequest struct {
	UserId          string               `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Email           *OptionalString      `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	DisplayName     *OptionalString      `protobuf:"bytes,3,opt,name=display_name" json:"display_name,omitempty"`
	AvatarImage     *OptionalString      `protobuf:"bytes,4,opt,name=avatar_image" json:"avatar_image,omitempty"`
	Status          User_UserStatus      `protobuf:"varint,5,opt,name=status,enum=proto.User_UserStatus" json:"status,omitempty"`
	Newsletter      *OptionalBool        `protobuf:"bytes,6,opt,name=newsletter" json:"newsletter,omitempty"`
	Games           *OptionalGames       `protobuf:"bytes,7,opt,name=games" json:"games,omitempty"`
	BackgroundImage *OptionalString      `protobuf:"bytes,8,opt,name=background_image" json:"background_image,omitempty"`
	TitleImage      *OptionalString      `protobuf:"bytes,9,opt,name=title_image" json:"title_image,omitempty"`
	TermsOfService  *OptionalBool        `protobuf:"bytes,10,opt,name=terms_of_service" json:"terms_of_service,omitempty"`
	Biography       *BiographyUpdateData `protobuf:"bytes,16,opt,name=biography" json:"biography,omitempty"`
}

func (m *RPCUserUpdateRequest) Reset()         { *m = RPCUserUpdateRequest{} }
func (m *RPCUserUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdateRequest) ProtoMessage()    {}

func (m *RPCUserUpdateRequest) GetEmail() *OptionalString {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetDisplayName() *OptionalString {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetAvatarImage() *OptionalString {
	if m != nil {
		return m.AvatarImage
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetNewsletter() *OptionalBool {
	if m != nil {
		return m.Newsletter
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetGames() *OptionalGames {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetBackgroundImage() *OptionalString {
	if m != nil {
		return m.BackgroundImage
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetTitleImage() *OptionalString {
	if m != nil {
		return m.TitleImage
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetTermsOfService() *OptionalBool {
	if m != nil {
		return m.TermsOfService
	}
	return nil
}

func (m *RPCUserUpdateRequest) GetBiography() *BiographyUpdateData {
	if m != nil {
		return m.Biography
	}
	return nil
}

type RPCUserUpdateResponse struct {
	Error AuthRegisterResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.AuthRegisterResponse_ErrorType" json:"error,omitempty"`
	User  *User                          `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RPCUserUpdateResponse) Reset()         { *m = RPCUserUpdateResponse{} }
func (m *RPCUserUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdateResponse) ProtoMessage()    {}

func (m *RPCUserUpdateResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCUserGetFriendsRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserGetFriendsRequest) Reset()         { *m = RPCUserGetFriendsRequest{} }
func (m *RPCUserGetFriendsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetFriendsRequest) ProtoMessage()    {}

type RPCUserGetFriendsResponse struct {
	Friends                []*ChatUser      `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
	SentFriendRequests     []*FriendRequest `protobuf:"bytes,2,rep,name=sentFriendRequests" json:"sentFriendRequests,omitempty"`
	ReceivedFriendRequests []*FriendRequest `protobuf:"bytes,3,rep,name=receivedFriendRequests" json:"receivedFriendRequests,omitempty"`
}

func (m *RPCUserGetFriendsResponse) Reset()         { *m = RPCUserGetFriendsResponse{} }
func (m *RPCUserGetFriendsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetFriendsResponse) ProtoMessage()    {}

func (m *RPCUserGetFriendsResponse) GetFriends() []*ChatUser {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *RPCUserGetFriendsResponse) GetSentFriendRequests() []*FriendRequest {
	if m != nil {
		return m.SentFriendRequests
	}
	return nil
}

func (m *RPCUserGetFriendsResponse) GetReceivedFriendRequests() []*FriendRequest {
	if m != nil {
		return m.ReceivedFriendRequests
	}
	return nil
}

type RPCUserFriendshipRequest struct {
	SourceUser string `protobuf:"bytes,1,opt,name=source_user" json:"source_user,omitempty"`
	TargetUser string `protobuf:"bytes,2,opt,name=target_user" json:"target_user,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RPCUserFriendshipRequest) Reset()         { *m = RPCUserFriendshipRequest{} }
func (m *RPCUserFriendshipRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserFriendshipRequest) ProtoMessage()    {}

type RPCUserFriendshipRequestResponse struct {
	Success bool                                              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Status  ProfileRequestFriendshipResponse_FriendshipStatus `protobuf:"varint,2,opt,name=status,enum=proto.ProfileRequestFriendshipResponse_FriendshipStatus" json:"status,omitempty"`
}

func (m *RPCUserFriendshipRequestResponse) Reset()         { *m = RPCUserFriendshipRequestResponse{} }
func (m *RPCUserFriendshipRequestResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserFriendshipRequestResponse) ProtoMessage()    {}

type RPCUserGetUserRequest struct {
	UserId             string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Username           string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Email              string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	IgnoreChildren     bool   `protobuf:"varint,4,opt,name=ignore_children" json:"ignore_children,omitempty"`
	NormalizedUsername string `protobuf:"bytes,5,opt,name=normalized_username" json:"normalized_username,omitempty"`
}

func (m *RPCUserGetUserRequest) Reset()         { *m = RPCUserGetUserRequest{} }
func (m *RPCUserGetUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetUserRequest) ProtoMessage()    {}

type RPCUserValidateUsernameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *RPCUserValidateUsernameRequest) Reset()         { *m = RPCUserValidateUsernameRequest{} }
func (m *RPCUserValidateUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserValidateUsernameRequest) ProtoMessage()    {}

type RPCUserValidateUsernameResponse struct {
	Error AuthRegisterResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.AuthRegisterResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserValidateUsernameResponse) Reset()         { *m = RPCUserValidateUsernameResponse{} }
func (m *RPCUserValidateUsernameResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserValidateUsernameResponse) ProtoMessage()    {}

type RPCUserValidateEmailAddressRequest struct {
	EmailAddress string `protobuf:"bytes,1,opt,name=email_address" json:"email_address,omitempty"`
}

func (m *RPCUserValidateEmailAddressRequest) Reset()         { *m = RPCUserValidateEmailAddressRequest{} }
func (m *RPCUserValidateEmailAddressRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserValidateEmailAddressRequest) ProtoMessage()    {}

type RPCUserValidateEmailAddressResponse struct {
	Error UserValidateEmailAddressResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserValidateEmailAddressResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserValidateEmailAddressResponse) Reset()         { *m = RPCUserValidateEmailAddressResponse{} }
func (m *RPCUserValidateEmailAddressResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserValidateEmailAddressResponse) ProtoMessage()    {}

type RPCUserGetUserResponse struct {
	UserExists bool  `protobuf:"varint,1,opt,name=user_exists" json:"user_exists,omitempty"`
	User       *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *RPCUserGetUserResponse) Reset()         { *m = RPCUserGetUserResponse{} }
func (m *RPCUserGetUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetUserResponse) ProtoMessage()    {}

func (m *RPCUserGetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCUserGetUserAgentRequest struct {
	AgentId      string `protobuf:"bytes,1,opt,name=agent_id" json:"agent_id,omitempty"`
	PopulateUser bool   `protobuf:"varint,2,opt,name=populate_user" json:"populate_user,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserGetUserAgentRequest) Reset()         { *m = RPCUserGetUserAgentRequest{} }
func (m *RPCUserGetUserAgentRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetUserAgentRequest) ProtoMessage()    {}

type RPCUserGetUserAgentResponse struct {
	AgentExists bool       `protobuf:"varint,1,opt,name=agent_exists" json:"agent_exists,omitempty"`
	Agent       *UserAgent `protobuf:"bytes,2,opt,name=agent" json:"agent,omitempty"`
}

func (m *RPCUserGetUserAgentResponse) Reset()         { *m = RPCUserGetUserAgentResponse{} }
func (m *RPCUserGetUserAgentResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetUserAgentResponse) ProtoMessage()    {}

func (m *RPCUserGetUserAgentResponse) GetAgent() *UserAgent {
	if m != nil {
		return m.Agent
	}
	return nil
}

type RPCUserGetOwnProfileRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	// string username = 2; // deprecated
	// string email = 3; // deprecated
	IncludeHubs bool `protobuf:"varint,4,opt,name=include_hubs" json:"include_hubs,omitempty"`
}

func (m *RPCUserGetOwnProfileRequest) Reset()         { *m = RPCUserGetOwnProfileRequest{} }
func (m *RPCUserGetOwnProfileRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetOwnProfileRequest) ProtoMessage()    {}

type RPCUserGetOwnProfileResponse struct {
	UserInfo *UserInfo                              `protobuf:"bytes,1,opt,name=user_info" json:"user_info,omitempty"`
	Error    RPCUserGetOwnProfileResponse_ErrorType `protobuf:"varint,2,opt,name=error,enum=proto.RPCUserGetOwnProfileResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserGetOwnProfileResponse) Reset()         { *m = RPCUserGetOwnProfileResponse{} }
func (m *RPCUserGetOwnProfileResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetOwnProfileResponse) ProtoMessage()    {}

func (m *RPCUserGetOwnProfileResponse) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type RPCUserGetOtherProfileRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserGetOtherProfileRequest) Reset()         { *m = RPCUserGetOtherProfileRequest{} }
func (m *RPCUserGetOtherProfileRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetOtherProfileRequest) ProtoMessage()    {}

type RPCUserGetOtherProfileResponse struct {
	UserInfo *ChatUserInfo `protobuf:"bytes,1,opt,name=user_info" json:"user_info,omitempty"`
}

func (m *RPCUserGetOtherProfileResponse) Reset()         { *m = RPCUserGetOtherProfileResponse{} }
func (m *RPCUserGetOtherProfileResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetOtherProfileResponse) ProtoMessage()    {}

func (m *RPCUserGetOtherProfileResponse) GetUserInfo() *ChatUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type RPCUserActivationEmailRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserActivationEmailRequest) Reset()         { *m = RPCUserActivationEmailRequest{} }
func (m *RPCUserActivationEmailRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserActivationEmailRequest) ProtoMessage()    {}

type RPCUserActivationEmailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RPCUserActivationEmailResponse) Reset()         { *m = RPCUserActivationEmailResponse{} }
func (m *RPCUserActivationEmailResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserActivationEmailResponse) ProtoMessage()    {}

type RPCUserExecuteActivationRequest struct {
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *RPCUserExecuteActivationRequest) Reset()         { *m = RPCUserExecuteActivationRequest{} }
func (m *RPCUserExecuteActivationRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserExecuteActivationRequest) ProtoMessage()    {}

type RPCUserExecuteActivationResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RPCUserExecuteActivationResponse) Reset()         { *m = RPCUserExecuteActivationResponse{} }
func (m *RPCUserExecuteActivationResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserExecuteActivationResponse) ProtoMessage()    {}

type RPCUserPasswordResetEmailRequest struct {
	Email     string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	SourceUrl string `protobuf:"bytes,2,opt,name=source_url" json:"source_url,omitempty"`
}

func (m *RPCUserPasswordResetEmailRequest) Reset()         { *m = RPCUserPasswordResetEmailRequest{} }
func (m *RPCUserPasswordResetEmailRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserPasswordResetEmailRequest) ProtoMessage()    {}

type RPCUserPasswordResetEmailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RPCUserPasswordResetEmailResponse) Reset()         { *m = RPCUserPasswordResetEmailResponse{} }
func (m *RPCUserPasswordResetEmailResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserPasswordResetEmailResponse) ProtoMessage()    {}

type RPCUserGetPasswordResetInfoRequest struct {
	Secret string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
}

func (m *RPCUserGetPasswordResetInfoRequest) Reset()         { *m = RPCUserGetPasswordResetInfoRequest{} }
func (m *RPCUserGetPasswordResetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetPasswordResetInfoRequest) ProtoMessage()    {}

type RPCUserGetPasswordResetInfoResponse struct {
	Error     AuthGetPasswordResetInfoResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.AuthGetPasswordResetInfoResponse_ErrorType" json:"error,omitempty"`
	User      *ChatUser                                  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	SourceUrl string                                     `protobuf:"bytes,3,opt,name=source_url" json:"source_url,omitempty"`
}

func (m *RPCUserGetPasswordResetInfoResponse) Reset()         { *m = RPCUserGetPasswordResetInfoResponse{} }
func (m *RPCUserGetPasswordResetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetPasswordResetInfoResponse) ProtoMessage()    {}

func (m *RPCUserGetPasswordResetInfoResponse) GetUser() *ChatUser {
	if m != nil {
		return m.User
	}
	return nil
}

type RPCUserExecutePasswordResetRequest struct {
	Secret      string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=new_password" json:"new_password,omitempty"`
}

func (m *RPCUserExecutePasswordResetRequest) Reset()         { *m = RPCUserExecutePasswordResetRequest{} }
func (m *RPCUserExecutePasswordResetRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserExecutePasswordResetRequest) ProtoMessage()    {}

type RPCUserExecutePasswordResetResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *RPCUserExecutePasswordResetResponse) Reset()         { *m = RPCUserExecutePasswordResetResponse{} }
func (m *RPCUserExecutePasswordResetResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserExecutePasswordResetResponse) ProtoMessage()    {}

type RPCUserUpdatePasswordRequest struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	OldPassword string `protobuf:"bytes,2,opt,name=old_password" json:"old_password,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=new_password" json:"new_password,omitempty"`
}

func (m *RPCUserUpdatePasswordRequest) Reset()         { *m = RPCUserUpdatePasswordRequest{} }
func (m *RPCUserUpdatePasswordRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdatePasswordRequest) ProtoMessage()    {}

type RPCUserUpdatePasswordResponse struct {
	Error ProfileUpdatePasswordResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.ProfileUpdatePasswordResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserUpdatePasswordResponse) Reset()         { *m = RPCUserUpdatePasswordResponse{} }
func (m *RPCUserUpdatePasswordResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdatePasswordResponse) ProtoMessage()    {}

type RPCUserSetChannelRoleRequest struct {
	UserId         string                                 `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId      string                                 `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	MembershipType ChannelMembershipRecord_MembershipType `protobuf:"varint,3,opt,name=membership_type,enum=proto.ChannelMembershipRecord_MembershipType" json:"membership_type,omitempty"`
}

func (m *RPCUserSetChannelRoleRequest) Reset()         { *m = RPCUserSetChannelRoleRequest{} }
func (m *RPCUserSetChannelRoleRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserSetChannelRoleRequest) ProtoMessage()    {}

type RPCUserSetChannelRoleResponse struct {
	Error UserSetChannelRoleResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserSetChannelRoleResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserSetChannelRoleResponse) Reset()         { *m = RPCUserSetChannelRoleResponse{} }
func (m *RPCUserSetChannelRoleResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserSetChannelRoleResponse) ProtoMessage()    {}

type RPCUserSetGroupRoleRequest struct {
	UserId         string                               `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	GroupId        string                               `protobuf:"bytes,2,opt,name=group_id" json:"group_id,omitempty"`
	MembershipType GroupMembershipRecord_MembershipType `protobuf:"varint,3,opt,name=membership_type,enum=proto.GroupMembershipRecord_MembershipType" json:"membership_type,omitempty"`
}

func (m *RPCUserSetGroupRoleRequest) Reset()         { *m = RPCUserSetGroupRoleRequest{} }
func (m *RPCUserSetGroupRoleRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserSetGroupRoleRequest) ProtoMessage()    {}

type RPCUserSetGroupRoleResponse struct {
	Error UserSetGroupRoleResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserSetGroupRoleResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserSetGroupRoleResponse) Reset()         { *m = RPCUserSetGroupRoleResponse{} }
func (m *RPCUserSetGroupRoleResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserSetGroupRoleResponse) ProtoMessage()    {}

type RPCUserUpdateVoiceStatusRequest struct {
	UserId      string                              `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	ChannelId   string                              `protobuf:"bytes,2,opt,name=channel_id" json:"channel_id,omitempty"`
	VoiceStatus ChannelMembershipRecord_VoiceStatus `protobuf:"varint,3,opt,name=voice_status,enum=proto.ChannelMembershipRecord_VoiceStatus" json:"voice_status,omitempty"`
}

func (m *RPCUserUpdateVoiceStatusRequest) Reset()         { *m = RPCUserUpdateVoiceStatusRequest{} }
func (m *RPCUserUpdateVoiceStatusRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdateVoiceStatusRequest) ProtoMessage()    {}

type RPCUserUpdateVoiceStatusResponse struct {
}

func (m *RPCUserUpdateVoiceStatusResponse) Reset()         { *m = RPCUserUpdateVoiceStatusResponse{} }
func (m *RPCUserUpdateVoiceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserUpdateVoiceStatusResponse) ProtoMessage()    {}

type RPCUserDeleteUserRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserDeleteUserRequest) Reset()         { *m = RPCUserDeleteUserRequest{} }
func (m *RPCUserDeleteUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserDeleteUserRequest) ProtoMessage()    {}

type RPCUserDeleteUserResponse struct {
	Error RPCUserDeleteUserResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCUserDeleteUserResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserDeleteUserResponse) Reset()         { *m = RPCUserDeleteUserResponse{} }
func (m *RPCUserDeleteUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserDeleteUserResponse) ProtoMessage()    {}

type RPCUserRemoveUserFromHubsRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserRemoveUserFromHubsRequest) Reset()         { *m = RPCUserRemoveUserFromHubsRequest{} }
func (m *RPCUserRemoveUserFromHubsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserRemoveUserFromHubsRequest) ProtoMessage()    {}

type RPCUserRemoveUserFromHubsResponse struct {
	Error RPCUserRemoveUserFromHubsResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCUserRemoveUserFromHubsResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserRemoveUserFromHubsResponse) Reset()         { *m = RPCUserRemoveUserFromHubsResponse{} }
func (m *RPCUserRemoveUserFromHubsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserRemoveUserFromHubsResponse) ProtoMessage()    {}

type RPCUserTransferOwnershipRequest struct {
	UserId              string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	TargetUserAuthToken string `protobuf:"bytes,2,opt,name=target_user_auth_token" json:"target_user_auth_token,omitempty"`
}

func (m *RPCUserTransferOwnershipRequest) Reset()         { *m = RPCUserTransferOwnershipRequest{} }
func (m *RPCUserTransferOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserTransferOwnershipRequest) ProtoMessage()    {}

type RPCUserTransferOwnershipResponse struct {
	Error UserTransferOwnershipResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserTransferOwnershipResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserTransferOwnershipResponse) Reset()         { *m = RPCUserTransferOwnershipResponse{} }
func (m *RPCUserTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserTransferOwnershipResponse) ProtoMessage()    {}

type RPCUserCheckBanStatusRequest struct {
	ClientIp string `protobuf:"bytes,1,opt,name=client_ip" json:"client_ip,omitempty"`
}

func (m *RPCUserCheckBanStatusRequest) Reset()         { *m = RPCUserCheckBanStatusRequest{} }
func (m *RPCUserCheckBanStatusRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserCheckBanStatusRequest) ProtoMessage()    {}

type RPCUserCheckBanStatusResponse struct {
	Error    UserCheckBanStatusResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserCheckBanStatusResponse_ErrorType" json:"error,omitempty"`
	IsBanned bool                                 `protobuf:"varint,2,opt,name=is_banned" json:"is_banned,omitempty"`
}

func (m *RPCUserCheckBanStatusResponse) Reset()         { *m = RPCUserCheckBanStatusResponse{} }
func (m *RPCUserCheckBanStatusResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserCheckBanStatusResponse) ProtoMessage()    {}

type RPCUserAddMutualContactsRequest struct {
	Contacts []*AddMutualContactsRequestEntry `protobuf:"bytes,1,rep,name=contacts" json:"contacts,omitempty"`
}

func (m *RPCUserAddMutualContactsRequest) Reset()         { *m = RPCUserAddMutualContactsRequest{} }
func (m *RPCUserAddMutualContactsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserAddMutualContactsRequest) ProtoMessage()    {}

func (m *RPCUserAddMutualContactsRequest) GetContacts() []*AddMutualContactsRequestEntry {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type AddMutualContactsRequestEntry struct {
	FirstUserId  string `protobuf:"bytes,1,opt,name=first_user_id" json:"first_user_id,omitempty"`
	SecondUserId string `protobuf:"bytes,2,opt,name=second_user_id" json:"second_user_id,omitempty"`
	Mutual       bool   `protobuf:"varint,3,opt,name=mutual" json:"mutual,omitempty"`
}

func (m *AddMutualContactsRequestEntry) Reset()         { *m = AddMutualContactsRequestEntry{} }
func (m *AddMutualContactsRequestEntry) String() string { return proto.CompactTextString(m) }
func (*AddMutualContactsRequestEntry) ProtoMessage()    {}

type RPCUserAddMutualContactsResponse struct {
	Error RPCUserAddMutualContactsResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCUserAddMutualContactsResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserAddMutualContactsResponse) Reset()         { *m = RPCUserAddMutualContactsResponse{} }
func (m *RPCUserAddMutualContactsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserAddMutualContactsResponse) ProtoMessage()    {}

type RPCGroupRemoveUserRequest struct {
	UserId  string                          `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	GroupId string                          `protobuf:"bytes,2,opt,name=group_id" json:"group_id,omitempty"`
	Type    ProprietaryUserGroupRecord_Type `protobuf:"varint,3,opt,name=type,enum=proto.ProprietaryUserGroupRecord_Type" json:"type,omitempty"`
}

func (m *RPCGroupRemoveUserRequest) Reset()         { *m = RPCGroupRemoveUserRequest{} }
func (m *RPCGroupRemoveUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupRemoveUserRequest) ProtoMessage()    {}

type RPCGroupRemoveUserResponse struct {
}

func (m *RPCGroupRemoveUserResponse) Reset()         { *m = RPCGroupRemoveUserResponse{} }
func (m *RPCGroupRemoveUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupRemoveUserResponse) ProtoMessage()    {}

type RPCAssociatedGroupUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *RPCAssociatedGroupUsersResponse) Reset()         { *m = RPCAssociatedGroupUsersResponse{} }
func (m *RPCAssociatedGroupUsersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCAssociatedGroupUsersResponse) ProtoMessage()    {}

func (m *RPCAssociatedGroupUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type RPCGroupCreateGroupRequest struct {
	Owner               string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description         string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	TitleImage          string `protobuf:"bytes,4,opt,name=title_image" json:"title_image,omitempty"`
	BackgroundImage     string `protobuf:"bytes,5,opt,name=background_image" json:"background_image,omitempty"`
	SkipChannelCreation bool   `protobuf:"varint,6,opt,name=skip_channel_creation" json:"skip_channel_creation,omitempty"`
}

func (m *RPCGroupCreateGroupRequest) Reset()         { *m = RPCGroupCreateGroupRequest{} }
func (m *RPCGroupCreateGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCreateGroupRequest) ProtoMessage()    {}

type RPCGroupCreateGroupResponse struct {
	Error CreateGroupErrorType `protobuf:"varint,1,opt,name=error,enum=proto.CreateGroupErrorType" json:"error,omitempty"`
	Group *Group               `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
}

func (m *RPCGroupCreateGroupResponse) Reset()         { *m = RPCGroupCreateGroupResponse{} }
func (m *RPCGroupCreateGroupResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCreateGroupResponse) ProtoMessage()    {}

func (m *RPCGroupCreateGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type RPCGroupEditGroupRequest struct {
	Id              string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Owner           *OptionalString `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Name            *OptionalString `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description     *OptionalString `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	TitleImage      *OptionalString `protobuf:"bytes,5,opt,name=title_image" json:"title_image,omitempty"`
	BackgroundImage *OptionalString `protobuf:"bytes,6,opt,name=background_image" json:"background_image,omitempty"`
}

func (m *RPCGroupEditGroupRequest) Reset()         { *m = RPCGroupEditGroupRequest{} }
func (m *RPCGroupEditGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupEditGroupRequest) ProtoMessage()    {}

func (m *RPCGroupEditGroupRequest) GetOwner() *OptionalString {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *RPCGroupEditGroupRequest) GetName() *OptionalString {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *RPCGroupEditGroupRequest) GetDescription() *OptionalString {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *RPCGroupEditGroupRequest) GetTitleImage() *OptionalString {
	if m != nil {
		return m.TitleImage
	}
	return nil
}

func (m *RPCGroupEditGroupRequest) GetBackgroundImage() *OptionalString {
	if m != nil {
		return m.BackgroundImage
	}
	return nil
}

type RPCGroupEditGroupResponse struct {
	Error CreateGroupErrorType `protobuf:"varint,1,opt,name=error,enum=proto.CreateGroupErrorType" json:"error,omitempty"`
	Group *Group               `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
}

func (m *RPCGroupEditGroupResponse) Reset()         { *m = RPCGroupEditGroupResponse{} }
func (m *RPCGroupEditGroupResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupEditGroupResponse) ProtoMessage()    {}

func (m *RPCGroupEditGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type RPCGroupGetGroupRequest struct {
	GroupId         string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	FetchLinkedHubs bool   `protobuf:"varint,2,opt,name=fetch_linked_hubs" json:"fetch_linked_hubs,omitempty"`
}

func (m *RPCGroupGetGroupRequest) Reset()         { *m = RPCGroupGetGroupRequest{} }
func (m *RPCGroupGetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupRequest) ProtoMessage()    {}

type RPCGroupGetGroupResponse struct {
	Group      *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	LinkedHubs []*Hub `protobuf:"bytes,2,rep,name=linked_hubs" json:"linked_hubs,omitempty"`
}

func (m *RPCGroupGetGroupResponse) Reset()         { *m = RPCGroupGetGroupResponse{} }
func (m *RPCGroupGetGroupResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupResponse) ProtoMessage()    {}

func (m *RPCGroupGetGroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RPCGroupGetGroupResponse) GetLinkedHubs() []*Hub {
	if m != nil {
		return m.LinkedHubs
	}
	return nil
}

type RPCGroupGetGroupsRequest struct {
}

func (m *RPCGroupGetGroupsRequest) Reset()         { *m = RPCGroupGetGroupsRequest{} }
func (m *RPCGroupGetGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupsRequest) ProtoMessage()    {}

type RPCGroupGetGroupsResponse struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *RPCGroupGetGroupsResponse) Reset()         { *m = RPCGroupGetGroupsResponse{} }
func (m *RPCGroupGetGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupsResponse) ProtoMessage()    {}

func (m *RPCGroupGetGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type RPCGroupGetGroupsForUserRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCGroupGetGroupsForUserRequest) Reset()         { *m = RPCGroupGetGroupsForUserRequest{} }
func (m *RPCGroupGetGroupsForUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupsForUserRequest) ProtoMessage()    {}

type RPCGroupGetGroupsForUserResponse struct {
	GroupMemberships []*GroupMembership `protobuf:"bytes,1,rep,name=groupMemberships" json:"groupMemberships,omitempty"`
}

func (m *RPCGroupGetGroupsForUserResponse) Reset()         { *m = RPCGroupGetGroupsForUserResponse{} }
func (m *RPCGroupGetGroupsForUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupsForUserResponse) ProtoMessage()    {}

func (m *RPCGroupGetGroupsForUserResponse) GetGroupMemberships() []*GroupMembership {
	if m != nil {
		return m.GroupMemberships
	}
	return nil
}

type RPCGroupAddGroupMemberRequest struct {
	GroupId string                               `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId  string                               `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	Type    GroupMembershipRecord_MembershipType `protobuf:"varint,3,opt,name=type,enum=proto.GroupMembershipRecord_MembershipType" json:"type,omitempty"`
}

func (m *RPCGroupAddGroupMemberRequest) Reset()         { *m = RPCGroupAddGroupMemberRequest{} }
func (m *RPCGroupAddGroupMemberRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddGroupMemberRequest) ProtoMessage()    {}

type RPCGroupAddGroupMemberResponse struct {
}

func (m *RPCGroupAddGroupMemberResponse) Reset()         { *m = RPCGroupAddGroupMemberResponse{} }
func (m *RPCGroupAddGroupMemberResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddGroupMemberResponse) ProtoMessage()    {}

type RPCGroupAddGroupMembersRequest struct {
	GroupId   string                  `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	InviterId string                  `protobuf:"bytes,2,opt,name=inviter_id" json:"inviter_id,omitempty"`
	Invitees  []*PotentialGroupMember `protobuf:"bytes,3,rep,name=invitees" json:"invitees,omitempty"`
}

func (m *RPCGroupAddGroupMembersRequest) Reset()         { *m = RPCGroupAddGroupMembersRequest{} }
func (m *RPCGroupAddGroupMembersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddGroupMembersRequest) ProtoMessage()    {}

func (m *RPCGroupAddGroupMembersRequest) GetInvitees() []*PotentialGroupMember {
	if m != nil {
		return m.Invitees
	}
	return nil
}

type RPCGroupAddGroupMembersResponse struct {
}

func (m *RPCGroupAddGroupMembersResponse) Reset()         { *m = RPCGroupAddGroupMembersResponse{} }
func (m *RPCGroupAddGroupMembersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddGroupMembersResponse) ProtoMessage()    {}

type RPCGroupRemoveGroupMemberRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCGroupRemoveGroupMemberRequest) Reset()         { *m = RPCGroupRemoveGroupMemberRequest{} }
func (m *RPCGroupRemoveGroupMemberRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupRemoveGroupMemberRequest) ProtoMessage()    {}

type RPCGroupRemoveGroupMemberResponse struct {
}

func (m *RPCGroupRemoveGroupMemberResponse) Reset()         { *m = RPCGroupRemoveGroupMemberResponse{} }
func (m *RPCGroupRemoveGroupMemberResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupRemoveGroupMemberResponse) ProtoMessage()    {}

type RPCGroupCheckGroupMembershipRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCGroupCheckGroupMembershipRequest) Reset()         { *m = RPCGroupCheckGroupMembershipRequest{} }
func (m *RPCGroupCheckGroupMembershipRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCheckGroupMembershipRequest) ProtoMessage()    {}

type RPCGroupCheckGroupMembershipResponse struct {
	IsMember bool `protobuf:"varint,1,opt,name=is_member" json:"is_member,omitempty"`
}

func (m *RPCGroupCheckGroupMembershipResponse) Reset()         { *m = RPCGroupCheckGroupMembershipResponse{} }
func (m *RPCGroupCheckGroupMembershipResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCheckGroupMembershipResponse) ProtoMessage()    {}

type RPCGroupCreateInviteCodeRequest struct {
	GroupId   string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	InviterId string `protobuf:"bytes,2,opt,name=inviter_id" json:"inviter_id,omitempty"`
}

func (m *RPCGroupCreateInviteCodeRequest) Reset()         { *m = RPCGroupCreateInviteCodeRequest{} }
func (m *RPCGroupCreateInviteCodeRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCreateInviteCodeRequest) ProtoMessage()    {}

type RPCGroupCreateInviteCodeResponse struct {
	InviteCode string `protobuf:"bytes,1,opt,name=invite_code" json:"invite_code,omitempty"`
}

func (m *RPCGroupCreateInviteCodeResponse) Reset()         { *m = RPCGroupCreateInviteCodeResponse{} }
func (m *RPCGroupCreateInviteCodeResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupCreateInviteCodeResponse) ProtoMessage()    {}

type RPCGroupGetInviteCodeInfoRequest struct {
	InviteCode string `protobuf:"bytes,1,opt,name=invite_code" json:"invite_code,omitempty"`
}

func (m *RPCGroupGetInviteCodeInfoRequest) Reset()         { *m = RPCGroupGetInviteCodeInfoRequest{} }
func (m *RPCGroupGetInviteCodeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetInviteCodeInfoRequest) ProtoMessage()    {}

type RPCGroupGetInviteCodeInfoResponse struct {
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
}

func (m *RPCGroupGetInviteCodeInfoResponse) Reset()         { *m = RPCGroupGetInviteCodeInfoResponse{} }
func (m *RPCGroupGetInviteCodeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetInviteCodeInfoResponse) ProtoMessage()    {}

func (m *RPCGroupGetInviteCodeInfoResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type RPCGroupAcceptInviteRequest struct {
	InviteCode string `protobuf:"bytes,1,opt,name=invite_code" json:"invite_code,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCGroupAcceptInviteRequest) Reset()         { *m = RPCGroupAcceptInviteRequest{} }
func (m *RPCGroupAcceptInviteRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAcceptInviteRequest) ProtoMessage()    {}

type RPCGroupAcceptInviteResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Group   *Group `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
}

func (m *RPCGroupAcceptInviteResponse) Reset()         { *m = RPCGroupAcceptInviteResponse{} }
func (m *RPCGroupAcceptInviteResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAcceptInviteResponse) ProtoMessage()    {}

func (m *RPCGroupAcceptInviteResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type RPCGroupGetGroupTokenRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	GroupId string `protobuf:"bytes,2,opt,name=group_id" json:"group_id,omitempty"`
}

func (m *RPCGroupGetGroupTokenRequest) Reset()         { *m = RPCGroupGetGroupTokenRequest{} }
func (m *RPCGroupGetGroupTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupTokenRequest) ProtoMessage()    {}

type RPCGroupGetGroupTokenResponse struct {
	Error GroupGetGroupTokenResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.GroupGetGroupTokenResponse_ErrorType" json:"error,omitempty"`
	Token string                               `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *RPCGroupGetGroupTokenResponse) Reset()         { *m = RPCGroupGetGroupTokenResponse{} }
func (m *RPCGroupGetGroupTokenResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetGroupTokenResponse) ProtoMessage()    {}

// used to add (invite) a member to a group
type RPCGroupAddMemberRequest struct {
	GroupId       string                         `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	InviterId     string                         `protobuf:"bytes,2,opt,name=inviter_id" json:"inviter_id,omitempty"`
	UserId        string                         `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
	Email         string                         `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Type          MembershipEntry_MembershipType `protobuf:"varint,5,opt,name=type,enum=proto.MembershipEntry_MembershipType" json:"type,omitempty"`
	FetchExisting bool                           `protobuf:"varint,6,opt,name=fetch_existing" json:"fetch_existing,omitempty"`
	FetchPending  bool                           `protobuf:"varint,7,opt,name=fetch_pending" json:"fetch_pending,omitempty"`
}

func (m *RPCGroupAddMemberRequest) Reset()         { *m = RPCGroupAddMemberRequest{} }
func (m *RPCGroupAddMemberRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddMemberRequest) ProtoMessage()    {}

type RPCGroupAddMemberResponse struct {
	Error         RPCHubAddMemberResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCHubAddMemberResponse_ErrorType" json:"error,omitempty"`
	ExistingUsers []*MembershipEntry                `protobuf:"bytes,2,rep,name=existing_users" json:"existing_users,omitempty"`
	PendingUsers  []*MembershipEntry                `protobuf:"bytes,3,rep,name=pending_users" json:"pending_users,omitempty"`
}

func (m *RPCGroupAddMemberResponse) Reset()         { *m = RPCGroupAddMemberResponse{} }
func (m *RPCGroupAddMemberResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupAddMemberResponse) ProtoMessage()    {}

func (m *RPCGroupAddMemberResponse) GetExistingUsers() []*MembershipEntry {
	if m != nil {
		return m.ExistingUsers
	}
	return nil
}

func (m *RPCGroupAddMemberResponse) GetPendingUsers() []*MembershipEntry {
	if m != nil {
		return m.PendingUsers
	}
	return nil
}

// used to fetch all members for a group
type RPCGroupGetMembersRequest struct {
	GroupId       string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId        string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	FetchExisting bool   `protobuf:"varint,3,opt,name=fetch_existing" json:"fetch_existing,omitempty"`
	FetchPending  bool   `protobuf:"varint,4,opt,name=fetch_pending" json:"fetch_pending,omitempty"`
}

func (m *RPCGroupGetMembersRequest) Reset()         { *m = RPCGroupGetMembersRequest{} }
func (m *RPCGroupGetMembersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetMembersRequest) ProtoMessage()    {}

type RPCGroupGetMembersResponse struct {
	Error         RPCHubGetMembersResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCHubGetMembersResponse_ErrorType" json:"error,omitempty"`
	ExistingUsers []*MembershipEntry                 `protobuf:"bytes,2,rep,name=existing_users" json:"existing_users,omitempty"`
	PendingUsers  []*MembershipEntry                 `protobuf:"bytes,3,rep,name=pending_users" json:"pending_users,omitempty"`
}

func (m *RPCGroupGetMembersResponse) Reset()         { *m = RPCGroupGetMembersResponse{} }
func (m *RPCGroupGetMembersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupGetMembersResponse) ProtoMessage()    {}

func (m *RPCGroupGetMembersResponse) GetExistingUsers() []*MembershipEntry {
	if m != nil {
		return m.ExistingUsers
	}
	return nil
}

func (m *RPCGroupGetMembersResponse) GetPendingUsers() []*MembershipEntry {
	if m != nil {
		return m.PendingUsers
	}
	return nil
}

// used to resend an invitation email for an invited member that has not joined the group yet
type RPCGroupSendInviteRequest struct {
	GroupId  string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	SenderId string `protobuf:"bytes,2,opt,name=sender_id" json:"sender_id,omitempty"`
	UserId   string `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
}

func (m *RPCGroupSendInviteRequest) Reset()         { *m = RPCGroupSendInviteRequest{} }
func (m *RPCGroupSendInviteRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupSendInviteRequest) ProtoMessage()    {}

type RPCGroupSendInviteResponse struct {
	Error RPCHubSendInviteResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCHubSendInviteResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCGroupSendInviteResponse) Reset()         { *m = RPCGroupSendInviteResponse{} }
func (m *RPCGroupSendInviteResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupSendInviteResponse) ProtoMessage()    {}

// used to edit an existing group membership
// a membership/invite can be revoked/deleted by setting type to NONE
// either user id or email have to be supplied to identify the user to be edited
type RPCGroupEditMemberRequest struct {
	GroupId       string                         `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	EditerId      string                         `protobuf:"bytes,2,opt,name=editer_id" json:"editer_id,omitempty"`
	UserId        string                         `protobuf:"bytes,3,opt,name=user_id" json:"user_id,omitempty"`
	Email         string                         `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Type          MembershipEntry_MembershipType `protobuf:"varint,5,opt,name=type,enum=proto.MembershipEntry_MembershipType" json:"type,omitempty"`
	FetchExisting bool                           `protobuf:"varint,6,opt,name=fetch_existing" json:"fetch_existing,omitempty"`
	FetchPending  bool                           `protobuf:"varint,7,opt,name=fetch_pending" json:"fetch_pending,omitempty"`
}

func (m *RPCGroupEditMemberRequest) Reset()         { *m = RPCGroupEditMemberRequest{} }
func (m *RPCGroupEditMemberRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupEditMemberRequest) ProtoMessage()    {}

type RPCGroupEditMemberResponse struct {
	Error         RPCHubEditMemberResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.RPCHubEditMemberResponse_ErrorType" json:"error,omitempty"`
	ExistingUsers []*MembershipEntry                 `protobuf:"bytes,2,rep,name=existing_users" json:"existing_users,omitempty"`
	PendingUsers  []*MembershipEntry                 `protobuf:"bytes,3,rep,name=pending_users" json:"pending_users,omitempty"`
}

func (m *RPCGroupEditMemberResponse) Reset()         { *m = RPCGroupEditMemberResponse{} }
func (m *RPCGroupEditMemberResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupEditMemberResponse) ProtoMessage()    {}

func (m *RPCGroupEditMemberResponse) GetExistingUsers() []*MembershipEntry {
	if m != nil {
		return m.ExistingUsers
	}
	return nil
}

func (m *RPCGroupEditMemberResponse) GetPendingUsers() []*MembershipEntry {
	if m != nil {
		return m.PendingUsers
	}
	return nil
}

// used to join a group
// code is optional (can be used to redeem an invite via email)
type RPCGroupJoinGroupRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *RPCGroupJoinGroupRequest) Reset()         { *m = RPCGroupJoinGroupRequest{} }
func (m *RPCGroupJoinGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupJoinGroupRequest) ProtoMessage()    {}

type RPCGroupJoinGroupResponse struct {
	Error GroupJoinResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.GroupJoinResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCGroupJoinGroupResponse) Reset()         { *m = RPCGroupJoinGroupResponse{} }
func (m *RPCGroupJoinGroupResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupJoinGroupResponse) ProtoMessage()    {}

// used to leave a group
type RPCGroupLeaveGroupRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id" json:"group_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCGroupLeaveGroupRequest) Reset()         { *m = RPCGroupLeaveGroupRequest{} }
func (m *RPCGroupLeaveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RPCGroupLeaveGroupRequest) ProtoMessage()    {}

type RPCGroupLeaveGroupResponse struct {
	Error GroupLeaveResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.GroupLeaveResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCGroupLeaveGroupResponse) Reset()         { *m = RPCGroupLeaveGroupResponse{} }
func (m *RPCGroupLeaveGroupResponse) String() string { return proto.CompactTextString(m) }
func (*RPCGroupLeaveGroupResponse) ProtoMessage()    {}

type RPCPrefsGetPrefRequest struct {
	UserId  string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Domain  string `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	Keypath string `protobuf:"bytes,3,opt,name=keypath" json:"keypath,omitempty"`
}

func (m *RPCPrefsGetPrefRequest) Reset()         { *m = RPCPrefsGetPrefRequest{} }
func (m *RPCPrefsGetPrefRequest) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsGetPrefRequest) ProtoMessage()    {}

type RPCPrefsGetPrefResponse struct {
	Pref *Pref `protobuf:"bytes,1,opt,name=pref" json:"pref,omitempty"`
}

func (m *RPCPrefsGetPrefResponse) Reset()         { *m = RPCPrefsGetPrefResponse{} }
func (m *RPCPrefsGetPrefResponse) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsGetPrefResponse) ProtoMessage()    {}

func (m *RPCPrefsGetPrefResponse) GetPref() *Pref {
	if m != nil {
		return m.Pref
	}
	return nil
}

type RPCPrefsGetPrefsRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	KeypathPrefix string `protobuf:"bytes,3,opt,name=keypath_prefix" json:"keypath_prefix,omitempty"`
}

func (m *RPCPrefsGetPrefsRequest) Reset()         { *m = RPCPrefsGetPrefsRequest{} }
func (m *RPCPrefsGetPrefsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsGetPrefsRequest) ProtoMessage()    {}

type RPCPrefsGetPrefsResponse struct {
	Prefs []*Pref `protobuf:"bytes,1,rep,name=prefs" json:"prefs,omitempty"`
}

func (m *RPCPrefsGetPrefsResponse) Reset()         { *m = RPCPrefsGetPrefsResponse{} }
func (m *RPCPrefsGetPrefsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsGetPrefsResponse) ProtoMessage()    {}

func (m *RPCPrefsGetPrefsResponse) GetPrefs() []*Pref {
	if m != nil {
		return m.Prefs
	}
	return nil
}

type RPCPrefsSetPrefsRequest struct {
	UserId string  `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Prefs  []*Pref `protobuf:"bytes,2,rep,name=prefs" json:"prefs,omitempty"`
}

func (m *RPCPrefsSetPrefsRequest) Reset()         { *m = RPCPrefsSetPrefsRequest{} }
func (m *RPCPrefsSetPrefsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsSetPrefsRequest) ProtoMessage()    {}

func (m *RPCPrefsSetPrefsRequest) GetPrefs() []*Pref {
	if m != nil {
		return m.Prefs
	}
	return nil
}

type RPCPrefsSetPrefsResponse struct {
}

func (m *RPCPrefsSetPrefsResponse) Reset()         { *m = RPCPrefsSetPrefsResponse{} }
func (m *RPCPrefsSetPrefsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsSetPrefsResponse) ProtoMessage()    {}

type RPCPrefsDeletePrefsRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	KeypathPrefix string `protobuf:"bytes,3,opt,name=keypath_prefix" json:"keypath_prefix,omitempty"`
}

func (m *RPCPrefsDeletePrefsRequest) Reset()         { *m = RPCPrefsDeletePrefsRequest{} }
func (m *RPCPrefsDeletePrefsRequest) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsDeletePrefsRequest) ProtoMessage()    {}

type RPCPrefsDeletePrefsResponse struct {
}

func (m *RPCPrefsDeletePrefsResponse) Reset()         { *m = RPCPrefsDeletePrefsResponse{} }
func (m *RPCPrefsDeletePrefsResponse) String() string { return proto.CompactTextString(m) }
func (*RPCPrefsDeletePrefsResponse) ProtoMessage()    {}

type RPCSearchSearchRequest struct {
	SearchTerm     string `protobuf:"bytes,1,opt,name=search_term" json:"search_term,omitempty"`
	Limit          int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	SearchUsers    bool   `protobuf:"varint,3,opt,name=search_users" json:"search_users,omitempty"`
	SearchChannels bool   `protobuf:"varint,4,opt,name=search_channels" json:"search_channels,omitempty"`
	SearchGroups   bool   `protobuf:"varint,5,opt,name=search_groups" json:"search_groups,omitempty"`
	SearchGames    bool   `protobuf:"varint,6,opt,name=search_games" json:"search_games,omitempty"`
	SearchTags     bool   `protobuf:"varint,7,opt,name=search_tags" json:"search_tags,omitempty"`
}

func (m *RPCSearchSearchRequest) Reset()         { *m = RPCSearchSearchRequest{} }
func (m *RPCSearchSearchRequest) String() string { return proto.CompactTextString(m) }
func (*RPCSearchSearchRequest) ProtoMessage()    {}

type RPCSearchSearchResponse struct {
	Users    []*ChatUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
	Channels []*Channel  `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty"`
	Groups   []*Group    `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	Games    []*Game     `protobuf:"bytes,4,rep,name=games" json:"games,omitempty"`
	Tags     []string    `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *RPCSearchSearchResponse) Reset()         { *m = RPCSearchSearchResponse{} }
func (m *RPCSearchSearchResponse) String() string { return proto.CompactTextString(m) }
func (*RPCSearchSearchResponse) ProtoMessage()    {}

func (m *RPCSearchSearchResponse) GetUsers() []*ChatUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RPCSearchSearchResponse) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *RPCSearchSearchResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *RPCSearchSearchResponse) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type RPCUserEditBlockedUserRequest struct {
	UserId        string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	BlockedUserId string `protobuf:"bytes,2,opt,name=blocked_user_id" json:"blocked_user_id,omitempty"`
	Remove        bool   `protobuf:"varint,3,opt,name=remove" json:"remove,omitempty"`
}

func (m *RPCUserEditBlockedUserRequest) Reset()         { *m = RPCUserEditBlockedUserRequest{} }
func (m *RPCUserEditBlockedUserRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserEditBlockedUserRequest) ProtoMessage()    {}

type RPCUserEditBlockedUserResponse struct {
	Error UserEditBlockedUserResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserEditBlockedUserResponse_ErrorType" json:"error,omitempty"`
}

func (m *RPCUserEditBlockedUserResponse) Reset()         { *m = RPCUserEditBlockedUserResponse{} }
func (m *RPCUserEditBlockedUserResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserEditBlockedUserResponse) ProtoMessage()    {}

type RPCUserGetBlockedUsersRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *RPCUserGetBlockedUsersRequest) Reset()         { *m = RPCUserGetBlockedUsersRequest{} }
func (m *RPCUserGetBlockedUsersRequest) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetBlockedUsersRequest) ProtoMessage()    {}

type RPCUserGetBlockedUsersResponse struct {
	Error UserGetBlockedUsersResponse_ErrorType `protobuf:"varint,1,opt,name=error,enum=proto.UserGetBlockedUsersResponse_ErrorType" json:"error,omitempty"`
	Users []*ChatUser                           `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *RPCUserGetBlockedUsersResponse) Reset()         { *m = RPCUserGetBlockedUsersResponse{} }
func (m *RPCUserGetBlockedUsersResponse) String() string { return proto.CompactTextString(m) }
func (*RPCUserGetBlockedUsersResponse) ProtoMessage()    {}

func (m *RPCUserGetBlockedUsersResponse) GetUsers() []*ChatUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.RPCUserGetOwnProfileResponse_ErrorType", RPCUserGetOwnProfileResponse_ErrorType_name, RPCUserGetOwnProfileResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCUserDeleteUserResponse_ErrorType", RPCUserDeleteUserResponse_ErrorType_name, RPCUserDeleteUserResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCUserRemoveUserFromHubsResponse_ErrorType", RPCUserRemoveUserFromHubsResponse_ErrorType_name, RPCUserRemoveUserFromHubsResponse_ErrorType_value)
	proto.RegisterEnum("proto.RPCUserAddMutualContactsResponse_ErrorType", RPCUserAddMutualContactsResponse_ErrorType_name, RPCUserAddMutualContactsResponse_ErrorType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for UserService service

type UserServiceClient interface {
	Login(ctx context.Context, in *RPCAuthLoginRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error)
	LoginOAuth(ctx context.Context, in *RPCAuthLoginOAuthRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error)
	LoginEmail(ctx context.Context, in *RPCAuthLoginEmailRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error)
	Register(ctx context.Context, in *RPCAuthRegisterRequest, opts ...grpc.CallOption) (*AuthRegisterResponse, error)
	ConvertEphemeralUser(ctx context.Context, in *RPCUserConvertEphemeralUserRequest, opts ...grpc.CallOption) (*RPCUserConvertEphemeralUserResponse, error)
	TransferOwnership(ctx context.Context, in *RPCUserTransferOwnershipRequest, opts ...grpc.CallOption) (*RPCUserTransferOwnershipResponse, error)
	CheckBanStatus(ctx context.Context, in *RPCUserCheckBanStatusRequest, opts ...grpc.CallOption) (*RPCUserCheckBanStatusResponse, error)
	GetUser(ctx context.Context, in *RPCUserGetUserRequest, opts ...grpc.CallOption) (*RPCUserGetUserResponse, error)
	DeleteUser(ctx context.Context, in *RPCUserDeleteUserRequest, opts ...grpc.CallOption) (*RPCUserDeleteUserResponse, error)
	RemoveUserFromHubs(ctx context.Context, in *RPCUserRemoveUserFromHubsRequest, opts ...grpc.CallOption) (*RPCUserRemoveUserFromHubsResponse, error)
	ValidateUsername(ctx context.Context, in *RPCUserValidateUsernameRequest, opts ...grpc.CallOption) (*RPCUserValidateUsernameResponse, error)
	ValidateEmailAddress(ctx context.Context, in *RPCUserValidateEmailAddressRequest, opts ...grpc.CallOption) (*RPCUserValidateEmailAddressResponse, error)
	GetUserAgent(ctx context.Context, in *RPCUserGetUserAgentRequest, opts ...grpc.CallOption) (*RPCUserGetUserAgentResponse, error)
	GetOwnProfile(ctx context.Context, in *RPCUserGetOwnProfileRequest, opts ...grpc.CallOption) (*RPCUserGetOwnProfileResponse, error)
	GetOtherProfile(ctx context.Context, in *RPCUserGetOtherProfileRequest, opts ...grpc.CallOption) (*RPCUserGetOtherProfileResponse, error)
	UpdateUser(ctx context.Context, in *RPCUserUpdateRequest, opts ...grpc.CallOption) (*RPCUserUpdateResponse, error)
	RequestFriendship(ctx context.Context, in *RPCUserFriendshipRequest, opts ...grpc.CallOption) (*RPCUserFriendshipRequestResponse, error)
	Unfriend(ctx context.Context, in *RPCUserFriendshipRequest, opts ...grpc.CallOption) (*RPCGenericResponse, error)
	GetFriends(ctx context.Context, in *RPCUserGetFriendsRequest, opts ...grpc.CallOption) (*RPCUserGetFriendsResponse, error)
	RequestActivationEmail(ctx context.Context, in *RPCUserActivationEmailRequest, opts ...grpc.CallOption) (*RPCUserActivationEmailResponse, error)
	ExecuteActivation(ctx context.Context, in *RPCUserExecuteActivationRequest, opts ...grpc.CallOption) (*RPCUserExecuteActivationResponse, error)
	RequestPasswordReset(ctx context.Context, in *RPCUserPasswordResetEmailRequest, opts ...grpc.CallOption) (*RPCUserPasswordResetEmailResponse, error)
	GetPasswordResetInfo(ctx context.Context, in *RPCUserGetPasswordResetInfoRequest, opts ...grpc.CallOption) (*RPCUserGetPasswordResetInfoResponse, error)
	ExecutePasswordReset(ctx context.Context, in *RPCUserExecutePasswordResetRequest, opts ...grpc.CallOption) (*RPCUserExecutePasswordResetResponse, error)
	UpdatePassword(ctx context.Context, in *RPCUserUpdatePasswordRequest, opts ...grpc.CallOption) (*RPCUserUpdatePasswordResponse, error)
	GetUserProfile(ctx context.Context, in *RPCProfileGetRequest, opts ...grpc.CallOption) (*UserProfile, error)
	UpdateGameEntry(ctx context.Context, in *UserGame, opts ...grpc.CallOption) (*UserProfile, error)
	DeleteGameEntry(ctx context.Context, in *UserGame, opts ...grpc.CallOption) (*UserProfile, error)
	UpdateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserProfile, error)
	DeleteUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserProfile, error)
	SetChannelRole(ctx context.Context, in *RPCUserSetChannelRoleRequest, opts ...grpc.CallOption) (*RPCUserSetChannelRoleResponse, error)
	SetGroupRole(ctx context.Context, in *RPCUserSetGroupRoleRequest, opts ...grpc.CallOption) (*RPCUserSetGroupRoleResponse, error)
	CreateProprietaryGroupMembership(ctx context.Context, in *RPCCreateRelationRequest, opts ...grpc.CallOption) (*RPCCreateRelationResponse, error)
	UpdateVoiceStatus(ctx context.Context, in *RPCUserUpdateVoiceStatusRequest, opts ...grpc.CallOption) (*RPCUserUpdateVoiceStatusResponse, error)
	AddContact(ctx context.Context, in *RPCUserAddContactRequest, opts ...grpc.CallOption) (*RPCUserAddContactResponse, error)
	RemoveContact(ctx context.Context, in *RPCUserRemoveContactRequest, opts ...grpc.CallOption) (*RPCUserRemoveContactResponse, error)
	GetContacts(ctx context.Context, in *RPCUserGetContactsRequest, opts ...grpc.CallOption) (*RPCUserGetContactsResponse, error)
	AddMutualContacts(ctx context.Context, in *RPCUserAddMutualContactsRequest, opts ...grpc.CallOption) (*RPCUserAddMutualContactsResponse, error)
	EditBlockedUser(ctx context.Context, in *RPCUserEditBlockedUserRequest, opts ...grpc.CallOption) (*RPCUserEditBlockedUserResponse, error)
	GetBlockedUsers(ctx context.Context, in *RPCUserGetBlockedUsersRequest, opts ...grpc.CallOption) (*RPCUserGetBlockedUsersResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *RPCAuthLoginRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error) {
	out := new(RPCAuthLoginResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginOAuth(ctx context.Context, in *RPCAuthLoginOAuthRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error) {
	out := new(RPCAuthLoginResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/LoginOAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginEmail(ctx context.Context, in *RPCAuthLoginEmailRequest, opts ...grpc.CallOption) (*RPCAuthLoginResponse, error) {
	out := new(RPCAuthLoginResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/LoginEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Register(ctx context.Context, in *RPCAuthRegisterRequest, opts ...grpc.CallOption) (*AuthRegisterResponse, error) {
	out := new(AuthRegisterResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConvertEphemeralUser(ctx context.Context, in *RPCUserConvertEphemeralUserRequest, opts ...grpc.CallOption) (*RPCUserConvertEphemeralUserResponse, error) {
	out := new(RPCUserConvertEphemeralUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/ConvertEphemeralUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TransferOwnership(ctx context.Context, in *RPCUserTransferOwnershipRequest, opts ...grpc.CallOption) (*RPCUserTransferOwnershipResponse, error) {
	out := new(RPCUserTransferOwnershipResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/TransferOwnership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckBanStatus(ctx context.Context, in *RPCUserCheckBanStatusRequest, opts ...grpc.CallOption) (*RPCUserCheckBanStatusResponse, error) {
	out := new(RPCUserCheckBanStatusResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/CheckBanStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *RPCUserGetUserRequest, opts ...grpc.CallOption) (*RPCUserGetUserResponse, error) {
	out := new(RPCUserGetUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *RPCUserDeleteUserRequest, opts ...grpc.CallOption) (*RPCUserDeleteUserResponse, error) {
	out := new(RPCUserDeleteUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUserFromHubs(ctx context.Context, in *RPCUserRemoveUserFromHubsRequest, opts ...grpc.CallOption) (*RPCUserRemoveUserFromHubsResponse, error) {
	out := new(RPCUserRemoveUserFromHubsResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/RemoveUserFromHubs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateUsername(ctx context.Context, in *RPCUserValidateUsernameRequest, opts ...grpc.CallOption) (*RPCUserValidateUsernameResponse, error) {
	out := new(RPCUserValidateUsernameResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/ValidateUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateEmailAddress(ctx context.Context, in *RPCUserValidateEmailAddressRequest, opts ...grpc.CallOption) (*RPCUserValidateEmailAddressResponse, error) {
	out := new(RPCUserValidateEmailAddressResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/ValidateEmailAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserAgent(ctx context.Context, in *RPCUserGetUserAgentRequest, opts ...grpc.CallOption) (*RPCUserGetUserAgentResponse, error) {
	out := new(RPCUserGetUserAgentResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUserAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOwnProfile(ctx context.Context, in *RPCUserGetOwnProfileRequest, opts ...grpc.CallOption) (*RPCUserGetOwnProfileResponse, error) {
	out := new(RPCUserGetOwnProfileResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetOwnProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOtherProfile(ctx context.Context, in *RPCUserGetOtherProfileRequest, opts ...grpc.CallOption) (*RPCUserGetOtherProfileResponse, error) {
	out := new(RPCUserGetOtherProfileResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetOtherProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *RPCUserUpdateRequest, opts ...grpc.CallOption) (*RPCUserUpdateResponse, error) {
	out := new(RPCUserUpdateResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestFriendship(ctx context.Context, in *RPCUserFriendshipRequest, opts ...grpc.CallOption) (*RPCUserFriendshipRequestResponse, error) {
	out := new(RPCUserFriendshipRequestResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/RequestFriendship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Unfriend(ctx context.Context, in *RPCUserFriendshipRequest, opts ...grpc.CallOption) (*RPCGenericResponse, error) {
	out := new(RPCGenericResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/Unfriend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetFriends(ctx context.Context, in *RPCUserGetFriendsRequest, opts ...grpc.CallOption) (*RPCUserGetFriendsResponse, error) {
	out := new(RPCUserGetFriendsResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestActivationEmail(ctx context.Context, in *RPCUserActivationEmailRequest, opts ...grpc.CallOption) (*RPCUserActivationEmailResponse, error) {
	out := new(RPCUserActivationEmailResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/RequestActivationEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ExecuteActivation(ctx context.Context, in *RPCUserExecuteActivationRequest, opts ...grpc.CallOption) (*RPCUserExecuteActivationResponse, error) {
	out := new(RPCUserExecuteActivationResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/ExecuteActivation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RequestPasswordReset(ctx context.Context, in *RPCUserPasswordResetEmailRequest, opts ...grpc.CallOption) (*RPCUserPasswordResetEmailResponse, error) {
	out := new(RPCUserPasswordResetEmailResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/RequestPasswordReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPasswordResetInfo(ctx context.Context, in *RPCUserGetPasswordResetInfoRequest, opts ...grpc.CallOption) (*RPCUserGetPasswordResetInfoResponse, error) {
	out := new(RPCUserGetPasswordResetInfoResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetPasswordResetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ExecutePasswordReset(ctx context.Context, in *RPCUserExecutePasswordResetRequest, opts ...grpc.CallOption) (*RPCUserExecutePasswordResetResponse, error) {
	out := new(RPCUserExecutePasswordResetResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/ExecutePasswordReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *RPCUserUpdatePasswordRequest, opts ...grpc.CallOption) (*RPCUserUpdatePasswordResponse, error) {
	out := new(RPCUserUpdatePasswordResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *RPCProfileGetRequest, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := grpc.Invoke(ctx, "/proto.UserService/GetUserProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateGameEntry(ctx context.Context, in *UserGame, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := grpc.Invoke(ctx, "/proto.UserService/UpdateGameEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteGameEntry(ctx context.Context, in *UserGame, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := grpc.Invoke(ctx, "/proto.UserService/DeleteGameEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := grpc.Invoke(ctx, "/proto.UserService/UpdateUserAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserAccount(ctx context.Context, in *UserAccount, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := grpc.Invoke(ctx, "/proto.UserService/DeleteUserAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetChannelRole(ctx context.Context, in *RPCUserSetChannelRoleRequest, opts ...grpc.CallOption) (*RPCUserSetChannelRoleResponse, error) {
	out := new(RPCUserSetChannelRoleResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/SetChannelRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetGroupRole(ctx context.Context, in *RPCUserSetGroupRoleRequest, opts ...grpc.CallOption) (*RPCUserSetGroupRoleResponse, error) {
	out := new(RPCUserSetGroupRoleResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/SetGroupRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateProprietaryGroupMembership(ctx context.Context, in *RPCCreateRelationRequest, opts ...grpc.CallOption) (*RPCCreateRelationResponse, error) {
	out := new(RPCCreateRelationResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/CreateProprietaryGroupMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateVoiceStatus(ctx context.Context, in *RPCUserUpdateVoiceStatusRequest, opts ...grpc.CallOption) (*RPCUserUpdateVoiceStatusResponse, error) {
	out := new(RPCUserUpdateVoiceStatusResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/UpdateVoiceStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddContact(ctx context.Context, in *RPCUserAddContactRequest, opts ...grpc.CallOption) (*RPCUserAddContactResponse, error) {
	out := new(RPCUserAddContactResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/AddContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveContact(ctx context.Context, in *RPCUserRemoveContactRequest, opts ...grpc.CallOption) (*RPCUserRemoveContactResponse, error) {
	out := new(RPCUserRemoveContactResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/RemoveContact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetContacts(ctx context.Context, in *RPCUserGetContactsRequest, opts ...grpc.CallOption) (*RPCUserGetContactsResponse, error) {
	out := new(RPCUserGetContactsResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddMutualContacts(ctx context.Context, in *RPCUserAddMutualContactsRequest, opts ...grpc.CallOption) (*RPCUserAddMutualContactsResponse, error) {
	out := new(RPCUserAddMutualContactsResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/AddMutualContacts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditBlockedUser(ctx context.Context, in *RPCUserEditBlockedUserRequest, opts ...grpc.CallOption) (*RPCUserEditBlockedUserResponse, error) {
	out := new(RPCUserEditBlockedUserResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/EditBlockedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBlockedUsers(ctx context.Context, in *RPCUserGetBlockedUsersRequest, opts ...grpc.CallOption) (*RPCUserGetBlockedUsersResponse, error) {
	out := new(RPCUserGetBlockedUsersResponse)
	err := grpc.Invoke(ctx, "/proto.UserService/GetBlockedUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Login(context.Context, *RPCAuthLoginRequest) (*RPCAuthLoginResponse, error)
	LoginOAuth(context.Context, *RPCAuthLoginOAuthRequest) (*RPCAuthLoginResponse, error)
	LoginEmail(context.Context, *RPCAuthLoginEmailRequest) (*RPCAuthLoginResponse, error)
	Register(context.Context, *RPCAuthRegisterRequest) (*AuthRegisterResponse, error)
	ConvertEphemeralUser(context.Context, *RPCUserConvertEphemeralUserRequest) (*RPCUserConvertEphemeralUserResponse, error)
	TransferOwnership(context.Context, *RPCUserTransferOwnershipRequest) (*RPCUserTransferOwnershipResponse, error)
	CheckBanStatus(context.Context, *RPCUserCheckBanStatusRequest) (*RPCUserCheckBanStatusResponse, error)
	GetUser(context.Context, *RPCUserGetUserRequest) (*RPCUserGetUserResponse, error)
	DeleteUser(context.Context, *RPCUserDeleteUserRequest) (*RPCUserDeleteUserResponse, error)
	RemoveUserFromHubs(context.Context, *RPCUserRemoveUserFromHubsRequest) (*RPCUserRemoveUserFromHubsResponse, error)
	ValidateUsername(context.Context, *RPCUserValidateUsernameRequest) (*RPCUserValidateUsernameResponse, error)
	ValidateEmailAddress(context.Context, *RPCUserValidateEmailAddressRequest) (*RPCUserValidateEmailAddressResponse, error)
	GetUserAgent(context.Context, *RPCUserGetUserAgentRequest) (*RPCUserGetUserAgentResponse, error)
	GetOwnProfile(context.Context, *RPCUserGetOwnProfileRequest) (*RPCUserGetOwnProfileResponse, error)
	GetOtherProfile(context.Context, *RPCUserGetOtherProfileRequest) (*RPCUserGetOtherProfileResponse, error)
	UpdateUser(context.Context, *RPCUserUpdateRequest) (*RPCUserUpdateResponse, error)
	RequestFriendship(context.Context, *RPCUserFriendshipRequest) (*RPCUserFriendshipRequestResponse, error)
	Unfriend(context.Context, *RPCUserFriendshipRequest) (*RPCGenericResponse, error)
	GetFriends(context.Context, *RPCUserGetFriendsRequest) (*RPCUserGetFriendsResponse, error)
	RequestActivationEmail(context.Context, *RPCUserActivationEmailRequest) (*RPCUserActivationEmailResponse, error)
	ExecuteActivation(context.Context, *RPCUserExecuteActivationRequest) (*RPCUserExecuteActivationResponse, error)
	RequestPasswordReset(context.Context, *RPCUserPasswordResetEmailRequest) (*RPCUserPasswordResetEmailResponse, error)
	GetPasswordResetInfo(context.Context, *RPCUserGetPasswordResetInfoRequest) (*RPCUserGetPasswordResetInfoResponse, error)
	ExecutePasswordReset(context.Context, *RPCUserExecutePasswordResetRequest) (*RPCUserExecutePasswordResetResponse, error)
	UpdatePassword(context.Context, *RPCUserUpdatePasswordRequest) (*RPCUserUpdatePasswordResponse, error)
	GetUserProfile(context.Context, *RPCProfileGetRequest) (*UserProfile, error)
	UpdateGameEntry(context.Context, *UserGame) (*UserProfile, error)
	DeleteGameEntry(context.Context, *UserGame) (*UserProfile, error)
	UpdateUserAccount(context.Context, *UserAccount) (*UserProfile, error)
	DeleteUserAccount(context.Context, *UserAccount) (*UserProfile, error)
	SetChannelRole(context.Context, *RPCUserSetChannelRoleRequest) (*RPCUserSetChannelRoleResponse, error)
	SetGroupRole(context.Context, *RPCUserSetGroupRoleRequest) (*RPCUserSetGroupRoleResponse, error)
	CreateProprietaryGroupMembership(context.Context, *RPCCreateRelationRequest) (*RPCCreateRelationResponse, error)
	UpdateVoiceStatus(context.Context, *RPCUserUpdateVoiceStatusRequest) (*RPCUserUpdateVoiceStatusResponse, error)
	AddContact(context.Context, *RPCUserAddContactRequest) (*RPCUserAddContactResponse, error)
	RemoveContact(context.Context, *RPCUserRemoveContactRequest) (*RPCUserRemoveContactResponse, error)
	GetContacts(context.Context, *RPCUserGetContactsRequest) (*RPCUserGetContactsResponse, error)
	AddMutualContacts(context.Context, *RPCUserAddMutualContactsRequest) (*RPCUserAddMutualContactsResponse, error)
	EditBlockedUser(context.Context, *RPCUserEditBlockedUserRequest) (*RPCUserEditBlockedUserResponse, error)
	GetBlockedUsers(context.Context, *RPCUserGetBlockedUsersRequest) (*RPCUserGetBlockedUsersResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCAuthLoginRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).Login(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_LoginOAuth_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCAuthLoginOAuthRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).LoginOAuth(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_LoginEmail_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCAuthLoginEmailRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).LoginEmail(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCAuthRegisterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_ConvertEphemeralUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserConvertEphemeralUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).ConvertEphemeralUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_TransferOwnership_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserTransferOwnershipRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).TransferOwnership(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_CheckBanStatus_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserCheckBanStatusRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).CheckBanStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserDeleteUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).DeleteUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_RemoveUserFromHubs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserRemoveUserFromHubsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).RemoveUserFromHubs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_ValidateUsername_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserValidateUsernameRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).ValidateUsername(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_ValidateEmailAddress_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserValidateEmailAddressRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).ValidateEmailAddress(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetUserAgent_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetUserAgentRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetUserAgent(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetOwnProfile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetOwnProfileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetOwnProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetOtherProfile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetOtherProfileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetOtherProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserUpdateRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).UpdateUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_RequestFriendship_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserFriendshipRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).RequestFriendship(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_Unfriend_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserFriendshipRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).Unfriend(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetFriends_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetFriendsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetFriends(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_RequestActivationEmail_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserActivationEmailRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).RequestActivationEmail(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_ExecuteActivation_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserExecuteActivationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).ExecuteActivation(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_RequestPasswordReset_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserPasswordResetEmailRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).RequestPasswordReset(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetPasswordResetInfo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetPasswordResetInfoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetPasswordResetInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_ExecutePasswordReset_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserExecutePasswordResetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).ExecutePasswordReset(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserUpdatePasswordRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).UpdatePassword(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCProfileGetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetUserProfile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_UpdateGameEntry_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UserGame)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).UpdateGameEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_DeleteGameEntry_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UserGame)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).DeleteGameEntry(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_UpdateUserAccount_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UserAccount)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).UpdateUserAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_DeleteUserAccount_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(UserAccount)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).DeleteUserAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_SetChannelRole_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserSetChannelRoleRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).SetChannelRole(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_SetGroupRole_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserSetGroupRoleRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).SetGroupRole(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_CreateProprietaryGroupMembership_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCCreateRelationRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).CreateProprietaryGroupMembership(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_UpdateVoiceStatus_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserUpdateVoiceStatusRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).UpdateVoiceStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_AddContact_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserAddContactRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).AddContact(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_RemoveContact_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserRemoveContactRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).RemoveContact(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetContacts_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetContactsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetContacts(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_AddMutualContacts_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserAddMutualContactsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).AddMutualContacts(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_EditBlockedUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserEditBlockedUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).EditBlockedUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_GetBlockedUsers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCUserGetBlockedUsersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).GetBlockedUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "LoginOAuth",
			Handler:    _UserService_LoginOAuth_Handler,
		},
		{
			MethodName: "LoginEmail",
			Handler:    _UserService_LoginEmail_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "ConvertEphemeralUser",
			Handler:    _UserService_ConvertEphemeralUser_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _UserService_TransferOwnership_Handler,
		},
		{
			MethodName: "CheckBanStatus",
			Handler:    _UserService_CheckBanStatus_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "RemoveUserFromHubs",
			Handler:    _UserService_RemoveUserFromHubs_Handler,
		},
		{
			MethodName: "ValidateUsername",
			Handler:    _UserService_ValidateUsername_Handler,
		},
		{
			MethodName: "ValidateEmailAddress",
			Handler:    _UserService_ValidateEmailAddress_Handler,
		},
		{
			MethodName: "GetUserAgent",
			Handler:    _UserService_GetUserAgent_Handler,
		},
		{
			MethodName: "GetOwnProfile",
			Handler:    _UserService_GetOwnProfile_Handler,
		},
		{
			MethodName: "GetOtherProfile",
			Handler:    _UserService_GetOtherProfile_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "RequestFriendship",
			Handler:    _UserService_RequestFriendship_Handler,
		},
		{
			MethodName: "Unfriend",
			Handler:    _UserService_Unfriend_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _UserService_GetFriends_Handler,
		},
		{
			MethodName: "RequestActivationEmail",
			Handler:    _UserService_RequestActivationEmail_Handler,
		},
		{
			MethodName: "ExecuteActivation",
			Handler:    _UserService_ExecuteActivation_Handler,
		},
		{
			MethodName: "RequestPasswordReset",
			Handler:    _UserService_RequestPasswordReset_Handler,
		},
		{
			MethodName: "GetPasswordResetInfo",
			Handler:    _UserService_GetPasswordResetInfo_Handler,
		},
		{
			MethodName: "ExecutePasswordReset",
			Handler:    _UserService_ExecutePasswordReset_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateGameEntry",
			Handler:    _UserService_UpdateGameEntry_Handler,
		},
		{
			MethodName: "DeleteGameEntry",
			Handler:    _UserService_DeleteGameEntry_Handler,
		},
		{
			MethodName: "UpdateUserAccount",
			Handler:    _UserService_UpdateUserAccount_Handler,
		},
		{
			MethodName: "DeleteUserAccount",
			Handler:    _UserService_DeleteUserAccount_Handler,
		},
		{
			MethodName: "SetChannelRole",
			Handler:    _UserService_SetChannelRole_Handler,
		},
		{
			MethodName: "SetGroupRole",
			Handler:    _UserService_SetGroupRole_Handler,
		},
		{
			MethodName: "CreateProprietaryGroupMembership",
			Handler:    _UserService_CreateProprietaryGroupMembership_Handler,
		},
		{
			MethodName: "UpdateVoiceStatus",
			Handler:    _UserService_UpdateVoiceStatus_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _UserService_AddContact_Handler,
		},
		{
			MethodName: "RemoveContact",
			Handler:    _UserService_RemoveContact_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _UserService_GetContacts_Handler,
		},
		{
			MethodName: "AddMutualContacts",
			Handler:    _UserService_AddMutualContacts_Handler,
		},
		{
			MethodName: "EditBlockedUser",
			Handler:    _UserService_EditBlockedUser_Handler,
		},
		{
			MethodName: "GetBlockedUsers",
			Handler:    _UserService_GetBlockedUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for GroupService service

type GroupServiceClient interface {
	CreateGroup(ctx context.Context, in *RPCGroupCreateGroupRequest, opts ...grpc.CallOption) (*RPCGroupCreateGroupResponse, error)
	EditGroup(ctx context.Context, in *RPCGroupEditGroupRequest, opts ...grpc.CallOption) (*RPCGroupEditGroupResponse, error)
	GetGroup(ctx context.Context, in *RPCGroupGetGroupRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupResponse, error)
	GetGroups(ctx context.Context, in *RPCGroupGetGroupsRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupsResponse, error)
	GetGroupsForUser(ctx context.Context, in *RPCGroupGetGroupsForUserRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupsForUserResponse, error)
	AddGroupMember(ctx context.Context, in *RPCGroupAddGroupMemberRequest, opts ...grpc.CallOption) (*RPCGroupAddGroupMemberResponse, error)
	AddGroupMembers(ctx context.Context, in *RPCGroupAddGroupMembersRequest, opts ...grpc.CallOption) (*RPCGroupAddGroupMembersResponse, error)
	RemoveGroupMember(ctx context.Context, in *RPCGroupRemoveGroupMemberRequest, opts ...grpc.CallOption) (*RPCGroupRemoveGroupMemberResponse, error)
	CheckGroupMembership(ctx context.Context, in *RPCGroupCheckGroupMembershipRequest, opts ...grpc.CallOption) (*RPCGroupCheckGroupMembershipResponse, error)
	CreateInviteCode(ctx context.Context, in *RPCGroupCreateInviteCodeRequest, opts ...grpc.CallOption) (*RPCGroupCreateInviteCodeResponse, error)
	GetInviteCodeInfo(ctx context.Context, in *RPCGroupGetInviteCodeInfoRequest, opts ...grpc.CallOption) (*RPCGroupGetInviteCodeInfoResponse, error)
	AcceptInvite(ctx context.Context, in *RPCGroupAcceptInviteRequest, opts ...grpc.CallOption) (*RPCGroupAcceptInviteResponse, error)
	GetGroupToken(ctx context.Context, in *RPCGroupGetGroupTokenRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupTokenResponse, error)
	// Load all users that are associated to a group
	// 1. All owners or members of that Group
	// 2. All users that currently subscribing atleast one group channel
	GetAssociatedGroupUsers(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*RPCAssociatedGroupUsersResponse, error)
	RemoveUserFromGroup(ctx context.Context, in *RPCGroupRemoveUserRequest, opts ...grpc.CallOption) (*RPCGroupRemoveUserResponse, error)
	AddMember(ctx context.Context, in *RPCGroupAddMemberRequest, opts ...grpc.CallOption) (*RPCGroupAddMemberResponse, error)
	GetMembers(ctx context.Context, in *RPCGroupGetMembersRequest, opts ...grpc.CallOption) (*RPCGroupGetMembersResponse, error)
	EditMember(ctx context.Context, in *RPCGroupEditMemberRequest, opts ...grpc.CallOption) (*RPCGroupEditMemberResponse, error)
	SendInvite(ctx context.Context, in *RPCGroupSendInviteRequest, opts ...grpc.CallOption) (*RPCGroupSendInviteResponse, error)
	JoinGroup(ctx context.Context, in *RPCGroupJoinGroupRequest, opts ...grpc.CallOption) (*RPCGroupJoinGroupResponse, error)
	LeaveGroup(ctx context.Context, in *RPCGroupLeaveGroupRequest, opts ...grpc.CallOption) (*RPCGroupLeaveGroupResponse, error)
}

type groupServiceClient struct {
	cc *grpc.ClientConn
}

func NewGroupServiceClient(cc *grpc.ClientConn) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) CreateGroup(ctx context.Context, in *RPCGroupCreateGroupRequest, opts ...grpc.CallOption) (*RPCGroupCreateGroupResponse, error) {
	out := new(RPCGroupCreateGroupResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) EditGroup(ctx context.Context, in *RPCGroupEditGroupRequest, opts ...grpc.CallOption) (*RPCGroupEditGroupResponse, error) {
	out := new(RPCGroupEditGroupResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/EditGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroup(ctx context.Context, in *RPCGroupGetGroupRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupResponse, error) {
	out := new(RPCGroupGetGroupResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroups(ctx context.Context, in *RPCGroupGetGroupsRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupsResponse, error) {
	out := new(RPCGroupGetGroupsResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupsForUser(ctx context.Context, in *RPCGroupGetGroupsForUserRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupsForUserResponse, error) {
	out := new(RPCGroupGetGroupsForUserResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetGroupsForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddGroupMember(ctx context.Context, in *RPCGroupAddGroupMemberRequest, opts ...grpc.CallOption) (*RPCGroupAddGroupMemberResponse, error) {
	out := new(RPCGroupAddGroupMemberResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/AddGroupMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddGroupMembers(ctx context.Context, in *RPCGroupAddGroupMembersRequest, opts ...grpc.CallOption) (*RPCGroupAddGroupMembersResponse, error) {
	out := new(RPCGroupAddGroupMembersResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/AddGroupMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveGroupMember(ctx context.Context, in *RPCGroupRemoveGroupMemberRequest, opts ...grpc.CallOption) (*RPCGroupRemoveGroupMemberResponse, error) {
	out := new(RPCGroupRemoveGroupMemberResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/RemoveGroupMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) CheckGroupMembership(ctx context.Context, in *RPCGroupCheckGroupMembershipRequest, opts ...grpc.CallOption) (*RPCGroupCheckGroupMembershipResponse, error) {
	out := new(RPCGroupCheckGroupMembershipResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/CheckGroupMembership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) CreateInviteCode(ctx context.Context, in *RPCGroupCreateInviteCodeRequest, opts ...grpc.CallOption) (*RPCGroupCreateInviteCodeResponse, error) {
	out := new(RPCGroupCreateInviteCodeResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/CreateInviteCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetInviteCodeInfo(ctx context.Context, in *RPCGroupGetInviteCodeInfoRequest, opts ...grpc.CallOption) (*RPCGroupGetInviteCodeInfoResponse, error) {
	out := new(RPCGroupGetInviteCodeInfoResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetInviteCodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AcceptInvite(ctx context.Context, in *RPCGroupAcceptInviteRequest, opts ...grpc.CallOption) (*RPCGroupAcceptInviteResponse, error) {
	out := new(RPCGroupAcceptInviteResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/AcceptInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetGroupToken(ctx context.Context, in *RPCGroupGetGroupTokenRequest, opts ...grpc.CallOption) (*RPCGroupGetGroupTokenResponse, error) {
	out := new(RPCGroupGetGroupTokenResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetGroupToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetAssociatedGroupUsers(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*RPCAssociatedGroupUsersResponse, error) {
	out := new(RPCAssociatedGroupUsersResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetAssociatedGroupUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveUserFromGroup(ctx context.Context, in *RPCGroupRemoveUserRequest, opts ...grpc.CallOption) (*RPCGroupRemoveUserResponse, error) {
	out := new(RPCGroupRemoveUserResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/RemoveUserFromGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddMember(ctx context.Context, in *RPCGroupAddMemberRequest, opts ...grpc.CallOption) (*RPCGroupAddMemberResponse, error) {
	out := new(RPCGroupAddMemberResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/AddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetMembers(ctx context.Context, in *RPCGroupGetMembersRequest, opts ...grpc.CallOption) (*RPCGroupGetMembersResponse, error) {
	out := new(RPCGroupGetMembersResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/GetMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) EditMember(ctx context.Context, in *RPCGroupEditMemberRequest, opts ...grpc.CallOption) (*RPCGroupEditMemberResponse, error) {
	out := new(RPCGroupEditMemberResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/EditMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) SendInvite(ctx context.Context, in *RPCGroupSendInviteRequest, opts ...grpc.CallOption) (*RPCGroupSendInviteResponse, error) {
	out := new(RPCGroupSendInviteResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/SendInvite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) JoinGroup(ctx context.Context, in *RPCGroupJoinGroupRequest, opts ...grpc.CallOption) (*RPCGroupJoinGroupResponse, error) {
	out := new(RPCGroupJoinGroupResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) LeaveGroup(ctx context.Context, in *RPCGroupLeaveGroupRequest, opts ...grpc.CallOption) (*RPCGroupLeaveGroupResponse, error) {
	out := new(RPCGroupLeaveGroupResponse)
	err := grpc.Invoke(ctx, "/proto.GroupService/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupService service

type GroupServiceServer interface {
	CreateGroup(context.Context, *RPCGroupCreateGroupRequest) (*RPCGroupCreateGroupResponse, error)
	EditGroup(context.Context, *RPCGroupEditGroupRequest) (*RPCGroupEditGroupResponse, error)
	GetGroup(context.Context, *RPCGroupGetGroupRequest) (*RPCGroupGetGroupResponse, error)
	GetGroups(context.Context, *RPCGroupGetGroupsRequest) (*RPCGroupGetGroupsResponse, error)
	GetGroupsForUser(context.Context, *RPCGroupGetGroupsForUserRequest) (*RPCGroupGetGroupsForUserResponse, error)
	AddGroupMember(context.Context, *RPCGroupAddGroupMemberRequest) (*RPCGroupAddGroupMemberResponse, error)
	AddGroupMembers(context.Context, *RPCGroupAddGroupMembersRequest) (*RPCGroupAddGroupMembersResponse, error)
	RemoveGroupMember(context.Context, *RPCGroupRemoveGroupMemberRequest) (*RPCGroupRemoveGroupMemberResponse, error)
	CheckGroupMembership(context.Context, *RPCGroupCheckGroupMembershipRequest) (*RPCGroupCheckGroupMembershipResponse, error)
	CreateInviteCode(context.Context, *RPCGroupCreateInviteCodeRequest) (*RPCGroupCreateInviteCodeResponse, error)
	GetInviteCodeInfo(context.Context, *RPCGroupGetInviteCodeInfoRequest) (*RPCGroupGetInviteCodeInfoResponse, error)
	AcceptInvite(context.Context, *RPCGroupAcceptInviteRequest) (*RPCGroupAcceptInviteResponse, error)
	GetGroupToken(context.Context, *RPCGroupGetGroupTokenRequest) (*RPCGroupGetGroupTokenResponse, error)
	// Load all users that are associated to a group
	// 1. All owners or members of that Group
	// 2. All users that currently subscribing atleast one group channel
	GetAssociatedGroupUsers(context.Context, *StringValue) (*RPCAssociatedGroupUsersResponse, error)
	RemoveUserFromGroup(context.Context, *RPCGroupRemoveUserRequest) (*RPCGroupRemoveUserResponse, error)
	AddMember(context.Context, *RPCGroupAddMemberRequest) (*RPCGroupAddMemberResponse, error)
	GetMembers(context.Context, *RPCGroupGetMembersRequest) (*RPCGroupGetMembersResponse, error)
	EditMember(context.Context, *RPCGroupEditMemberRequest) (*RPCGroupEditMemberResponse, error)
	SendInvite(context.Context, *RPCGroupSendInviteRequest) (*RPCGroupSendInviteResponse, error)
	JoinGroup(context.Context, *RPCGroupJoinGroupRequest) (*RPCGroupJoinGroupResponse, error)
	LeaveGroup(context.Context, *RPCGroupLeaveGroupRequest) (*RPCGroupLeaveGroupResponse, error)
}

func RegisterGroupServiceServer(s *grpc.Server, srv GroupServiceServer) {
	s.RegisterService(&_GroupService_serviceDesc, srv)
}

func _GroupService_CreateGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupCreateGroupRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).CreateGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_EditGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupEditGroupRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).EditGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetGroupRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetGroups_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetGroupsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetGroups(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetGroupsForUser_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetGroupsForUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetGroupsForUser(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_AddGroupMember_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupAddGroupMemberRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).AddGroupMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_AddGroupMembers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupAddGroupMembersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).AddGroupMembers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_RemoveGroupMember_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupRemoveGroupMemberRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).RemoveGroupMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_CheckGroupMembership_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupCheckGroupMembershipRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).CheckGroupMembership(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_CreateInviteCode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupCreateInviteCodeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).CreateInviteCode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetInviteCodeInfo_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetInviteCodeInfoRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetInviteCodeInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_AcceptInvite_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupAcceptInviteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).AcceptInvite(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetGroupToken_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetGroupTokenRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetGroupToken(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetAssociatedGroupUsers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(StringValue)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetAssociatedGroupUsers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupRemoveUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).RemoveUserFromGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_AddMember_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupAddMemberRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).AddMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_GetMembers_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupGetMembersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).GetMembers(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_EditMember_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupEditMemberRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).EditMember(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_SendInvite_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupSendInviteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).SendInvite(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_JoinGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupJoinGroupRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).JoinGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _GroupService_LeaveGroup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCGroupLeaveGroupRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GroupServiceServer).LeaveGroup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupService_CreateGroup_Handler,
		},
		{
			MethodName: "EditGroup",
			Handler:    _GroupService_EditGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _GroupService_GetGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _GroupService_GetGroups_Handler,
		},
		{
			MethodName: "GetGroupsForUser",
			Handler:    _GroupService_GetGroupsForUser_Handler,
		},
		{
			MethodName: "AddGroupMember",
			Handler:    _GroupService_AddGroupMember_Handler,
		},
		{
			MethodName: "AddGroupMembers",
			Handler:    _GroupService_AddGroupMembers_Handler,
		},
		{
			MethodName: "RemoveGroupMember",
			Handler:    _GroupService_RemoveGroupMember_Handler,
		},
		{
			MethodName: "CheckGroupMembership",
			Handler:    _GroupService_CheckGroupMembership_Handler,
		},
		{
			MethodName: "CreateInviteCode",
			Handler:    _GroupService_CreateInviteCode_Handler,
		},
		{
			MethodName: "GetInviteCodeInfo",
			Handler:    _GroupService_GetInviteCodeInfo_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _GroupService_AcceptInvite_Handler,
		},
		{
			MethodName: "GetGroupToken",
			Handler:    _GroupService_GetGroupToken_Handler,
		},
		{
			MethodName: "GetAssociatedGroupUsers",
			Handler:    _GroupService_GetAssociatedGroupUsers_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _GroupService_RemoveUserFromGroup_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _GroupService_AddMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _GroupService_GetMembers_Handler,
		},
		{
			MethodName: "EditMember",
			Handler:    _GroupService_EditMember_Handler,
		},
		{
			MethodName: "SendInvite",
			Handler:    _GroupService_SendInvite_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _GroupService_JoinGroup_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _GroupService_LeaveGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for PrefsService service

type PrefsServiceClient interface {
	GetPref(ctx context.Context, in *RPCPrefsGetPrefRequest, opts ...grpc.CallOption) (*RPCPrefsGetPrefResponse, error)
	GetPrefs(ctx context.Context, in *RPCPrefsGetPrefsRequest, opts ...grpc.CallOption) (*RPCPrefsGetPrefsResponse, error)
	SetPrefs(ctx context.Context, in *RPCPrefsSetPrefsRequest, opts ...grpc.CallOption) (*RPCPrefsSetPrefsResponse, error)
	DeletePrefs(ctx context.Context, in *RPCPrefsDeletePrefsRequest, opts ...grpc.CallOption) (*RPCPrefsDeletePrefsResponse, error)
}

type prefsServiceClient struct {
	cc *grpc.ClientConn
}

func NewPrefsServiceClient(cc *grpc.ClientConn) PrefsServiceClient {
	return &prefsServiceClient{cc}
}

func (c *prefsServiceClient) GetPref(ctx context.Context, in *RPCPrefsGetPrefRequest, opts ...grpc.CallOption) (*RPCPrefsGetPrefResponse, error) {
	out := new(RPCPrefsGetPrefResponse)
	err := grpc.Invoke(ctx, "/proto.PrefsService/GetPref", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefsServiceClient) GetPrefs(ctx context.Context, in *RPCPrefsGetPrefsRequest, opts ...grpc.CallOption) (*RPCPrefsGetPrefsResponse, error) {
	out := new(RPCPrefsGetPrefsResponse)
	err := grpc.Invoke(ctx, "/proto.PrefsService/GetPrefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefsServiceClient) SetPrefs(ctx context.Context, in *RPCPrefsSetPrefsRequest, opts ...grpc.CallOption) (*RPCPrefsSetPrefsResponse, error) {
	out := new(RPCPrefsSetPrefsResponse)
	err := grpc.Invoke(ctx, "/proto.PrefsService/SetPrefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefsServiceClient) DeletePrefs(ctx context.Context, in *RPCPrefsDeletePrefsRequest, opts ...grpc.CallOption) (*RPCPrefsDeletePrefsResponse, error) {
	out := new(RPCPrefsDeletePrefsResponse)
	err := grpc.Invoke(ctx, "/proto.PrefsService/DeletePrefs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrefsService service

type PrefsServiceServer interface {
	GetPref(context.Context, *RPCPrefsGetPrefRequest) (*RPCPrefsGetPrefResponse, error)
	GetPrefs(context.Context, *RPCPrefsGetPrefsRequest) (*RPCPrefsGetPrefsResponse, error)
	SetPrefs(context.Context, *RPCPrefsSetPrefsRequest) (*RPCPrefsSetPrefsResponse, error)
	DeletePrefs(context.Context, *RPCPrefsDeletePrefsRequest) (*RPCPrefsDeletePrefsResponse, error)
}

func RegisterPrefsServiceServer(s *grpc.Server, srv PrefsServiceServer) {
	s.RegisterService(&_PrefsService_serviceDesc, srv)
}

func _PrefsService_GetPref_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCPrefsGetPrefRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PrefsServiceServer).GetPref(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PrefsService_GetPrefs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCPrefsGetPrefsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PrefsServiceServer).GetPrefs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PrefsService_SetPrefs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCPrefsSetPrefsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PrefsServiceServer).SetPrefs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PrefsService_DeletePrefs_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCPrefsDeletePrefsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PrefsServiceServer).DeletePrefs(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PrefsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PrefsService",
	HandlerType: (*PrefsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPref",
			Handler:    _PrefsService_GetPref_Handler,
		},
		{
			MethodName: "GetPrefs",
			Handler:    _PrefsService_GetPrefs_Handler,
		},
		{
			MethodName: "SetPrefs",
			Handler:    _PrefsService_SetPrefs_Handler,
		},
		{
			MethodName: "DeletePrefs",
			Handler:    _PrefsService_DeletePrefs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for LegacySearchService service

type LegacySearchServiceClient interface {
	Search(ctx context.Context, in *RPCSearchSearchRequest, opts ...grpc.CallOption) (*RPCSearchSearchResponse, error)
}

type legacySearchServiceClient struct {
	cc *grpc.ClientConn
}

func NewLegacySearchServiceClient(cc *grpc.ClientConn) LegacySearchServiceClient {
	return &legacySearchServiceClient{cc}
}

func (c *legacySearchServiceClient) Search(ctx context.Context, in *RPCSearchSearchRequest, opts ...grpc.CallOption) (*RPCSearchSearchResponse, error) {
	out := new(RPCSearchSearchResponse)
	err := grpc.Invoke(ctx, "/proto.LegacySearchService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LegacySearchService service

type LegacySearchServiceServer interface {
	Search(context.Context, *RPCSearchSearchRequest) (*RPCSearchSearchResponse, error)
}

func RegisterLegacySearchServiceServer(s *grpc.Server, srv LegacySearchServiceServer) {
	s.RegisterService(&_LegacySearchService_serviceDesc, srv)
}

func _LegacySearchService_Search_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RPCSearchSearchRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(LegacySearchServiceServer).Search(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _LegacySearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LegacySearchService",
	HandlerType: (*LegacySearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _LegacySearchService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
