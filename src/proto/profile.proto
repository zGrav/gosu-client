syntax = "proto3";

package proto;
import "optional.proto";
import "hub_base.proto";
option java_package = "maple.proto";
option go_package = "gosuproto";

message User {
    enum UserStatus {
        UNKNOWN = 0;
        OFFLINE = 1;
        ONLINE = 2;
        AWAY = 3;
        BUSY = 4;
    }
    string id = 1;
    string login = 2;
    bytes password = 3;
    string email = 4;
    string display_name = 5;
    string avatar_image = 6;
    repeated string channel_ids = 7;
    repeated Channel channels = 8;
    bool email_confirmed  = 9;
    UserStatus status = 10;
    bool terms_of_service = 11;
    bool newsletter = 12;
    string title_image = 13;
    string background_image = 14;
    repeated string game_ids = 15;
    string normalized_login = 16;

    UserBiography biography = 17;
    bool is_sysop = 18;
    repeated ChannelMembership channelMemberships = 19;
    repeated ProprietaryUserGroupRecord relations = 20;

    int64 created_at = 21;
    int64 updated_at = 22;
    bool ephemeral = 23;
    string facebook_id = 24;
    bool avatar_image_is_autogenerated = 25;
    bool name_is_autogenerated = 26;
    string google_id = 27;
    bool has_set_password = 28;
    bool has_mobile_client = 29;
}

message UserProfile {
    string id = 1;
    string display_name = 2;
    string avatar_image = 3;
    string title_image = 4;
    string background_image = 5;
    UserBiography biography = 6;
    repeated UserGame games = 16;
    repeated UserBadge badges = 17;
    repeated GroupMembership groups = 18;
    repeated UserAccount accounts = 19;
    repeated Hub hubs = 20;
}

message UserBiography {
    string introduction = 1;
    string languages = 2;
}

message UserAccount {
    enum AccountType {
        UNKNOWN = 0;
        STEAM = 1;          // ic_account_steam
        PSN = 2;            // ic_account_psn
        XBOX = 3;           // ic_account_xbox
        UPLAY = 4;          // ic_account_uplay
        BATTLE_NET = 5;     // ic_account_battlenet
        ORIGIN = 6;         // ic_account_origin
        PVP_NET = 7;        // ic_account_pvpnet
        FACEBOOK = 8;       // ic_account_facebook
        PLAYER_ME = 9;      // ic_account_playerme
        TEAMSPEAK = 10;     // ic_account_teamspeak
        TWITCH = 11;        // ic_account_twitch
        TWITTER = 12;       // ic_account_twitter
        WEBLINK = 13;       // ic_account_weblink
        YOUTUBE = 14;       // ic_account_youtube
    }

    string id = 1;
    string account_id = 2;
    string name = 3;
    AccountType type = 4;
}

message UserGame {
    string id = 1;
    string rank = 2;

    Game game = 16;
}

message UserAgent {
    enum UserAgentType {
        UNKNOWN = 0;
        WEB = 1;
        ANDROID = 2;
        IOS = 3;
        WEB_EMBEDDED = 4;
        BOT = 5;
        LOAD_TEST = 6;
        MANAGEMENT_CONSOLE = 7;
    }
    string id = 1;
    string user_id = 2;
    string name = 3;
    UserAgentType type = 4;
    string last_token = 5;
    string last_login = 6;
    string last_ip = 7;
    User user = 8;
}

message UserAgentConnection {
    string id = 1;
    string agent_id = 2;
    string timestamp = 3;
}

message ChannelUser {
    enum ChannelUserType {
        UNKNOWN = 0;
        OWNER = 1;
        MEMBER = 2;
        CHATTER = 3;
    }
    ChatUser user = 1;
    ChannelUserType type_v1 = 2;
    ChannelMembershipRecord.MembershipType type = 3;
    ChannelMembershipRecord.VoiceStatus voice_status = 4;
}

message ChatUser {
    string id = 1;
    string display_name = 2;
    string avatar_image = 3;
    bool is_moderator = 4;
    User.UserStatus status = 5;
    string title_image = 6;
    string background_image = 7;
    bool ephemeral = 8;
}

message ChatUserInfo {
    ChatUser user = 1;
    repeated ChatUser friends = 2;
    repeated GroupMembership group_memberships = 3;
    repeated Game games = 4;
}

message ProprietaryUserGroupRecord {
    enum Type {
        UNKNOWN = 0;
        NONE = 1;
        ESL_ADMINS = 2;
        ESL_VIDEO = 3;
    }
    string id = 1;
    string user_id = 2;
    Type type = 3;
}

message UserExternalIDRecord {
    string id = 1;
    int64 created_at = 2;
    int64 updated_at = 3;
    string user_id = 4;
    string group_id = 5;
    string external_id = 6;
}

message FriendRequest {
    ChatUser user = 1;
    string message = 2;
}

message Channel {
    enum ChannelType {
        UNKNOWN = 0;
        PRIVATE = 1;
        PUBLIC = 2;
        DIRECT = 3;
        GAME = 4;
        HUB = 5;
    }
    string id = 1;
    string title = 2;
    ChannelType type = 3;
    repeated string direct_user_ids = 4;
    repeated ChatUser direct_users = 5;
    string group_id = 6;
    repeated ChannelBan bans = 7;
    string game_id = 8;
    Game game = 9;
    repeated string tags = 10;
    string tag_list = 11;
    string topic = 12;
    string hub_id = 13;
    Hub hub = 14;
}

message ChannelBan {
    string user_id = 1;
    int64 expiry = 2;
}

message ChannelMembership {
    string channel_id = 1;
    string user_id = 2;
    ChannelMembershipRecord.MembershipType type = 3;
    Channel channel = 4;
    ChannelPermissions permissions = 5;
    ChannelMembershipRecord.VoiceStatus voice_status = 6;
}

message ChannelMembershipRecord {
    enum MembershipType {
        UNKNOWN = 0;
        NONE = 1;
        SUBSCRIBER = 25;
        MODERATOR = 50;
        MODERATOR_GROUP = 60;
        OWNER = 75;
    }

    enum VoiceStatus {
        VS_UNKNOWN = 0;
        VS_OFFLINE = 1;
        VS_ONLINE_MUTED = 2;
        VS_ONLINE = 3;
    }

    string id = 1;
    string channel_id = 2;
    string user_id = 3;
    MembershipType type = 4;
    Channel channel = 5;
    User user = 6;
    ChannelPermissions permissions = 7;
    VoiceStatus voice_status = 8;
}

message ChannelPermissions {
    bool kick_ban_user = 1;
    bool invite_user = 2;
    bool set_channel_role = 3;
    bool edit_sticky_message = 4;
    bool delete_message = 5;
    bool edit_channel = 6;
    bool delete_channel = 7;
}

message Group {
    string id = 1;
    string owner = 2;
    string name = 3;
    string description = 4;
    string title_image = 5;
    string background_image = 6;
    repeated Channel channels = 7;
    repeated ChatUser members = 8;
    int32 member_count = 9;
    int32 subscriber_count = 10;
}

message GroupPermissions {
    bool edit_group = 1;
    bool create_channel = 2;
    bool join_public_channel = 3;
    bool join_private_channel = 4;
    bool invite_user = 5;
    bool set_user_membership_type = 6;
}

message GroupMembership {
    Group group = 1;
    GroupMembershipTypeV1 type_v1 = 2; // this exists for backwards compatibility reasons

    string group_id = 3;
    string user_id = 4;
    GroupMembershipRecord.MembershipType type = 5;
    GroupPermissions permissions = 6;
}

message GroupMembershipRecord {
    enum MembershipType {
        UNKNOWN = 0;
        NONE = 1;
        GUEST = 25;
        MEMBER = 40;
        MODERATOR = 50;
        OWNER = 100;
    }

    string id = 1;
    string group_id = 2;
    string user_id = 3;
    MembershipType type = 4;
    Group group = 5;
    User user = 6;
    GroupPermissions permissions = 7;
    int64 created_at = 8;
    int64 updated_at = 9;
}

enum GroupMembershipTypeV1 {
    UNKNOWN = 0;
    MEMBER = 1;
    GUEST = 2;
}

message GroupMember {
    string id = 1;
    string user_id = 2;
    string group_id = 3;
}

// this is the deprecated group invite
message GroupInvitation {
    string id = 1;
    string group_id = 2;
    string code = 3;
    string inviter_id = 4;
}

message PotentialGroupMember {
    oneof identifier {
        OptionalString user_id = 1;
        OptionalString email_address = 2;
    }
}

message GroupInvite {
    string id = 1;
    int64 created_at = 2;
    int64 updated_at = 3;
    string group_id = 4;
    string inviter_id = 5;
    string user_id = 6;
    string email = 7;
    string code = 8;
    GroupMembershipRecord.MembershipType type = 9;
}

// Games

// Game is how we transport games over the wire
// Usually games are wrapped in UserGames and are updated on the fly
message Game {
    string id = 1;
    string name = 2;
    string title_image = 3;
    repeated string background_images = 4;
    bool read_only = 5;
    string short_name = 6;
}

message GameMembership {
    string game_id = 1;
    string user_id = 2;
    GameMembershipRecord.MembershipType type = 3;
    Game game = 4;
}

message GameMembershipRecord {
    enum MembershipType {
        UNKNOWN = 0;
        NONE = 1;
        MEMBER = 50;
    }

    string id = 1;
    string game_id = 2;
    string user_id = 3;
    MembershipType type = 4;
    Game game = 5;
    User user = 6;
}

message GameEditEntry {
    oneof game {
        OptionalString existing_game_id = 1;
        Game new_game = 2;
        Game edited_game = 3;
    }
}

message OptionalGames {
    repeated GameEditEntry games = 1;
}

// Game Record is an entry in the games table
message GameRecord {
    string id = 1;
    string user_id = 2;
    string name = 3;
    string title_image = 4;
    repeated string background_images = 5;
    string short_name = 6;
}

message GameListPage {
    repeated GameListEntry games = 1;
    int32 page_number = 2;
    int32 page_size = 3;
}

message GameListEntry {
    Game game = 1;
    repeated GameChannelListEntry channels = 2;  // this contains only the first X channels for that game
    int32 online_user_count = 3;
    int32 user_count = 4;
    bool has_more_channels = 5;
    int32 channel_count = 6;
}

message GameChannelListPage {
    Game game = 1;
    repeated GameChannelListEntry channels = 2;
    int32 page_number = 3;
    int32 page_size = 4;
    bool has_more_channels = 5;
}

message GameChannelListEntry {
    Channel channel = 1;
    int32 online_user_count = 2;
    int32 user_count = 3;
}

// Badges

message Badge {
    string id = 1;
    string title = 2;
    string image = 3;
    int32 priority = 4;
}

message UserBadge {
    string id = 1;
    string badge_id = 2;
    string user_id = 3;
    string title = 4;
    string image = 5;
    int32 priority = 6;
    int64 timestamp = 7;
}

// Tags

message Tag {
    string name = 1;
}

// Profile Update
message BiographyUpdateData {
    OptionalString introduction = 1;
    OptionalString languages = 2;
}
