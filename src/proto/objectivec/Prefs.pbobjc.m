// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prefs.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Prefs.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PrefsRoot

@implementation PrefsRoot

@end

#pragma mark - PrefsRoot_FileDescriptor

static GPBFileDescriptor *PrefsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PrefNullValue

GPBEnumDescriptor *PrefNullValue_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "NullValue\000";
    static const int32_t values[] = {
        PrefNullValue_NullValue,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PrefNullValue)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PrefNullValue_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PrefNullValue_IsValidValue(int32_t value__) {
  switch (value__) {
    case PrefNullValue_NullValue:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PrefValue

@implementation PrefValue

@dynamic kindOneOfCase;
@dynamic nullValue;
@dynamic numberValue;
@dynamic stringValue;
@dynamic boolValue;

typedef struct PrefValue__storage_ {
  uint32_t _has_storage_[2];
  PrefNullValue nullValue;
  NSString *stringValue;
  double numberValue;
} PrefValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "nullValue",
        .dataTypeSpecific.enumDescFunc = PrefNullValue_EnumDescriptor,
        .number = PrefValue_FieldNumber_NullValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PrefValue__storage_, nullValue),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "numberValue",
        .dataTypeSpecific.className = NULL,
        .number = PrefValue_FieldNumber_NumberValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PrefValue__storage_, numberValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.className = NULL,
        .number = PrefValue_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PrefValue__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.className = NULL,
        .number = PrefValue_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = 0,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefValue class]
                                     rootClass:[PrefsRoot class]
                                          file:PrefsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PrefValue__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PrefValue_NullValue_RawValue(PrefValue *message) {
  GPBDescriptor *descriptor = [PrefValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PrefValue_FieldNumber_NullValue];
  return GPBGetMessageInt32Field(message, field);
}

void SetPrefValue_NullValue_RawValue(PrefValue *message, int32_t value) {
  GPBDescriptor *descriptor = [PrefValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PrefValue_FieldNumber_NullValue];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void PrefValue_ClearKindOneOfCase(PrefValue *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Pref

@implementation Pref

@dynamic domain;
@dynamic keypath;
@dynamic hasValue, value;

typedef struct Pref__storage_ {
  uint32_t _has_storage_[1];
  NSString *domain;
  NSString *keypath;
  PrefValue *value;
} Pref__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = Pref_FieldNumber_Domain,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Pref__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keypath",
        .dataTypeSpecific.className = NULL,
        .number = Pref_FieldNumber_Keypath,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Pref__storage_, keypath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(PrefValue),
        .number = Pref_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Pref__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Pref class]
                                     rootClass:[PrefsRoot class]
                                          file:PrefsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Pref__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrefRecord

@implementation PrefRecord

@dynamic id_p;
@dynamic userId;
@dynamic domain;
@dynamic keypath;
@dynamic hasValue, value;

typedef struct PrefRecord__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *userId;
  NSString *domain;
  NSString *keypath;
  PrefValue *value;
} PrefRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PrefRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PrefRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = PrefRecord_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PrefRecord__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "domain",
        .dataTypeSpecific.className = NULL,
        .number = PrefRecord_FieldNumber_Domain,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PrefRecord__storage_, domain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keypath",
        .dataTypeSpecific.className = NULL,
        .number = PrefRecord_FieldNumber_Keypath,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PrefRecord__storage_, keypath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(PrefValue),
        .number = PrefRecord_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PrefRecord__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefRecord class]
                                     rootClass:[PrefsRoot class]
                                          file:PrefsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PrefRecord__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
