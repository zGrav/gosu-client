// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Contacts.pbobjc.h"
 #import "Wrappers.pbobjc.h"
 #import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContactsRoot

@implementation ContactsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ContactsRoot_FileDescriptor

static GPBFileDescriptor *ContactsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCUserAddContactRequest

@implementation RPCUserAddContactRequest

@dynamic userId;
@dynamic contactId;
@dynamic mutual;

typedef struct RPCUserAddContactRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *contactId;
} RPCUserAddContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserAddContactRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserAddContactRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserAddContactRequest_FieldNumber_ContactId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserAddContactRequest__storage_, contactId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mutual",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserAddContactRequest_FieldNumber_Mutual,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserAddContactRequest class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserAddContactRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserAddContactResponse

@implementation RPCUserAddContactResponse

@dynamic error;

typedef struct RPCUserAddContactResponse__storage_ {
  uint32_t _has_storage_[1];
  UserAddContactResponse_ErrorType error;
} RPCUserAddContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserAddContactResponse_ErrorType_EnumDescriptor,
        .number = RPCUserAddContactResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserAddContactResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserAddContactResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserAddContactResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserAddContactResponse_Error_RawValue(RPCUserAddContactResponse *message) {
  GPBDescriptor *descriptor = [RPCUserAddContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserAddContactResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserAddContactResponse_Error_RawValue(RPCUserAddContactResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserAddContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserAddContactResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserRemoveContactRequest

@implementation RPCUserRemoveContactRequest

@dynamic userId;
@dynamic contactId;

typedef struct RPCUserRemoveContactRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *contactId;
} RPCUserRemoveContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserRemoveContactRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserRemoveContactRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contactId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserRemoveContactRequest_FieldNumber_ContactId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserRemoveContactRequest__storage_, contactId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserRemoveContactRequest class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserRemoveContactRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserRemoveContactResponse

@implementation RPCUserRemoveContactResponse

@dynamic error;

typedef struct RPCUserRemoveContactResponse__storage_ {
  uint32_t _has_storage_[1];
  UserRemoveContactResponse_ErrorType error;
} RPCUserRemoveContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserRemoveContactResponse_ErrorType_EnumDescriptor,
        .number = RPCUserRemoveContactResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserRemoveContactResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserRemoveContactResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserRemoveContactResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserRemoveContactResponse_Error_RawValue(RPCUserRemoveContactResponse *message) {
  GPBDescriptor *descriptor = [RPCUserRemoveContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserRemoveContactResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserRemoveContactResponse_Error_RawValue(RPCUserRemoveContactResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserRemoveContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserRemoveContactResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserGetContactsRequest

@implementation RPCUserGetContactsRequest

@dynamic userId;

typedef struct RPCUserGetContactsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserGetContactsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserGetContactsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserGetContactsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetContactsRequest class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserGetContactsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetContactsResponse

@implementation RPCUserGetContactsResponse

@dynamic error;
@dynamic contactsArray, contactsArray_Count;

typedef struct RPCUserGetContactsResponse__storage_ {
  uint32_t _has_storage_[1];
  UserGetContactsResponse_ErrorType error;
  NSMutableArray *contactsArray;
} RPCUserGetContactsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserGetContactsResponse_ErrorType_EnumDescriptor,
        .number = RPCUserGetContactsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserGetContactsResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contactsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Contact),
        .number = RPCUserGetContactsResponse_FieldNumber_ContactsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserGetContactsResponse__storage_, contactsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetContactsResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserGetContactsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserGetContactsResponse_Error_RawValue(RPCUserGetContactsResponse *message) {
  GPBDescriptor *descriptor = [RPCUserGetContactsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserGetContactsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserGetContactsResponse_Error_RawValue(RPCUserGetContactsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserGetContactsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserGetContactsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserAddContactRequest

@implementation UserAddContactRequest

@dynamic contactId;
@dynamic mutual;

typedef struct UserAddContactRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *contactId;
} UserAddContactRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contactId",
        .dataTypeSpecific.className = NULL,
        .number = UserAddContactRequest_FieldNumber_ContactId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserAddContactRequest__storage_, contactId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mutual",
        .dataTypeSpecific.className = NULL,
        .number = UserAddContactRequest_FieldNumber_Mutual,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserAddContactRequest class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserAddContactRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserAddContactResponse

@implementation UserAddContactResponse

@dynamic error;

typedef struct UserAddContactResponse__storage_ {
  uint32_t _has_storage_[1];
  UserAddContactResponse_ErrorType error;
} UserAddContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserAddContactResponse_ErrorType_EnumDescriptor,
        .number = UserAddContactResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserAddContactResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserAddContactResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserAddContactResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserAddContactResponse_Error_RawValue(UserAddContactResponse *message) {
  GPBDescriptor *descriptor = [UserAddContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserAddContactResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserAddContactResponse_Error_RawValue(UserAddContactResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserAddContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserAddContactResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserAddContactResponse_ErrorType

GPBEnumDescriptor *UserAddContactResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        UserAddContactResponse_ErrorType_None,
        UserAddContactResponse_ErrorType_UnknownError,
        UserAddContactResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserAddContactResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserAddContactResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserAddContactResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserAddContactResponse_ErrorType_None:
    case UserAddContactResponse_ErrorType_UnknownError:
    case UserAddContactResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserRemoveContactResponse

@implementation UserRemoveContactResponse

@dynamic error;

typedef struct UserRemoveContactResponse__storage_ {
  uint32_t _has_storage_[1];
  UserRemoveContactResponse_ErrorType error;
} UserRemoveContactResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserRemoveContactResponse_ErrorType_EnumDescriptor,
        .number = UserRemoveContactResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserRemoveContactResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserRemoveContactResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserRemoveContactResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserRemoveContactResponse_Error_RawValue(UserRemoveContactResponse *message) {
  GPBDescriptor *descriptor = [UserRemoveContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserRemoveContactResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserRemoveContactResponse_Error_RawValue(UserRemoveContactResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserRemoveContactResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserRemoveContactResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserRemoveContactResponse_ErrorType

GPBEnumDescriptor *UserRemoveContactResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        UserRemoveContactResponse_ErrorType_None,
        UserRemoveContactResponse_ErrorType_UnknownError,
        UserRemoveContactResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserRemoveContactResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserRemoveContactResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserRemoveContactResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserRemoveContactResponse_ErrorType_None:
    case UserRemoveContactResponse_ErrorType_UnknownError:
    case UserRemoveContactResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserGetContactsResponse

@implementation UserGetContactsResponse

@dynamic error;
@dynamic contactsArray, contactsArray_Count;

typedef struct UserGetContactsResponse__storage_ {
  uint32_t _has_storage_[1];
  UserGetContactsResponse_ErrorType error;
  NSMutableArray *contactsArray;
} UserGetContactsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = UserGetContactsResponse_ErrorType_EnumDescriptor,
        .number = UserGetContactsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserGetContactsResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contactsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Contact),
        .number = UserGetContactsResponse_FieldNumber_ContactsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserGetContactsResponse__storage_, contactsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserGetContactsResponse class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserGetContactsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserGetContactsResponse_Error_RawValue(UserGetContactsResponse *message) {
  GPBDescriptor *descriptor = [UserGetContactsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserGetContactsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserGetContactsResponse_Error_RawValue(UserGetContactsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserGetContactsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserGetContactsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserGetContactsResponse_ErrorType

GPBEnumDescriptor *UserGetContactsResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000";
    static const int32_t values[] = {
        UserGetContactsResponse_ErrorType_None,
        UserGetContactsResponse_ErrorType_UnknownError,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserGetContactsResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:UserGetContactsResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL UserGetContactsResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserGetContactsResponse_ErrorType_None:
    case UserGetContactsResponse_ErrorType_UnknownError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Contact

@implementation Contact

@dynamic hasUser, user;

typedef struct Contact__storage_ {
  uint32_t _has_storage_[1];
  ChatUser *user;
} Contact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = Contact_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Contact__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Contact class]
                                     rootClass:[ContactsRoot class]
                                          file:ContactsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Contact__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
