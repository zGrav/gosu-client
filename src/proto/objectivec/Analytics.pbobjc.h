// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytics.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

GPB_ENUM_FWD_DECLARE(UserAgent_UserAgentType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - AnalyticsRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface AnalyticsRoot : GPBRootObject
@end

#pragma mark - AnalyticsEvent

typedef GPB_ENUM(AnalyticsEvent_FieldNumber) {
  AnalyticsEvent_FieldNumber_UserId = 1,
  AnalyticsEvent_FieldNumber_AgentId = 2,
  AnalyticsEvent_FieldNumber_Ip = 3,
  AnalyticsEvent_FieldNumber_Action = 4,
  AnalyticsEvent_FieldNumber_Category = 5,
  AnalyticsEvent_FieldNumber_Screen = 6,
  AnalyticsEvent_FieldNumber_Properties = 7,
  AnalyticsEvent_FieldNumber_AgentType = 8,
  AnalyticsEvent_FieldNumber_LocalAgentId = 9,
  AnalyticsEvent_FieldNumber_Label = 10,
  AnalyticsEvent_FieldNumber_Value = 11,
  AnalyticsEvent_FieldNumber_AgentName = 12,
  AnalyticsEvent_FieldNumber_AggregationPropertiesArray = 13,
};

@interface AnalyticsEvent : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *agentId;

/// ip address of agent
@property(nonatomic, readwrite, copy, null_resettable) NSString *ip;

/// The actual action (Signup/ ...)
@property(nonatomic, readwrite, copy, null_resettable) NSString *action;

/// Acquisition / Activation / Retention / Referral
@property(nonatomic, readwrite, copy, null_resettable) NSString *category;

/// Chat / Own Profile / User Profile / ...
@property(nonatomic, readwrite, copy, null_resettable) NSString *screen;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *properties;
/// The number of items in @c properties without causing the array to be created.
@property(nonatomic, readonly) NSUInteger properties_Count;

@property(nonatomic, readwrite) enum UserAgent_UserAgentType agentType;

/// locally generated agent id
@property(nonatomic, readwrite, copy, null_resettable) NSString *localAgentId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *label;

@property(nonatomic, readwrite) int64_t value;

@property(nonatomic, readwrite, copy, null_resettable) NSString *agentName;

/// do not report individual events, but create batches, segmented by these keys from properties
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *aggregationPropertiesArray;
/// The number of items in @c aggregationPropertiesArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger aggregationPropertiesArray_Count;

@end

/// Fetches the raw value of a @c AnalyticsEvent's @c agentType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t AnalyticsEvent_AgentType_RawValue(AnalyticsEvent *message);
/// Sets the raw value of an @c AnalyticsEvent's @c agentType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetAnalyticsEvent_AgentType_RawValue(AnalyticsEvent *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
