// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nsq.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Nsq.pbobjc.h"
#import "Profile.pbobjc.h"
#import "Any.pbobjc.h"
#import "Message.pbobjc.h"
#import "HubBase.pbobjc.h"
#import "Hub.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - NsqRoot

@implementation NsqRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[AnyRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
    [registry addExtensions:[HubRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - NsqRoot_FileDescriptor

static GPBFileDescriptor *NsqRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GroupUpdateWrapper

@implementation GroupUpdateWrapper

@dynamic hasGroup, group;
@dynamic action;

typedef struct GroupUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  GroupUpdateWrapper_Action action;
  Group *group;
} GroupUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .number = GroupUpdateWrapper_FieldNumber_Group,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupUpdateWrapper__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = GroupUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = GroupUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = GroupUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = GroupUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupUpdateWrapper_Action_RawValue(GroupUpdateWrapper *message) {
  GPBDescriptor *descriptor = [GroupUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupUpdateWrapper_Action_RawValue(GroupUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GroupUpdateWrapper_Action

GPBEnumDescriptor *GroupUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = GroupUpdateWrapper_Action_Unknown },
      { .name = "Create", .number = GroupUpdateWrapper_Action_Create },
      { .name = "Update", .number = GroupUpdateWrapper_Action_Update },
      { .name = "Delete", .number = GroupUpdateWrapper_Action_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:GroupUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL GroupUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupUpdateWrapper_Action_Unknown:
    case GroupUpdateWrapper_Action_Create:
    case GroupUpdateWrapper_Action_Update:
    case GroupUpdateWrapper_Action_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ContentUpdateWrapper

@implementation ContentUpdateWrapper

@dynamic hasData_p, data_p;
@dynamic operation;
@dynamic timestamp;
@dynamic entryId;

typedef struct ContentUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  ContentUpdateWrapper_Operation operation;
  Any *data_p;
  NSString *entryId;
  int64_t timestamp;
} ContentUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .number = ContentUpdateWrapper_FieldNumber_Data_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ContentUpdateWrapper__storage_, data_p),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Any),
        .fieldOptions = NULL,
      },
      {
        .name = "operation",
        .number = ContentUpdateWrapper_FieldNumber_Operation,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ContentUpdateWrapper__storage_, operation),
        .defaultValue.valueEnum = ContentUpdateWrapper_Operation_Unknown,
        .dataTypeSpecific.enumDescFunc = ContentUpdateWrapper_Operation_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = ContentUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ContentUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "entryId",
        .number = ContentUpdateWrapper_FieldNumber_EntryId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ContentUpdateWrapper__storage_, entryId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = ContentUpdateWrapper_Operation_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContentUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ContentUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ContentUpdateWrapper_Operation_RawValue(ContentUpdateWrapper *message) {
  GPBDescriptor *descriptor = [ContentUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ContentUpdateWrapper_FieldNumber_Operation];
  return GPBGetMessageInt32Field(message, field);
}

void SetContentUpdateWrapper_Operation_RawValue(ContentUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [ContentUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ContentUpdateWrapper_FieldNumber_Operation];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ContentUpdateWrapper_Operation

GPBEnumDescriptor *ContentUpdateWrapper_Operation_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = ContentUpdateWrapper_Operation_Unknown },
      { .name = "Create", .number = ContentUpdateWrapper_Operation_Create },
      { .name = "Update", .number = ContentUpdateWrapper_Operation_Update },
      { .name = "Delete", .number = ContentUpdateWrapper_Operation_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ContentUpdateWrapper_Operation)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ContentUpdateWrapper_Operation_IsValidValue];
  }
  return descriptor;
}

BOOL ContentUpdateWrapper_Operation_IsValidValue(int32_t value__) {
  switch (value__) {
    case ContentUpdateWrapper_Operation_Unknown:
    case ContentUpdateWrapper_Operation_Create:
    case ContentUpdateWrapper_Operation_Update:
    case ContentUpdateWrapper_Operation_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MessageDeletedEvent

@implementation MessageDeletedEvent

@dynamic messageId;
@dynamic channelId;
@dynamic hasMessageBatch, messageBatch;
@dynamic hasMessagePayload, messagePayload;

typedef struct MessageDeletedEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageId;
  NSString *channelId;
  MessageBatch *messageBatch;
  Any *messagePayload;
} MessageDeletedEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .number = MessageDeletedEvent_FieldNumber_MessageId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(MessageDeletedEvent__storage_, messageId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelId",
        .number = MessageDeletedEvent_FieldNumber_ChannelId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(MessageDeletedEvent__storage_, channelId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "messageBatch",
        .number = MessageDeletedEvent_FieldNumber_MessageBatch,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(MessageDeletedEvent__storage_, messageBatch),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MessageBatch),
        .fieldOptions = NULL,
      },
      {
        .name = "messagePayload",
        .number = MessageDeletedEvent_FieldNumber_MessagePayload,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(MessageDeletedEvent__storage_, messagePayload),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Any),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageDeletedEvent class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(MessageDeletedEvent__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserUpdateWrapper

@implementation UserUpdateWrapper

@dynamic timestamp;
@dynamic action;
@dynamic userId;
@dynamic hasUser, user;

typedef struct UserUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  UserUpdateWrapper_Action action;
  NSString *userId;
  User *user;
  int64_t timestamp;
} UserUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = UserUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(UserUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = UserUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = UserUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = UserUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = UserUpdateWrapper_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserUpdateWrapper__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = UserUpdateWrapper_FieldNumber_User,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserUpdateWrapper__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = UserUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserUpdateWrapper_Action_RawValue(UserUpdateWrapper *message) {
  GPBDescriptor *descriptor = [UserUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserUpdateWrapper_Action_RawValue(UserUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [UserUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserUpdateWrapper_Action

GPBEnumDescriptor *UserUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = UserUpdateWrapper_Action_Unknown },
      { .name = "Create", .number = UserUpdateWrapper_Action_Create },
      { .name = "Update", .number = UserUpdateWrapper_Action_Update },
      { .name = "Delete", .number = UserUpdateWrapper_Action_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:UserUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL UserUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserUpdateWrapper_Action_Unknown:
    case UserUpdateWrapper_Action_Create:
    case UserUpdateWrapper_Action_Update:
    case UserUpdateWrapper_Action_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HubMembershipUpdateWrapper

@implementation HubMembershipUpdateWrapper

@dynamic timestamp;
@dynamic action;
@dynamic userId;
@dynamic hubId;
@dynamic hasUser, user;
@dynamic hasHubMembership, hubMembership;
@dynamic hasHubGroupMembership, hubGroupMembership;

typedef struct HubMembershipUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  HubMembershipUpdateWrapper_Action action;
  NSString *userId;
  NSString *hubId;
  User *user;
  HubMembershipRecord *hubMembership;
  GroupMembershipRecord *hubGroupMembership;
  int64_t timestamp;
} HubMembershipUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = HubMembershipUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = HubMembershipUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = HubMembershipUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = HubMembershipUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = HubMembershipUpdateWrapper_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "hubId",
        .number = HubMembershipUpdateWrapper_FieldNumber_HubId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, hubId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = HubMembershipUpdateWrapper_FieldNumber_User,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
      {
        .name = "hubMembership",
        .number = HubMembershipUpdateWrapper_FieldNumber_HubMembership,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, hubMembership),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(HubMembershipRecord),
        .fieldOptions = NULL,
      },
      {
        .name = "hubGroupMembership",
        .number = HubMembershipUpdateWrapper_FieldNumber_HubGroupMembership,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(HubMembershipUpdateWrapper__storage_, hubGroupMembership),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GroupMembershipRecord),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = HubMembershipUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubMembershipUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(HubMembershipUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubMembershipUpdateWrapper_Action_RawValue(HubMembershipUpdateWrapper *message) {
  GPBDescriptor *descriptor = [HubMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembershipUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubMembershipUpdateWrapper_Action_RawValue(HubMembershipUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [HubMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembershipUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubMembershipUpdateWrapper_Action

GPBEnumDescriptor *HubMembershipUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = HubMembershipUpdateWrapper_Action_Unknown },
      { .name = "Create", .number = HubMembershipUpdateWrapper_Action_Create },
      { .name = "Update", .number = HubMembershipUpdateWrapper_Action_Update },
      { .name = "Delete", .number = HubMembershipUpdateWrapper_Action_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubMembershipUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:HubMembershipUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL HubMembershipUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubMembershipUpdateWrapper_Action_Unknown:
    case HubMembershipUpdateWrapper_Action_Create:
    case HubMembershipUpdateWrapper_Action_Update:
    case HubMembershipUpdateWrapper_Action_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChannelMembershipUpdateWrapper

@implementation ChannelMembershipUpdateWrapper

@dynamic timestamp;
@dynamic action;
@dynamic userId;
@dynamic channelId;
@dynamic hasChannelMembership, channelMembership;

typedef struct ChannelMembershipUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  ChannelMembershipUpdateWrapper_Action action;
  NSString *userId;
  NSString *channelId;
  ChannelMembershipRecord *channelMembership;
  int64_t timestamp;
} ChannelMembershipUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = ChannelMembershipUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ChannelMembershipUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = ChannelMembershipUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ChannelMembershipUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = ChannelMembershipUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = ChannelMembershipUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = ChannelMembershipUpdateWrapper_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChannelMembershipUpdateWrapper__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelId",
        .number = ChannelMembershipUpdateWrapper_FieldNumber_ChannelId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChannelMembershipUpdateWrapper__storage_, channelId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelMembership",
        .number = ChannelMembershipUpdateWrapper_FieldNumber_ChannelMembership,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChannelMembershipUpdateWrapper__storage_, channelMembership),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChannelMembershipRecord),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = ChannelMembershipUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelMembershipUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChannelMembershipUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChannelMembershipUpdateWrapper_Action_RawValue(ChannelMembershipUpdateWrapper *message) {
  GPBDescriptor *descriptor = [ChannelMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelMembershipUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetChannelMembershipUpdateWrapper_Action_RawValue(ChannelMembershipUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [ChannelMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelMembershipUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChannelMembershipUpdateWrapper_Action

GPBEnumDescriptor *ChannelMembershipUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = ChannelMembershipUpdateWrapper_Action_Unknown },
      { .name = "Create", .number = ChannelMembershipUpdateWrapper_Action_Create },
      { .name = "Update", .number = ChannelMembershipUpdateWrapper_Action_Update },
      { .name = "Delete", .number = ChannelMembershipUpdateWrapper_Action_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChannelMembershipUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ChannelMembershipUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL ChannelMembershipUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChannelMembershipUpdateWrapper_Action_Unknown:
    case ChannelMembershipUpdateWrapper_Action_Create:
    case ChannelMembershipUpdateWrapper_Action_Update:
    case ChannelMembershipUpdateWrapper_Action_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GroupMembershipUpdateWrapper

@implementation GroupMembershipUpdateWrapper

@dynamic timestamp;
@dynamic action;
@dynamic userId;
@dynamic groupId;
@dynamic hasGroupMembership, groupMembership;
@dynamic linkedHubIdsArray, linkedHubIdsArray_Count;

typedef struct GroupMembershipUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  GroupMembershipUpdateWrapper_Action action;
  NSString *userId;
  NSString *groupId;
  GroupMembershipRecord *groupMembership;
  NSMutableArray *linkedHubIdsArray;
  int64_t timestamp;
} GroupMembershipUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = GroupMembershipUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = GroupMembershipUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = GroupMembershipUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = GroupMembershipUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = GroupMembershipUpdateWrapper_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupId",
        .number = GroupMembershipUpdateWrapper_FieldNumber_GroupId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupMembership",
        .number = GroupMembershipUpdateWrapper_FieldNumber_GroupMembership,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, groupMembership),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GroupMembershipRecord),
        .fieldOptions = NULL,
      },
      {
        .name = "linkedHubIdsArray",
        .number = GroupMembershipUpdateWrapper_FieldNumber_LinkedHubIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupMembershipUpdateWrapper__storage_, linkedHubIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = GroupMembershipUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupMembershipUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupMembershipUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupMembershipUpdateWrapper_Action_RawValue(GroupMembershipUpdateWrapper *message) {
  GPBDescriptor *descriptor = [GroupMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupMembershipUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupMembershipUpdateWrapper_Action_RawValue(GroupMembershipUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupMembershipUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupMembershipUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GroupMembershipUpdateWrapper_Action

GPBEnumDescriptor *GroupMembershipUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = GroupMembershipUpdateWrapper_Action_Unknown },
      { .name = "Create", .number = GroupMembershipUpdateWrapper_Action_Create },
      { .name = "Update", .number = GroupMembershipUpdateWrapper_Action_Update },
      { .name = "Delete", .number = GroupMembershipUpdateWrapper_Action_Delete },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupMembershipUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:GroupMembershipUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL GroupMembershipUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupMembershipUpdateWrapper_Action_Unknown:
    case GroupMembershipUpdateWrapper_Action_Create:
    case GroupMembershipUpdateWrapper_Action_Update:
    case GroupMembershipUpdateWrapper_Action_Delete:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HubLinkUpdateWrapper

@implementation HubLinkUpdateWrapper

@dynamic timestamp;
@dynamic action;
@dynamic hubId;
@dynamic groupId;

typedef struct HubLinkUpdateWrapper__storage_ {
  uint32_t _has_storage_[1];
  HubLinkUpdateWrapper_Action action;
  NSString *hubId;
  NSString *groupId;
  int64_t timestamp;
} HubLinkUpdateWrapper__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = HubLinkUpdateWrapper_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(HubLinkUpdateWrapper__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = HubLinkUpdateWrapper_FieldNumber_Action,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(HubLinkUpdateWrapper__storage_, action),
        .defaultValue.valueEnum = HubLinkUpdateWrapper_Action_Unknown,
        .dataTypeSpecific.enumDescFunc = HubLinkUpdateWrapper_Action_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "hubId",
        .number = HubLinkUpdateWrapper_FieldNumber_HubId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HubLinkUpdateWrapper__storage_, hubId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupId",
        .number = HubLinkUpdateWrapper_FieldNumber_GroupId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(HubLinkUpdateWrapper__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = HubLinkUpdateWrapper_Action_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubLinkUpdateWrapper class]
                                     rootClass:[NsqRoot class]
                                          file:NsqRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(HubLinkUpdateWrapper__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubLinkUpdateWrapper_Action_RawValue(HubLinkUpdateWrapper *message) {
  GPBDescriptor *descriptor = [HubLinkUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLinkUpdateWrapper_FieldNumber_Action];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubLinkUpdateWrapper_Action_RawValue(HubLinkUpdateWrapper *message, int32_t value) {
  GPBDescriptor *descriptor = [HubLinkUpdateWrapper descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLinkUpdateWrapper_FieldNumber_Action];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubLinkUpdateWrapper_Action

GPBEnumDescriptor *HubLinkUpdateWrapper_Action_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = HubLinkUpdateWrapper_Action_Unknown },
      { .name = "Link", .number = HubLinkUpdateWrapper_Action_Link },
      { .name = "Unlink", .number = HubLinkUpdateWrapper_Action_Unlink },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubLinkUpdateWrapper_Action)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:HubLinkUpdateWrapper_Action_IsValidValue];
  }
  return descriptor;
}

BOOL HubLinkUpdateWrapper_Action_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubLinkUpdateWrapper_Action_Unknown:
    case HubLinkUpdateWrapper_Action_Link:
    case HubLinkUpdateWrapper_Action_Unlink:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
