// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Rpc.pbobjc.h"
#import "Api.pbobjc.h"
#import "Profile.pbobjc.h"
#import "ProfileUserinfo.pbobjc.h"
#import "Optional.pbobjc.h"
#import "Prefs.pbobjc.h"
#import "Wrappers.pbobjc.h"
#import "HubBase.pbobjc.h"
#import "Hub.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - RpcRoot

@implementation RpcRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ApiRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[ProfileUserinfoRoot extensionRegistry]];
    [registry addExtensions:[OptionalRoot extensionRegistry]];
    [registry addExtensions:[PrefsRoot extensionRegistry]];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
    [registry addExtensions:[HubRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - RpcRoot_FileDescriptor

static GPBFileDescriptor *RpcRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCGenericResponse

@implementation RPCGenericResponse

@dynamic success;

typedef struct RPCGenericResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCGenericResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCGenericResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGenericResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGenericResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGenericResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCCreateRelationRequest

@implementation RPCCreateRelationRequest

@dynamic userId;
@dynamic type;

typedef struct RPCCreateRelationRequest__storage_ {
  uint32_t _has_storage_[1];
  ProprietaryUserGroupRecord_Type type;
  NSString *userId;
} RPCCreateRelationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCCreateRelationRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCCreateRelationRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = RPCCreateRelationRequest_FieldNumber_Type,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCCreateRelationRequest__storage_, type),
        .defaultValue.valueEnum = ProprietaryUserGroupRecord_Type_Unknown,
        .dataTypeSpecific.enumDescFunc = ProprietaryUserGroupRecord_Type_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCCreateRelationRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCCreateRelationRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCCreateRelationRequest_Type_RawValue(RPCCreateRelationRequest *message) {
  GPBDescriptor *descriptor = [RPCCreateRelationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCCreateRelationRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCCreateRelationRequest_Type_RawValue(RPCCreateRelationRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCCreateRelationRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCCreateRelationRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCCreateRelationResponse

@implementation RPCCreateRelationResponse


typedef struct RPCCreateRelationResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCCreateRelationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCCreateRelationResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCCreateRelationResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCAuthLoginRequest

@implementation RPCAuthLoginRequest

@dynamic username;
@dynamic password;
@dynamic agentId;
@dynamic agentName;
@dynamic agentType;
@dynamic clientIp;
@dynamic currentUserId;

typedef struct RPCAuthLoginRequest__storage_ {
  uint32_t _has_storage_[1];
  UserAgent_UserAgentType agentType;
  NSString *username;
  NSString *password;
  NSString *agentId;
  NSString *agentName;
  NSString *clientIp;
  NSString *currentUserId;
} RPCAuthLoginRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = RPCAuthLoginRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = RPCAuthLoginRequest_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = RPCAuthLoginRequest_FieldNumber_AgentId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentName",
        .number = RPCAuthLoginRequest_FieldNumber_AgentName,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, agentName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentType",
        .number = RPCAuthLoginRequest_FieldNumber_AgentType,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCAuthLoginRequest__storage_, agentType),
        .defaultValue.valueEnum = UserAgent_UserAgentType_Unknown,
        .dataTypeSpecific.enumDescFunc = UserAgent_UserAgentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "clientIp",
        .number = RPCAuthLoginRequest_FieldNumber_ClientIp,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, clientIp),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "currentUserId",
        .number = RPCAuthLoginRequest_FieldNumber_CurrentUserId,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthLoginRequest__storage_, currentUserId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCAuthLoginRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCAuthLoginRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCAuthLoginRequest_AgentType_RawValue(RPCAuthLoginRequest *message) {
  GPBDescriptor *descriptor = [RPCAuthLoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCAuthLoginRequest_FieldNumber_AgentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCAuthLoginRequest_AgentType_RawValue(RPCAuthLoginRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCAuthLoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCAuthLoginRequest_FieldNumber_AgentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCAuthRegisterRequest

@implementation RPCAuthRegisterRequest

@dynamic username;
@dynamic password;
@dynamic email;
@dynamic inviteCode;
@dynamic newsletter;
@dynamic termsOfService;
@dynamic gosuInviteCode;
@dynamic agentId;
@dynamic agentName;
@dynamic agentType;
@dynamic clientIp;
@dynamic languages;
@dynamic ephemeral;
@dynamic joinCommunitiesArray, joinCommunitiesArray_Count;
@dynamic autoGenerateNameSuffix;

typedef struct RPCAuthRegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL newsletter;
  BOOL termsOfService;
  BOOL ephemeral;
  BOOL autoGenerateNameSuffix;
  UserAgent_UserAgentType agentType;
  NSString *username;
  NSString *password;
  NSString *email;
  NSString *inviteCode;
  NSString *gosuInviteCode;
  NSString *agentId;
  NSString *agentName;
  NSString *clientIp;
  NSString *languages;
  NSMutableArray *joinCommunitiesArray;
} RPCAuthRegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = RPCAuthRegisterRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = RPCAuthRegisterRequest_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCAuthRegisterRequest_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviteCode",
        .number = RPCAuthRegisterRequest_FieldNumber_InviteCode,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = RPCAuthRegisterRequest_FieldNumber_Newsletter,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, newsletter),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "termsOfService",
        .number = RPCAuthRegisterRequest_FieldNumber_TermsOfService,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, termsOfService),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gosuInviteCode",
        .number = RPCAuthRegisterRequest_FieldNumber_GosuInviteCode,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, gosuInviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = RPCAuthRegisterRequest_FieldNumber_AgentId,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentName",
        .number = RPCAuthRegisterRequest_FieldNumber_AgentName,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, agentName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentType",
        .number = RPCAuthRegisterRequest_FieldNumber_AgentType,
        .hasIndex = 9,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, agentType),
        .defaultValue.valueEnum = UserAgent_UserAgentType_Unknown,
        .dataTypeSpecific.enumDescFunc = UserAgent_UserAgentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "clientIp",
        .number = RPCAuthRegisterRequest_FieldNumber_ClientIp,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, clientIp),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "languages",
        .number = RPCAuthRegisterRequest_FieldNumber_Languages,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, languages),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ephemeral",
        .number = RPCAuthRegisterRequest_FieldNumber_Ephemeral,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, ephemeral),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "joinCommunitiesArray",
        .number = RPCAuthRegisterRequest_FieldNumber_JoinCommunitiesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, joinCommunitiesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "autoGenerateNameSuffix",
        .number = RPCAuthRegisterRequest_FieldNumber_AutoGenerateNameSuffix,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCAuthRegisterRequest__storage_, autoGenerateNameSuffix),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCAuthRegisterRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCAuthRegisterRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCAuthRegisterRequest_AgentType_RawValue(RPCAuthRegisterRequest *message) {
  GPBDescriptor *descriptor = [RPCAuthRegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCAuthRegisterRequest_FieldNumber_AgentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCAuthRegisterRequest_AgentType_RawValue(RPCAuthRegisterRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCAuthRegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCAuthRegisterRequest_FieldNumber_AgentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserConvertEphemeralUserRequest

@implementation RPCUserConvertEphemeralUserRequest

@dynamic userId;
@dynamic agentId;
@dynamic username;
@dynamic emailAddress;
@dynamic password;
@dynamic newsletter;
@dynamic termsOfService;

typedef struct RPCUserConvertEphemeralUserRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL newsletter;
  BOOL termsOfService;
  NSString *userId;
  NSString *agentId;
  NSString *username;
  NSString *emailAddress;
  NSString *password;
} RPCUserConvertEphemeralUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_AgentId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "username",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_Username,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "emailAddress",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_EmailAddress,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, emailAddress),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_Password,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_Newsletter,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, newsletter),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "termsOfService",
        .number = RPCUserConvertEphemeralUserRequest_FieldNumber_TermsOfService,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserConvertEphemeralUserRequest__storage_, termsOfService),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserConvertEphemeralUserRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserConvertEphemeralUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserConvertEphemeralUserResponse

@implementation RPCUserConvertEphemeralUserResponse

@dynamic error;
@dynamic token;
@dynamic hasUser, user;

typedef struct RPCUserConvertEphemeralUserResponse__storage_ {
  uint32_t _has_storage_[1];
  UserConvertEphemeralUserResponse_ErrorType error;
  NSString *token;
  User *user;
} RPCUserConvertEphemeralUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserConvertEphemeralUserResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserConvertEphemeralUserResponse__storage_, error),
        .defaultValue.valueEnum = UserConvertEphemeralUserResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserConvertEphemeralUserResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = RPCUserConvertEphemeralUserResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserConvertEphemeralUserResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = RPCUserConvertEphemeralUserResponse_FieldNumber_User,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserConvertEphemeralUserResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserConvertEphemeralUserResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserConvertEphemeralUserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserConvertEphemeralUserResponse_Error_RawValue(RPCUserConvertEphemeralUserResponse *message) {
  GPBDescriptor *descriptor = [RPCUserConvertEphemeralUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserConvertEphemeralUserResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserConvertEphemeralUserResponse_Error_RawValue(RPCUserConvertEphemeralUserResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserConvertEphemeralUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserConvertEphemeralUserResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCProfileGetRequest

@implementation RPCProfileGetRequest

@dynamic userId;

typedef struct RPCProfileGetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCProfileGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCProfileGetRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCProfileGetRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCProfileGetRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCProfileGetRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserUpdateRequest

@implementation RPCUserUpdateRequest

@dynamic userId;
@dynamic hasEmail, email;
@dynamic hasDisplayName, displayName;
@dynamic hasAvatarImage, avatarImage;
@dynamic status;
@dynamic hasNewsletter, newsletter;
@dynamic hasGames, games;
@dynamic hasBackgroundImage, backgroundImage;
@dynamic hasTitleImage, titleImage;
@dynamic hasBiography, biography;

typedef struct RPCUserUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  User_UserStatus status;
  NSString *userId;
  OptionalString *email;
  OptionalString *displayName;
  OptionalString *avatarImage;
  OptionalBool *newsletter;
  OptionalGames *games;
  OptionalString *backgroundImage;
  OptionalString *titleImage;
  BiographyUpdateData *biography;
} RPCUserUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserUpdateRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdateRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCUserUpdateRequest_FieldNumber_Email,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, email),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "displayName",
        .number = RPCUserUpdateRequest_FieldNumber_DisplayName,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, displayName),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "avatarImage",
        .number = RPCUserUpdateRequest_FieldNumber_AvatarImage,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, avatarImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "status",
        .number = RPCUserUpdateRequest_FieldNumber_Status,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserUpdateRequest__storage_, status),
        .defaultValue.valueEnum = User_UserStatus_Unknown,
        .dataTypeSpecific.enumDescFunc = User_UserStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = RPCUserUpdateRequest_FieldNumber_Newsletter,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, newsletter),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalBool),
        .fieldOptions = NULL,
      },
      {
        .name = "games",
        .number = RPCUserUpdateRequest_FieldNumber_Games,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, games),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalGames),
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = RPCUserUpdateRequest_FieldNumber_BackgroundImage,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, backgroundImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = RPCUserUpdateRequest_FieldNumber_TitleImage,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, titleImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "biography",
        .number = RPCUserUpdateRequest_FieldNumber_Biography,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateRequest__storage_, biography),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(BiographyUpdateData),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdateRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdateRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserUpdateRequest_Status_RawValue(RPCUserUpdateRequest *message) {
  GPBDescriptor *descriptor = [RPCUserUpdateRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateRequest_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserUpdateRequest_Status_RawValue(RPCUserUpdateRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserUpdateRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateRequest_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserUpdateResponse

@implementation RPCUserUpdateResponse

@dynamic error;
@dynamic hasUser, user;

typedef struct RPCUserUpdateResponse__storage_ {
  uint32_t _has_storage_[1];
  AuthRegisterResponse_ErrorType error;
  User *user;
} RPCUserUpdateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserUpdateResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserUpdateResponse__storage_, error),
        .defaultValue.valueEnum = AuthRegisterResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = AuthRegisterResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = RPCUserUpdateResponse_FieldNumber_User,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserUpdateResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdateResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdateResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserUpdateResponse_Error_RawValue(RPCUserUpdateResponse *message) {
  GPBDescriptor *descriptor = [RPCUserUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserUpdateResponse_Error_RawValue(RPCUserUpdateResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserGetFriendsRequest

@implementation RPCUserGetFriendsRequest

@dynamic userId;

typedef struct RPCUserGetFriendsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserGetFriendsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserGetFriendsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetFriendsRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetFriendsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetFriendsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetFriendsResponse

@implementation RPCUserGetFriendsResponse

@dynamic friendsArray, friendsArray_Count;
@dynamic sentFriendRequestsArray, sentFriendRequestsArray_Count;
@dynamic receivedFriendRequestsArray, receivedFriendRequestsArray_Count;

typedef struct RPCUserGetFriendsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *friendsArray;
  NSMutableArray *sentFriendRequestsArray;
  NSMutableArray *receivedFriendRequestsArray;
} RPCUserGetFriendsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendsArray",
        .number = RPCUserGetFriendsResponse_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetFriendsResponse__storage_, friendsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .fieldOptions = NULL,
      },
      {
        .name = "sentFriendRequestsArray",
        .number = RPCUserGetFriendsResponse_FieldNumber_SentFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetFriendsResponse__storage_, sentFriendRequestsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .fieldOptions = NULL,
      },
      {
        .name = "receivedFriendRequestsArray",
        .number = RPCUserGetFriendsResponse_FieldNumber_ReceivedFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetFriendsResponse__storage_, receivedFriendRequestsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\002\000sentFriendRequests\000\003\000receivedFriendRequests\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetFriendsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetFriendsResponse__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserFriendshipRequest

@implementation RPCUserFriendshipRequest

@dynamic sourceUser;
@dynamic targetUser;
@dynamic message;

typedef struct RPCUserFriendshipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *sourceUser;
  NSString *targetUser;
  NSString *message;
} RPCUserFriendshipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sourceUser",
        .number = RPCUserFriendshipRequest_FieldNumber_SourceUser,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserFriendshipRequest__storage_, sourceUser),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "targetUser",
        .number = RPCUserFriendshipRequest_FieldNumber_TargetUser,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserFriendshipRequest__storage_, targetUser),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "message",
        .number = RPCUserFriendshipRequest_FieldNumber_Message,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserFriendshipRequest__storage_, message),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserFriendshipRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserFriendshipRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserFriendshipRequestResponse

@implementation RPCUserFriendshipRequestResponse

@dynamic success;
@dynamic status;

typedef struct RPCUserFriendshipRequestResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
  ProfileRequestFriendshipResponse_FriendshipStatus status;
} RPCUserFriendshipRequestResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserFriendshipRequestResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserFriendshipRequestResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "status",
        .number = RPCUserFriendshipRequestResponse_FieldNumber_Status,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserFriendshipRequestResponse__storage_, status),
        .defaultValue.valueEnum = ProfileRequestFriendshipResponse_FriendshipStatus_None,
        .dataTypeSpecific.enumDescFunc = ProfileRequestFriendshipResponse_FriendshipStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserFriendshipRequestResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserFriendshipRequestResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserFriendshipRequestResponse_Status_RawValue(RPCUserFriendshipRequestResponse *message) {
  GPBDescriptor *descriptor = [RPCUserFriendshipRequestResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserFriendshipRequestResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserFriendshipRequestResponse_Status_RawValue(RPCUserFriendshipRequestResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserFriendshipRequestResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserFriendshipRequestResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserGetUserRequest

@implementation RPCUserGetUserRequest

@dynamic userId;
@dynamic username;
@dynamic email;
@dynamic ignoreChildren;
@dynamic normalizedUsername;

typedef struct RPCUserGetUserRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL ignoreChildren;
  NSString *userId;
  NSString *username;
  NSString *email;
  NSString *normalizedUsername;
} RPCUserGetUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserGetUserRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "username",
        .number = RPCUserGetUserRequest_FieldNumber_Username,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCUserGetUserRequest_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ignoreChildren",
        .number = RPCUserGetUserRequest_FieldNumber_IgnoreChildren,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserGetUserRequest__storage_, ignoreChildren),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "normalizedUsername",
        .number = RPCUserGetUserRequest_FieldNumber_NormalizedUsername,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserRequest__storage_, normalizedUsername),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetUserRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserValidateUsernameRequest

@implementation RPCUserValidateUsernameRequest

@dynamic username;

typedef struct RPCUserValidateUsernameRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
} RPCUserValidateUsernameRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = RPCUserValidateUsernameRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserValidateUsernameRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserValidateUsernameRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserValidateUsernameRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserValidateUsernameResponse

@implementation RPCUserValidateUsernameResponse

@dynamic error;

typedef struct RPCUserValidateUsernameResponse__storage_ {
  uint32_t _has_storage_[1];
  AuthRegisterResponse_ErrorType error;
} RPCUserValidateUsernameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserValidateUsernameResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserValidateUsernameResponse__storage_, error),
        .defaultValue.valueEnum = AuthRegisterResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = AuthRegisterResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserValidateUsernameResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserValidateUsernameResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserValidateUsernameResponse_Error_RawValue(RPCUserValidateUsernameResponse *message) {
  GPBDescriptor *descriptor = [RPCUserValidateUsernameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserValidateUsernameResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserValidateUsernameResponse_Error_RawValue(RPCUserValidateUsernameResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserValidateUsernameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserValidateUsernameResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserGetUserResponse

@implementation RPCUserGetUserResponse

@dynamic userExists;
@dynamic hasUser, user;

typedef struct RPCUserGetUserResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL userExists;
  User *user;
} RPCUserGetUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userExists",
        .number = RPCUserGetUserResponse_FieldNumber_UserExists,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserGetUserResponse__storage_, userExists),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = RPCUserGetUserResponse_FieldNumber_User,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetUserResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetUserResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetUserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetUserAgentRequest

@implementation RPCUserGetUserAgentRequest

@dynamic agentId;
@dynamic populateUser;
@dynamic userId;

typedef struct RPCUserGetUserAgentRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL populateUser;
  NSString *agentId;
  NSString *userId;
} RPCUserGetUserAgentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agentId",
        .number = RPCUserGetUserAgentRequest_FieldNumber_AgentId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserAgentRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "populateUser",
        .number = RPCUserGetUserAgentRequest_FieldNumber_PopulateUser,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserGetUserAgentRequest__storage_, populateUser),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCUserGetUserAgentRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetUserAgentRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetUserAgentRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetUserAgentRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetUserAgentResponse

@implementation RPCUserGetUserAgentResponse

@dynamic agentExists;
@dynamic hasAgent, agent;

typedef struct RPCUserGetUserAgentResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL agentExists;
  UserAgent *agent;
} RPCUserGetUserAgentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "agentExists",
        .number = RPCUserGetUserAgentResponse_FieldNumber_AgentExists,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserGetUserAgentResponse__storage_, agentExists),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agent",
        .number = RPCUserGetUserAgentResponse_FieldNumber_Agent,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetUserAgentResponse__storage_, agent),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserAgent),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetUserAgentResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetUserAgentResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetOwnProfileRequest

@implementation RPCUserGetOwnProfileRequest

@dynamic userId;
@dynamic includeHubs;

typedef struct RPCUserGetOwnProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL includeHubs;
  NSString *userId;
} RPCUserGetOwnProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserGetOwnProfileRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetOwnProfileRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "includeHubs",
        .number = RPCUserGetOwnProfileRequest_FieldNumber_IncludeHubs,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserGetOwnProfileRequest__storage_, includeHubs),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetOwnProfileRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetOwnProfileRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetOwnProfileResponse

@implementation RPCUserGetOwnProfileResponse

@dynamic hasUserInfo, userInfo;
@dynamic error;

typedef struct RPCUserGetOwnProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCUserGetOwnProfileResponse_ErrorType error;
  UserInfo *userInfo;
} RPCUserGetOwnProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .number = RPCUserGetOwnProfileResponse_FieldNumber_UserInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetOwnProfileResponse__storage_, userInfo),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .fieldOptions = NULL,
      },
      {
        .name = "error",
        .number = RPCUserGetOwnProfileResponse_FieldNumber_Error,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserGetOwnProfileResponse__storage_, error),
        .defaultValue.valueEnum = RPCUserGetOwnProfileResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCUserGetOwnProfileResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = RPCUserGetOwnProfileResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetOwnProfileResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetOwnProfileResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserGetOwnProfileResponse_Error_RawValue(RPCUserGetOwnProfileResponse *message) {
  GPBDescriptor *descriptor = [RPCUserGetOwnProfileResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserGetOwnProfileResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserGetOwnProfileResponse_Error_RawValue(RPCUserGetOwnProfileResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserGetOwnProfileResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserGetOwnProfileResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCUserGetOwnProfileResponse_ErrorType

GPBEnumDescriptor *RPCUserGetOwnProfileResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = RPCUserGetOwnProfileResponse_ErrorType_None },
      { .name = "BadRequest", .number = RPCUserGetOwnProfileResponse_ErrorType_BadRequest },
      { .name = "UnknownError", .number = RPCUserGetOwnProfileResponse_ErrorType_UnknownError },
      { .name = "NotFound", .number = RPCUserGetOwnProfileResponse_ErrorType_NotFound },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCUserGetOwnProfileResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:RPCUserGetOwnProfileResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL RPCUserGetOwnProfileResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCUserGetOwnProfileResponse_ErrorType_None:
    case RPCUserGetOwnProfileResponse_ErrorType_BadRequest:
    case RPCUserGetOwnProfileResponse_ErrorType_UnknownError:
    case RPCUserGetOwnProfileResponse_ErrorType_NotFound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCUserGetOtherProfileRequest

@implementation RPCUserGetOtherProfileRequest

@dynamic userId;

typedef struct RPCUserGetOtherProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserGetOtherProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserGetOtherProfileRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserGetOtherProfileRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetOtherProfileRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetOtherProfileRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserGetOtherProfileResponse

@implementation RPCUserGetOtherProfileResponse

@dynamic hasUserInfo, userInfo;

typedef struct RPCUserGetOtherProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  ChatUserInfo *userInfo;
} RPCUserGetOtherProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .number = RPCUserGetOtherProfileResponse_FieldNumber_UserInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCUserGetOtherProfileResponse__storage_, userInfo),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUserInfo),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserGetOtherProfileResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserGetOtherProfileResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserActivationEmailRequest

@implementation RPCUserActivationEmailRequest

@dynamic userId;

typedef struct RPCUserActivationEmailRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserActivationEmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserActivationEmailRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserActivationEmailRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserActivationEmailRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserActivationEmailRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserActivationEmailResponse

@implementation RPCUserActivationEmailResponse

@dynamic success;

typedef struct RPCUserActivationEmailResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCUserActivationEmailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserActivationEmailResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserActivationEmailResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserActivationEmailResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserActivationEmailResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserExecuteActivationRequest

@implementation RPCUserExecuteActivationRequest

@dynamic secret;

typedef struct RPCUserExecuteActivationRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *secret;
} RPCUserExecuteActivationRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "secret",
        .number = RPCUserExecuteActivationRequest_FieldNumber_Secret,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserExecuteActivationRequest__storage_, secret),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserExecuteActivationRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserExecuteActivationRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserExecuteActivationResponse

@implementation RPCUserExecuteActivationResponse

@dynamic success;

typedef struct RPCUserExecuteActivationResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCUserExecuteActivationResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserExecuteActivationResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserExecuteActivationResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserExecuteActivationResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserExecuteActivationResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserPasswordResetEmailRequest

@implementation RPCUserPasswordResetEmailRequest

@dynamic email;

typedef struct RPCUserPasswordResetEmailRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} RPCUserPasswordResetEmailRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .number = RPCUserPasswordResetEmailRequest_FieldNumber_Email,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserPasswordResetEmailRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserPasswordResetEmailRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserPasswordResetEmailRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserPasswordResetEmailResponse

@implementation RPCUserPasswordResetEmailResponse

@dynamic success;

typedef struct RPCUserPasswordResetEmailResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCUserPasswordResetEmailResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserPasswordResetEmailResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserPasswordResetEmailResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserPasswordResetEmailResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserPasswordResetEmailResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserExecutePasswordResetRequest

@implementation RPCUserExecutePasswordResetRequest

@dynamic secret;
@dynamic newPassword;

typedef struct RPCUserExecutePasswordResetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *secret;
  NSString *newPassword;
} RPCUserExecutePasswordResetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "secret",
        .number = RPCUserExecutePasswordResetRequest_FieldNumber_Secret,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserExecutePasswordResetRequest__storage_, secret),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newPassword",
        .number = RPCUserExecutePasswordResetRequest_FieldNumber_NewPassword,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserExecutePasswordResetRequest__storage_, newPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserExecutePasswordResetRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserExecutePasswordResetRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserExecutePasswordResetResponse

@implementation RPCUserExecutePasswordResetResponse

@dynamic success;

typedef struct RPCUserExecutePasswordResetResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCUserExecutePasswordResetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserExecutePasswordResetResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserExecutePasswordResetResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserExecutePasswordResetResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserExecutePasswordResetResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserUpdatePasswordRequest

@implementation RPCUserUpdatePasswordRequest

@dynamic userId;
@dynamic oldPassword;
@dynamic newPassword;

typedef struct RPCUserUpdatePasswordRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *oldPassword;
  NSString *newPassword;
} RPCUserUpdatePasswordRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserUpdatePasswordRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdatePasswordRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "oldPassword",
        .number = RPCUserUpdatePasswordRequest_FieldNumber_OldPassword,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdatePasswordRequest__storage_, oldPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newPassword",
        .number = RPCUserUpdatePasswordRequest_FieldNumber_NewPassword,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdatePasswordRequest__storage_, newPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdatePasswordRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdatePasswordRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserUpdatePasswordResponse

@implementation RPCUserUpdatePasswordResponse

@dynamic success;

typedef struct RPCUserUpdatePasswordResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} RPCUserUpdatePasswordResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCUserUpdatePasswordResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCUserUpdatePasswordResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdatePasswordResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdatePasswordResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserSetChannelRoleRequest

@implementation RPCUserSetChannelRoleRequest

@dynamic userId;
@dynamic channelId;
@dynamic membershipType;

typedef struct RPCUserSetChannelRoleRequest__storage_ {
  uint32_t _has_storage_[1];
  ChannelMembershipRecord_MembershipType membershipType;
  NSString *userId;
  NSString *channelId;
} RPCUserSetChannelRoleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserSetChannelRoleRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserSetChannelRoleRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelId",
        .number = RPCUserSetChannelRoleRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserSetChannelRoleRequest__storage_, channelId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membershipType",
        .number = RPCUserSetChannelRoleRequest_FieldNumber_MembershipType,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserSetChannelRoleRequest__storage_, membershipType),
        .defaultValue.valueEnum = ChannelMembershipRecord_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = ChannelMembershipRecord_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserSetChannelRoleRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserSetChannelRoleRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserSetChannelRoleRequest_MembershipType_RawValue(RPCUserSetChannelRoleRequest *message) {
  GPBDescriptor *descriptor = [RPCUserSetChannelRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetChannelRoleRequest_FieldNumber_MembershipType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserSetChannelRoleRequest_MembershipType_RawValue(RPCUserSetChannelRoleRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserSetChannelRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetChannelRoleRequest_FieldNumber_MembershipType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserSetChannelRoleResponse

@implementation RPCUserSetChannelRoleResponse

@dynamic error;

typedef struct RPCUserSetChannelRoleResponse__storage_ {
  uint32_t _has_storage_[1];
  UserSetChannelRoleResponse_ErrorType error;
} RPCUserSetChannelRoleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserSetChannelRoleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserSetChannelRoleResponse__storage_, error),
        .defaultValue.valueEnum = UserSetChannelRoleResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserSetChannelRoleResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserSetChannelRoleResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserSetChannelRoleResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserSetChannelRoleResponse_Error_RawValue(RPCUserSetChannelRoleResponse *message) {
  GPBDescriptor *descriptor = [RPCUserSetChannelRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetChannelRoleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserSetChannelRoleResponse_Error_RawValue(RPCUserSetChannelRoleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserSetChannelRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetChannelRoleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserSetGroupRoleRequest

@implementation RPCUserSetGroupRoleRequest

@dynamic userId;
@dynamic groupId;
@dynamic membershipType;

typedef struct RPCUserSetGroupRoleRequest__storage_ {
  uint32_t _has_storage_[1];
  GroupMembershipRecord_MembershipType membershipType;
  NSString *userId;
  NSString *groupId;
} RPCUserSetGroupRoleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserSetGroupRoleRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserSetGroupRoleRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupId",
        .number = RPCUserSetGroupRoleRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserSetGroupRoleRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membershipType",
        .number = RPCUserSetGroupRoleRequest_FieldNumber_MembershipType,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserSetGroupRoleRequest__storage_, membershipType),
        .defaultValue.valueEnum = GroupMembershipRecord_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = GroupMembershipRecord_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserSetGroupRoleRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserSetGroupRoleRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserSetGroupRoleRequest_MembershipType_RawValue(RPCUserSetGroupRoleRequest *message) {
  GPBDescriptor *descriptor = [RPCUserSetGroupRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetGroupRoleRequest_FieldNumber_MembershipType];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserSetGroupRoleRequest_MembershipType_RawValue(RPCUserSetGroupRoleRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserSetGroupRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetGroupRoleRequest_FieldNumber_MembershipType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserSetGroupRoleResponse

@implementation RPCUserSetGroupRoleResponse

@dynamic error;

typedef struct RPCUserSetGroupRoleResponse__storage_ {
  uint32_t _has_storage_[1];
  UserSetGroupRoleResponse_ErrorType error;
} RPCUserSetGroupRoleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserSetGroupRoleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserSetGroupRoleResponse__storage_, error),
        .defaultValue.valueEnum = UserSetGroupRoleResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserSetGroupRoleResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserSetGroupRoleResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserSetGroupRoleResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserSetGroupRoleResponse_Error_RawValue(RPCUserSetGroupRoleResponse *message) {
  GPBDescriptor *descriptor = [RPCUserSetGroupRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetGroupRoleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserSetGroupRoleResponse_Error_RawValue(RPCUserSetGroupRoleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserSetGroupRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserSetGroupRoleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserUpdateVoiceStatusRequest

@implementation RPCUserUpdateVoiceStatusRequest

@dynamic userId;
@dynamic channelId;
@dynamic voiceStatus;

typedef struct RPCUserUpdateVoiceStatusRequest__storage_ {
  uint32_t _has_storage_[1];
  ChannelMembershipRecord_VoiceStatus voiceStatus;
  NSString *userId;
  NSString *channelId;
} RPCUserUpdateVoiceStatusRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserUpdateVoiceStatusRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdateVoiceStatusRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelId",
        .number = RPCUserUpdateVoiceStatusRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserUpdateVoiceStatusRequest__storage_, channelId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "voiceStatus",
        .number = RPCUserUpdateVoiceStatusRequest_FieldNumber_VoiceStatus,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserUpdateVoiceStatusRequest__storage_, voiceStatus),
        .defaultValue.valueEnum = ChannelMembershipRecord_VoiceStatus_VsUnknown,
        .dataTypeSpecific.enumDescFunc = ChannelMembershipRecord_VoiceStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdateVoiceStatusRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdateVoiceStatusRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserUpdateVoiceStatusRequest_VoiceStatus_RawValue(RPCUserUpdateVoiceStatusRequest *message) {
  GPBDescriptor *descriptor = [RPCUserUpdateVoiceStatusRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateVoiceStatusRequest_FieldNumber_VoiceStatus];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserUpdateVoiceStatusRequest_VoiceStatus_RawValue(RPCUserUpdateVoiceStatusRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserUpdateVoiceStatusRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserUpdateVoiceStatusRequest_FieldNumber_VoiceStatus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserUpdateVoiceStatusResponse

@implementation RPCUserUpdateVoiceStatusResponse


typedef struct RPCUserUpdateVoiceStatusResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCUserUpdateVoiceStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserUpdateVoiceStatusResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserUpdateVoiceStatusResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserDeleteUserRequest

@implementation RPCUserDeleteUserRequest

@dynamic userId;

typedef struct RPCUserDeleteUserRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserDeleteUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserDeleteUserRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserDeleteUserRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserDeleteUserRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserDeleteUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserDeleteUserResponse

@implementation RPCUserDeleteUserResponse

@dynamic error;

typedef struct RPCUserDeleteUserResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCUserDeleteUserResponse_ErrorType error;
} RPCUserDeleteUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserDeleteUserResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserDeleteUserResponse__storage_, error),
        .defaultValue.valueEnum = RPCUserDeleteUserResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCUserDeleteUserResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = RPCUserDeleteUserResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserDeleteUserResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserDeleteUserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserDeleteUserResponse_Error_RawValue(RPCUserDeleteUserResponse *message) {
  GPBDescriptor *descriptor = [RPCUserDeleteUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserDeleteUserResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserDeleteUserResponse_Error_RawValue(RPCUserDeleteUserResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserDeleteUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserDeleteUserResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCUserDeleteUserResponse_ErrorType

GPBEnumDescriptor *RPCUserDeleteUserResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = RPCUserDeleteUserResponse_ErrorType_None },
      { .name = "BadRequest", .number = RPCUserDeleteUserResponse_ErrorType_BadRequest },
      { .name = "UnknownError", .number = RPCUserDeleteUserResponse_ErrorType_UnknownError },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCUserDeleteUserResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:RPCUserDeleteUserResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL RPCUserDeleteUserResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCUserDeleteUserResponse_ErrorType_None:
    case RPCUserDeleteUserResponse_ErrorType_BadRequest:
    case RPCUserDeleteUserResponse_ErrorType_UnknownError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCUserRemoveUserFromHubsRequest

@implementation RPCUserRemoveUserFromHubsRequest

@dynamic userId;

typedef struct RPCUserRemoveUserFromHubsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCUserRemoveUserFromHubsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCUserRemoveUserFromHubsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCUserRemoveUserFromHubsRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserRemoveUserFromHubsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserRemoveUserFromHubsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserRemoveUserFromHubsResponse

@implementation RPCUserRemoveUserFromHubsResponse

@dynamic error;

typedef struct RPCUserRemoveUserFromHubsResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCUserRemoveUserFromHubsResponse_ErrorType error;
} RPCUserRemoveUserFromHubsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCUserRemoveUserFromHubsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCUserRemoveUserFromHubsResponse__storage_, error),
        .defaultValue.valueEnum = RPCUserRemoveUserFromHubsResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCUserRemoveUserFromHubsResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = RPCUserRemoveUserFromHubsResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserRemoveUserFromHubsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCUserRemoveUserFromHubsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserRemoveUserFromHubsResponse_Error_RawValue(RPCUserRemoveUserFromHubsResponse *message) {
  GPBDescriptor *descriptor = [RPCUserRemoveUserFromHubsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserRemoveUserFromHubsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserRemoveUserFromHubsResponse_Error_RawValue(RPCUserRemoveUserFromHubsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserRemoveUserFromHubsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserRemoveUserFromHubsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCUserRemoveUserFromHubsResponse_ErrorType

GPBEnumDescriptor *RPCUserRemoveUserFromHubsResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = RPCUserRemoveUserFromHubsResponse_ErrorType_None },
      { .name = "BadRequest", .number = RPCUserRemoveUserFromHubsResponse_ErrorType_BadRequest },
      { .name = "UnknownError", .number = RPCUserRemoveUserFromHubsResponse_ErrorType_UnknownError },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCUserRemoveUserFromHubsResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:RPCUserRemoveUserFromHubsResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL RPCUserRemoveUserFromHubsResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCUserRemoveUserFromHubsResponse_ErrorType_None:
    case RPCUserRemoveUserFromHubsResponse_ErrorType_BadRequest:
    case RPCUserRemoveUserFromHubsResponse_ErrorType_UnknownError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCGroupRemoveUserRequest

@implementation RPCGroupRemoveUserRequest

@dynamic userId;
@dynamic groupId;
@dynamic type;

typedef struct RPCGroupRemoveUserRequest__storage_ {
  uint32_t _has_storage_[1];
  ProprietaryUserGroupRecord_Type type;
  NSString *userId;
  NSString *groupId;
} RPCGroupRemoveUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCGroupRemoveUserRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupRemoveUserRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupId",
        .number = RPCGroupRemoveUserRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupRemoveUserRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = RPCGroupRemoveUserRequest_FieldNumber_Type,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupRemoveUserRequest__storage_, type),
        .defaultValue.valueEnum = ProprietaryUserGroupRecord_Type_Unknown,
        .dataTypeSpecific.enumDescFunc = ProprietaryUserGroupRecord_Type_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupRemoveUserRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupRemoveUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupRemoveUserRequest_Type_RawValue(RPCGroupRemoveUserRequest *message) {
  GPBDescriptor *descriptor = [RPCGroupRemoveUserRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupRemoveUserRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupRemoveUserRequest_Type_RawValue(RPCGroupRemoveUserRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupRemoveUserRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupRemoveUserRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupRemoveUserResponse

@implementation RPCGroupRemoveUserResponse


typedef struct RPCGroupRemoveUserResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCGroupRemoveUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupRemoveUserResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupRemoveUserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCAssociatedGroupUsersResponse

@implementation RPCAssociatedGroupUsersResponse

@dynamic usersArray, usersArray_Count;

typedef struct RPCAssociatedGroupUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} RPCAssociatedGroupUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .number = RPCAssociatedGroupUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCAssociatedGroupUsersResponse__storage_, usersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCAssociatedGroupUsersResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCAssociatedGroupUsersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCreateGroupRequest

@implementation RPCGroupCreateGroupRequest

@dynamic owner;
@dynamic name;
@dynamic description_p;
@dynamic titleImage;
@dynamic backgroundImage;
@dynamic skipChannelCreation;

typedef struct RPCGroupCreateGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL skipChannelCreation;
  NSString *owner;
  NSString *name;
  NSString *description_p;
  NSString *titleImage;
  NSString *backgroundImage;
} RPCGroupCreateGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "owner",
        .number = RPCGroupCreateGroupRequest_FieldNumber_Owner,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, owner),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = RPCGroupCreateGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = RPCGroupCreateGroupRequest_FieldNumber_Description_p,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, description_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = RPCGroupCreateGroupRequest_FieldNumber_TitleImage,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, titleImage),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = RPCGroupCreateGroupRequest_FieldNumber_BackgroundImage,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, backgroundImage),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "skipChannelCreation",
        .number = RPCGroupCreateGroupRequest_FieldNumber_SkipChannelCreation,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupCreateGroupRequest__storage_, skipChannelCreation),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCreateGroupRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCreateGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCreateGroupResponse

@implementation RPCGroupCreateGroupResponse

@dynamic error;
@dynamic hasGroup, group;

typedef struct RPCGroupCreateGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  CreateGroupErrorType error;
  Group *group;
} RPCGroupCreateGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupCreateGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupCreateGroupResponse__storage_, error),
        .defaultValue.valueEnum = CreateGroupErrorType_None,
        .dataTypeSpecific.enumDescFunc = CreateGroupErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "group",
        .number = RPCGroupCreateGroupResponse_FieldNumber_Group,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupCreateGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCreateGroupResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCreateGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupCreateGroupResponse_Error_RawValue(RPCGroupCreateGroupResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupCreateGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupCreateGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupCreateGroupResponse_Error_RawValue(RPCGroupCreateGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupCreateGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupCreateGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupEditGroupRequest

@implementation RPCGroupEditGroupRequest

@dynamic id_p;
@dynamic hasOwner, owner;
@dynamic hasName, name;
@dynamic hasDescription_p, description_p;
@dynamic hasTitleImage, titleImage;
@dynamic hasBackgroundImage, backgroundImage;

typedef struct RPCGroupEditGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  OptionalString *owner;
  OptionalString *name;
  OptionalString *description_p;
  OptionalString *titleImage;
  OptionalString *backgroundImage;
} RPCGroupEditGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = RPCGroupEditGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, id_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "owner",
        .number = RPCGroupEditGroupRequest_FieldNumber_Owner,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, owner),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = RPCGroupEditGroupRequest_FieldNumber_Name,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, name),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = RPCGroupEditGroupRequest_FieldNumber_Description_p,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, description_p),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = RPCGroupEditGroupRequest_FieldNumber_TitleImage,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, titleImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = RPCGroupEditGroupRequest_FieldNumber_BackgroundImage,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupRequest__storage_, backgroundImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupEditGroupRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupEditGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupEditGroupResponse

@implementation RPCGroupEditGroupResponse

@dynamic error;
@dynamic hasGroup, group;

typedef struct RPCGroupEditGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  CreateGroupErrorType error;
  Group *group;
} RPCGroupEditGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupEditGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupEditGroupResponse__storage_, error),
        .defaultValue.valueEnum = CreateGroupErrorType_None,
        .dataTypeSpecific.enumDescFunc = CreateGroupErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "group",
        .number = RPCGroupEditGroupResponse_FieldNumber_Group,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupEditGroupResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupEditGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupEditGroupResponse_Error_RawValue(RPCGroupEditGroupResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupEditGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupEditGroupResponse_Error_RawValue(RPCGroupEditGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupEditGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupGetGroupRequest

@implementation RPCGroupGetGroupRequest

@dynamic groupId;
@dynamic fetchLinkedHubs;

typedef struct RPCGroupGetGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL fetchLinkedHubs;
  NSString *groupId;
} RPCGroupGetGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupGetGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetGroupRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchLinkedHubs",
        .number = RPCGroupGetGroupRequest_FieldNumber_FetchLinkedHubs,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupGetGroupRequest__storage_, fetchLinkedHubs),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupResponse

@implementation RPCGroupGetGroupResponse

@dynamic hasGroup, group;
@dynamic linkedHubsArray, linkedHubsArray_Count;

typedef struct RPCGroupGetGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
  NSMutableArray *linkedHubsArray;
} RPCGroupGetGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .number = RPCGroupGetGroupResponse_FieldNumber_Group,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
      {
        .name = "linkedHubsArray",
        .number = RPCGroupGetGroupResponse_FieldNumber_LinkedHubsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetGroupResponse__storage_, linkedHubsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupsRequest

@implementation RPCGroupGetGroupsRequest


typedef struct RPCGroupGetGroupsRequest__storage_ {
  uint32_t _has_storage_[0];
} RPCGroupGetGroupsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupsResponse

@implementation RPCGroupGetGroupsResponse

@dynamic groupsArray, groupsArray_Count;

typedef struct RPCGroupGetGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupsArray;
} RPCGroupGetGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupsArray",
        .number = RPCGroupGetGroupsResponse_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetGroupsResponse__storage_, groupsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupsForUserRequest

@implementation RPCGroupGetGroupsForUserRequest

@dynamic userId;

typedef struct RPCGroupGetGroupsForUserRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCGroupGetGroupsForUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCGroupGetGroupsForUserRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetGroupsForUserRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupsForUserRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupsForUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupsForUserResponse

@implementation RPCGroupGetGroupsForUserResponse

@dynamic groupMembershipsArray, groupMembershipsArray_Count;

typedef struct RPCGroupGetGroupsForUserResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupMembershipsArray;
} RPCGroupGetGroupsForUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupMembershipsArray",
        .number = RPCGroupGetGroupsForUserResponse_FieldNumber_GroupMembershipsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetGroupsForUserResponse__storage_, groupMembershipsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GroupMembership),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\001\000groupMemberships\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupsForUserResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupsForUserResponse__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupAddGroupMemberRequest

@implementation RPCGroupAddGroupMemberRequest

@dynamic groupId;
@dynamic userId;
@dynamic type;

typedef struct RPCGroupAddGroupMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  GroupMembershipRecord_MembershipType type;
  NSString *groupId;
  NSString *userId;
} RPCGroupAddGroupMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupAddGroupMemberRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddGroupMemberRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupAddGroupMemberRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddGroupMemberRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = RPCGroupAddGroupMemberRequest_FieldNumber_Type,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupAddGroupMemberRequest__storage_, type),
        .defaultValue.valueEnum = GroupMembershipRecord_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = GroupMembershipRecord_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddGroupMemberRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddGroupMemberRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupAddGroupMemberRequest_Type_RawValue(RPCGroupAddGroupMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCGroupAddGroupMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddGroupMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupAddGroupMemberRequest_Type_RawValue(RPCGroupAddGroupMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupAddGroupMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddGroupMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupAddGroupMemberResponse

@implementation RPCGroupAddGroupMemberResponse


typedef struct RPCGroupAddGroupMemberResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCGroupAddGroupMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddGroupMemberResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddGroupMemberResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupAddGroupMembersRequest

@implementation RPCGroupAddGroupMembersRequest

@dynamic groupId;
@dynamic inviterId;
@dynamic inviteesArray, inviteesArray_Count;

typedef struct RPCGroupAddGroupMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *inviterId;
  NSMutableArray *inviteesArray;
} RPCGroupAddGroupMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupAddGroupMembersRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddGroupMembersRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviterId",
        .number = RPCGroupAddGroupMembersRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddGroupMembersRequest__storage_, inviterId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviteesArray",
        .number = RPCGroupAddGroupMembersRequest_FieldNumber_InviteesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupAddGroupMembersRequest__storage_, inviteesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PotentialGroupMember),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddGroupMembersRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddGroupMembersRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupAddGroupMembersResponse

@implementation RPCGroupAddGroupMembersResponse


typedef struct RPCGroupAddGroupMembersResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCGroupAddGroupMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddGroupMembersResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddGroupMembersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupRemoveGroupMemberRequest

@implementation RPCGroupRemoveGroupMemberRequest

@dynamic groupId;
@dynamic userId;

typedef struct RPCGroupRemoveGroupMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
} RPCGroupRemoveGroupMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupRemoveGroupMemberRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupRemoveGroupMemberRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupRemoveGroupMemberRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupRemoveGroupMemberRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupRemoveGroupMemberRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupRemoveGroupMemberRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupRemoveGroupMemberResponse

@implementation RPCGroupRemoveGroupMemberResponse


typedef struct RPCGroupRemoveGroupMemberResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCGroupRemoveGroupMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupRemoveGroupMemberResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupRemoveGroupMemberResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCheckGroupMembershipRequest

@implementation RPCGroupCheckGroupMembershipRequest

@dynamic groupId;
@dynamic userId;

typedef struct RPCGroupCheckGroupMembershipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
} RPCGroupCheckGroupMembershipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupCheckGroupMembershipRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCheckGroupMembershipRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupCheckGroupMembershipRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCheckGroupMembershipRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCheckGroupMembershipRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCheckGroupMembershipRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCheckGroupMembershipResponse

@implementation RPCGroupCheckGroupMembershipResponse

@dynamic isMember;

typedef struct RPCGroupCheckGroupMembershipResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL isMember;
} RPCGroupCheckGroupMembershipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isMember",
        .number = RPCGroupCheckGroupMembershipResponse_FieldNumber_IsMember,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupCheckGroupMembershipResponse__storage_, isMember),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCheckGroupMembershipResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCheckGroupMembershipResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCreateInviteCodeRequest

@implementation RPCGroupCreateInviteCodeRequest

@dynamic groupId;
@dynamic inviterId;

typedef struct RPCGroupCreateInviteCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *inviterId;
} RPCGroupCreateInviteCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupCreateInviteCodeRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateInviteCodeRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviterId",
        .number = RPCGroupCreateInviteCodeRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateInviteCodeRequest__storage_, inviterId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCreateInviteCodeRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCreateInviteCodeRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupCreateInviteCodeResponse

@implementation RPCGroupCreateInviteCodeResponse

@dynamic inviteCode;

typedef struct RPCGroupCreateInviteCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
} RPCGroupCreateInviteCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = RPCGroupCreateInviteCodeResponse_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupCreateInviteCodeResponse__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupCreateInviteCodeResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupCreateInviteCodeResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetInviteCodeInfoRequest

@implementation RPCGroupGetInviteCodeInfoRequest

@dynamic inviteCode;

typedef struct RPCGroupGetInviteCodeInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
} RPCGroupGetInviteCodeInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = RPCGroupGetInviteCodeInfoRequest_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetInviteCodeInfoRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetInviteCodeInfoRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetInviteCodeInfoRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetInviteCodeInfoResponse

@implementation RPCGroupGetInviteCodeInfoResponse

@dynamic hasGroup, group;

typedef struct RPCGroupGetInviteCodeInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
} RPCGroupGetInviteCodeInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .number = RPCGroupGetInviteCodeInfoResponse_FieldNumber_Group,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetInviteCodeInfoResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetInviteCodeInfoResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetInviteCodeInfoResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupAcceptInviteRequest

@implementation RPCGroupAcceptInviteRequest

@dynamic inviteCode;
@dynamic userId;

typedef struct RPCGroupAcceptInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
  NSString *userId;
} RPCGroupAcceptInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = RPCGroupAcceptInviteRequest_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAcceptInviteRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupAcceptInviteRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAcceptInviteRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAcceptInviteRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAcceptInviteRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupAcceptInviteResponse

@implementation RPCGroupAcceptInviteResponse

@dynamic success;
@dynamic hasGroup, group;

typedef struct RPCGroupAcceptInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
  Group *group;
} RPCGroupAcceptInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = RPCGroupAcceptInviteResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupAcceptInviteResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "group",
        .number = RPCGroupAcceptInviteResponse_FieldNumber_Group,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupAcceptInviteResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAcceptInviteResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAcceptInviteResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupTokenRequest

@implementation RPCGroupGetGroupTokenRequest

@dynamic userId;
@dynamic groupId;

typedef struct RPCGroupGetGroupTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *groupId;
} RPCGroupGetGroupTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCGroupGetGroupTokenRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetGroupTokenRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "groupId",
        .number = RPCGroupGetGroupTokenRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetGroupTokenRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupTokenRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupTokenRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetGroupTokenResponse

@implementation RPCGroupGetGroupTokenResponse

@dynamic error;
@dynamic token;

typedef struct RPCGroupGetGroupTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupGetGroupTokenResponse_ErrorType error;
  NSString *token;
} RPCGroupGetGroupTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupGetGroupTokenResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupGetGroupTokenResponse__storage_, error),
        .defaultValue.valueEnum = GroupGetGroupTokenResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupGetGroupTokenResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = RPCGroupGetGroupTokenResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetGroupTokenResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetGroupTokenResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetGroupTokenResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupGetGroupTokenResponse_Error_RawValue(RPCGroupGetGroupTokenResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupGetGroupTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupGetGroupTokenResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupGetGroupTokenResponse_Error_RawValue(RPCGroupGetGroupTokenResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupGetGroupTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupGetGroupTokenResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupAddMemberRequest

@implementation RPCGroupAddMemberRequest

@dynamic identifierOneOfCase;
@dynamic groupId;
@dynamic inviterId;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;

typedef struct RPCGroupAddMemberRequest__storage_ {
  uint32_t _has_storage_[2];
  BOOL fetchExisting;
  BOOL fetchPending;
  MembershipEntry_MembershipType type;
  NSString *groupId;
  NSString *inviterId;
  NSString *userId;
  NSString *email;
} RPCGroupAddMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageOneofDescription oneofs[] = {
      {
        .name = "identifier",
        .index = -1,
      },
    };
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupAddMemberRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviterId",
        .number = RPCGroupAddMemberRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, inviterId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupAddMemberRequest_FieldNumber_UserId,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCGroupAddMemberRequest_FieldNumber_Email,
        .hasIndex = -1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = RPCGroupAddMemberRequest_FieldNumber_Type,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, type),
        .defaultValue.valueEnum = MembershipEntry_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchExisting",
        .number = RPCGroupAddMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, fetchExisting),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchPending",
        .number = RPCGroupAddMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupAddMemberRequest__storage_, fetchPending),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddMemberRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:oneofs
                                    oneofCount:sizeof(oneofs) / sizeof(GPBMessageOneofDescription)
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddMemberRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupAddMemberRequest_Type_RawValue(RPCGroupAddMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCGroupAddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupAddMemberRequest_Type_RawValue(RPCGroupAddMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupAddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void RPCGroupAddMemberRequest_ClearIdentifierOneOfCase(RPCGroupAddMemberRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, 0);
}
#pragma mark - RPCGroupAddMemberResponse

@implementation RPCGroupAddMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;

typedef struct RPCGroupAddMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubAddMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
} RPCGroupAddMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupAddMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupAddMemberResponse__storage_, error),
        .defaultValue.valueEnum = RPCHubAddMemberResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCHubAddMemberResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "existingUsersArray",
        .number = RPCGroupAddMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupAddMemberResponse__storage_, existingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
      {
        .name = "pendingUsersArray",
        .number = RPCGroupAddMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupAddMemberResponse__storage_, pendingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupAddMemberResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupAddMemberResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupAddMemberResponse_Error_RawValue(RPCGroupAddMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupAddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupAddMemberResponse_Error_RawValue(RPCGroupAddMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupAddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupAddMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupGetMembersRequest

@implementation RPCGroupGetMembersRequest

@dynamic groupId;
@dynamic userId;
@dynamic fetchExisting;
@dynamic fetchPending;

typedef struct RPCGroupGetMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL fetchExisting;
  BOOL fetchPending;
  NSString *groupId;
  NSString *userId;
} RPCGroupGetMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupGetMembersRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetMembersRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupGetMembersRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupGetMembersRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchExisting",
        .number = RPCGroupGetMembersRequest_FieldNumber_FetchExisting,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupGetMembersRequest__storage_, fetchExisting),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchPending",
        .number = RPCGroupGetMembersRequest_FieldNumber_FetchPending,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupGetMembersRequest__storage_, fetchPending),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetMembersRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetMembersRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupGetMembersResponse

@implementation RPCGroupGetMembersResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;

typedef struct RPCGroupGetMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetMembersResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
} RPCGroupGetMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupGetMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupGetMembersResponse__storage_, error),
        .defaultValue.valueEnum = RPCHubGetMembersResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCHubGetMembersResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "existingUsersArray",
        .number = RPCGroupGetMembersResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetMembersResponse__storage_, existingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
      {
        .name = "pendingUsersArray",
        .number = RPCGroupGetMembersResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupGetMembersResponse__storage_, pendingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupGetMembersResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupGetMembersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupGetMembersResponse_Error_RawValue(RPCGroupGetMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupGetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupGetMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupGetMembersResponse_Error_RawValue(RPCGroupGetMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupGetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupGetMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupSendInviteRequest

@implementation RPCGroupSendInviteRequest

@dynamic groupId;
@dynamic senderId;
@dynamic userId;
@dynamic email;

typedef struct RPCGroupSendInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *senderId;
  NSString *userId;
  NSString *email;
} RPCGroupSendInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupSendInviteRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupSendInviteRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "senderId",
        .number = RPCGroupSendInviteRequest_FieldNumber_SenderId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupSendInviteRequest__storage_, senderId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupSendInviteRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupSendInviteRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCGroupSendInviteRequest_FieldNumber_Email,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupSendInviteRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupSendInviteRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupSendInviteRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupSendInviteResponse

@implementation RPCGroupSendInviteResponse

@dynamic error;

typedef struct RPCGroupSendInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubSendInviteResponse_ErrorType error;
} RPCGroupSendInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupSendInviteResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupSendInviteResponse__storage_, error),
        .defaultValue.valueEnum = RPCHubSendInviteResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCHubSendInviteResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupSendInviteResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupSendInviteResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupSendInviteResponse_Error_RawValue(RPCGroupSendInviteResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupSendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupSendInviteResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupSendInviteResponse_Error_RawValue(RPCGroupSendInviteResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupSendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupSendInviteResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupEditMemberRequest

@implementation RPCGroupEditMemberRequest

@dynamic groupId;
@dynamic editerId;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;

typedef struct RPCGroupEditMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL fetchExisting;
  BOOL fetchPending;
  MembershipEntry_MembershipType type;
  NSString *groupId;
  NSString *editerId;
  NSString *userId;
  NSString *email;
} RPCGroupEditMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupEditMemberRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "editerId",
        .number = RPCGroupEditMemberRequest_FieldNumber_EditerId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, editerId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupEditMemberRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = RPCGroupEditMemberRequest_FieldNumber_Email,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = RPCGroupEditMemberRequest_FieldNumber_Type,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, type),
        .defaultValue.valueEnum = MembershipEntry_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchExisting",
        .number = RPCGroupEditMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, fetchExisting),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fetchPending",
        .number = RPCGroupEditMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCGroupEditMemberRequest__storage_, fetchPending),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupEditMemberRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupEditMemberRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupEditMemberRequest_Type_RawValue(RPCGroupEditMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCGroupEditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupEditMemberRequest_Type_RawValue(RPCGroupEditMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupEditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupEditMemberResponse

@implementation RPCGroupEditMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;

typedef struct RPCGroupEditMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubEditMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
} RPCGroupEditMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupEditMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupEditMemberResponse__storage_, error),
        .defaultValue.valueEnum = RPCHubEditMemberResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = RPCHubEditMemberResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "existingUsersArray",
        .number = RPCGroupEditMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditMemberResponse__storage_, existingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
      {
        .name = "pendingUsersArray",
        .number = RPCGroupEditMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCGroupEditMemberResponse__storage_, pendingUsersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupEditMemberResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupEditMemberResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupEditMemberResponse_Error_RawValue(RPCGroupEditMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupEditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupEditMemberResponse_Error_RawValue(RPCGroupEditMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupEditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupEditMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupJoinGroupRequest

@implementation RPCGroupJoinGroupRequest

@dynamic groupId;
@dynamic userId;
@dynamic code;

typedef struct RPCGroupJoinGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
  NSString *code;
} RPCGroupJoinGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupJoinGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupJoinGroupRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupJoinGroupRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupJoinGroupRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "code",
        .number = RPCGroupJoinGroupRequest_FieldNumber_Code,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupJoinGroupRequest__storage_, code),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupJoinGroupRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupJoinGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupJoinGroupResponse

@implementation RPCGroupJoinGroupResponse

@dynamic error;

typedef struct RPCGroupJoinGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupJoinResponse_ErrorType error;
} RPCGroupJoinGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupJoinGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupJoinGroupResponse__storage_, error),
        .defaultValue.valueEnum = GroupJoinResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupJoinResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupJoinGroupResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupJoinGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupJoinGroupResponse_Error_RawValue(RPCGroupJoinGroupResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupJoinGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupJoinGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupJoinGroupResponse_Error_RawValue(RPCGroupJoinGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupJoinGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupJoinGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGroupLeaveGroupRequest

@implementation RPCGroupLeaveGroupRequest

@dynamic groupId;
@dynamic userId;

typedef struct RPCGroupLeaveGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *userId;
} RPCGroupLeaveGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = RPCGroupLeaveGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupLeaveGroupRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = RPCGroupLeaveGroupRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCGroupLeaveGroupRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupLeaveGroupRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupLeaveGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGroupLeaveGroupResponse

@implementation RPCGroupLeaveGroupResponse

@dynamic error;

typedef struct RPCGroupLeaveGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupLeaveResponse_ErrorType error;
} RPCGroupLeaveGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = RPCGroupLeaveGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(RPCGroupLeaveGroupResponse__storage_, error),
        .defaultValue.valueEnum = GroupLeaveResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupLeaveResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGroupLeaveGroupResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCGroupLeaveGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCGroupLeaveGroupResponse_Error_RawValue(RPCGroupLeaveGroupResponse *message) {
  GPBDescriptor *descriptor = [RPCGroupLeaveGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupLeaveGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCGroupLeaveGroupResponse_Error_RawValue(RPCGroupLeaveGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCGroupLeaveGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCGroupLeaveGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCPrefsGetPrefRequest

@implementation RPCPrefsGetPrefRequest

@dynamic userId;
@dynamic domain;
@dynamic keypath;

typedef struct RPCPrefsGetPrefRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *domain;
  NSString *keypath;
} RPCPrefsGetPrefRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCPrefsGetPrefRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "domain",
        .number = RPCPrefsGetPrefRequest_FieldNumber_Domain,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefRequest__storage_, domain),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "keypath",
        .number = RPCPrefsGetPrefRequest_FieldNumber_Keypath,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefRequest__storage_, keypath),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsGetPrefRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsGetPrefRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsGetPrefResponse

@implementation RPCPrefsGetPrefResponse

@dynamic hasPref, pref;

typedef struct RPCPrefsGetPrefResponse__storage_ {
  uint32_t _has_storage_[1];
  Pref *pref;
} RPCPrefsGetPrefResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pref",
        .number = RPCPrefsGetPrefResponse_FieldNumber_Pref,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCPrefsGetPrefResponse__storage_, pref),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsGetPrefResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsGetPrefResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsGetPrefsRequest

@implementation RPCPrefsGetPrefsRequest

@dynamic userId;
@dynamic domain;
@dynamic keypathPrefix;

typedef struct RPCPrefsGetPrefsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *domain;
  NSString *keypathPrefix;
} RPCPrefsGetPrefsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCPrefsGetPrefsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefsRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "domain",
        .number = RPCPrefsGetPrefsRequest_FieldNumber_Domain,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefsRequest__storage_, domain),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "keypathPrefix",
        .number = RPCPrefsGetPrefsRequest_FieldNumber_KeypathPrefix,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsGetPrefsRequest__storage_, keypathPrefix),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsGetPrefsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsGetPrefsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsGetPrefsResponse

@implementation RPCPrefsGetPrefsResponse

@dynamic prefsArray, prefsArray_Count;

typedef struct RPCPrefsGetPrefsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *prefsArray;
} RPCPrefsGetPrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prefsArray",
        .number = RPCPrefsGetPrefsResponse_FieldNumber_PrefsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCPrefsGetPrefsResponse__storage_, prefsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsGetPrefsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsGetPrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsSetPrefsRequest

@implementation RPCPrefsSetPrefsRequest

@dynamic userId;
@dynamic prefsArray, prefsArray_Count;

typedef struct RPCPrefsSetPrefsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableArray *prefsArray;
} RPCPrefsSetPrefsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCPrefsSetPrefsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsSetPrefsRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "prefsArray",
        .number = RPCPrefsSetPrefsRequest_FieldNumber_PrefsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCPrefsSetPrefsRequest__storage_, prefsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsSetPrefsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsSetPrefsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsSetPrefsResponse

@implementation RPCPrefsSetPrefsResponse


typedef struct RPCPrefsSetPrefsResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCPrefsSetPrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsSetPrefsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsSetPrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsDeletePrefsRequest

@implementation RPCPrefsDeletePrefsRequest

@dynamic userId;
@dynamic domain;
@dynamic keypathPrefix;

typedef struct RPCPrefsDeletePrefsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *domain;
  NSString *keypathPrefix;
} RPCPrefsDeletePrefsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = RPCPrefsDeletePrefsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsDeletePrefsRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "domain",
        .number = RPCPrefsDeletePrefsRequest_FieldNumber_Domain,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsDeletePrefsRequest__storage_, domain),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "keypathPrefix",
        .number = RPCPrefsDeletePrefsRequest_FieldNumber_KeypathPrefix,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCPrefsDeletePrefsRequest__storage_, keypathPrefix),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsDeletePrefsRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsDeletePrefsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCPrefsDeletePrefsResponse

@implementation RPCPrefsDeletePrefsResponse


typedef struct RPCPrefsDeletePrefsResponse__storage_ {
  uint32_t _has_storage_[0];
} RPCPrefsDeletePrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCPrefsDeletePrefsResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCPrefsDeletePrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCSearchSearchRequest

@implementation RPCSearchSearchRequest

@dynamic searchTerm;
@dynamic limit;
@dynamic searchUsers;
@dynamic searchChannels;
@dynamic searchGroups;
@dynamic searchGames;
@dynamic searchTags;

typedef struct RPCSearchSearchRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL searchUsers;
  BOOL searchChannels;
  BOOL searchGroups;
  BOOL searchGames;
  BOOL searchTags;
  int32_t limit;
  NSString *searchTerm;
} RPCSearchSearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchTerm",
        .number = RPCSearchSearchRequest_FieldNumber_SearchTerm,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchTerm),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "limit",
        .number = RPCSearchSearchRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(RPCSearchSearchRequest__storage_, limit),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchUsers",
        .number = RPCSearchSearchRequest_FieldNumber_SearchUsers,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchUsers),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchChannels",
        .number = RPCSearchSearchRequest_FieldNumber_SearchChannels,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchChannels),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchGroups",
        .number = RPCSearchSearchRequest_FieldNumber_SearchGroups,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchGroups),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchGames",
        .number = RPCSearchSearchRequest_FieldNumber_SearchGames,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchGames),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchTags",
        .number = RPCSearchSearchRequest_FieldNumber_SearchTags,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RPCSearchSearchRequest__storage_, searchTags),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCSearchSearchRequest class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCSearchSearchRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCSearchSearchResponse

@implementation RPCSearchSearchResponse

@dynamic usersArray, usersArray_Count;
@dynamic channelsArray, channelsArray_Count;
@dynamic groupsArray, groupsArray_Count;
@dynamic gamesArray, gamesArray_Count;
@dynamic tagsArray, tagsArray_Count;

typedef struct RPCSearchSearchResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *channelsArray;
  NSMutableArray *groupsArray;
  NSMutableArray *gamesArray;
  NSMutableArray *tagsArray;
} RPCSearchSearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .number = RPCSearchSearchResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCSearchSearchResponse__storage_, usersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .fieldOptions = NULL,
      },
      {
        .name = "channelsArray",
        .number = RPCSearchSearchResponse_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCSearchSearchResponse__storage_, channelsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .fieldOptions = NULL,
      },
      {
        .name = "groupsArray",
        .number = RPCSearchSearchResponse_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCSearchSearchResponse__storage_, groupsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
      {
        .name = "gamesArray",
        .number = RPCSearchSearchResponse_FieldNumber_GamesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(RPCSearchSearchResponse__storage_, gamesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .fieldOptions = NULL,
      },
      {
        .name = "tagsArray",
        .number = RPCSearchSearchResponse_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RPCSearchSearchResponse__storage_, tagsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCSearchSearchResponse class]
                                     rootClass:[RpcRoot class]
                                          file:RpcRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RPCSearchSearchResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
