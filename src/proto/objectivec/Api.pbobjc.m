// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Api.pbobjc.h"
#import "Profile.pbobjc.h"
#import "ProfileUserinfo.pbobjc.h"
#import "Message.pbobjc.h"
#import "Optional.pbobjc.h"
#import "Prefs.pbobjc.h"
#import "HubBase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - ApiRoot

@implementation ApiRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[ProfileUserinfoRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
    [registry addExtensions:[OptionalRoot extensionRegistry]];
    [registry addExtensions:[PrefsRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ApiRoot_FileDescriptor

static GPBFileDescriptor *ApiRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CreateGroupErrorType

GPBEnumDescriptor *CreateGroupErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = CreateGroupErrorType_None },
      { .name = "NameInvalid", .number = CreateGroupErrorType_NameInvalid },
      { .name = "NameTaken", .number = CreateGroupErrorType_NameTaken },
      { .name = "TitleImageInvalid", .number = CreateGroupErrorType_TitleImageInvalid },
      { .name = "BackgroundImageInvalid", .number = CreateGroupErrorType_BackgroundImageInvalid },
      { .name = "ServerError", .number = CreateGroupErrorType_ServerError },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CreateGroupErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:CreateGroupErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL CreateGroupErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CreateGroupErrorType_None:
    case CreateGroupErrorType_NameInvalid:
    case CreateGroupErrorType_NameTaken:
    case CreateGroupErrorType_TitleImageInvalid:
    case CreateGroupErrorType_BackgroundImageInvalid:
    case CreateGroupErrorType_ServerError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AuthLoginRequest

@implementation AuthLoginRequest

@dynamic username;
@dynamic password;
@dynamic agentId;
@dynamic agentName;
@dynamic agentType;

typedef struct AuthLoginRequest__storage_ {
  uint32_t _has_storage_[1];
  UserAgent_UserAgentType agentType;
  NSString *username;
  NSString *password;
  NSString *agentId;
  NSString *agentName;
} AuthLoginRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = AuthLoginRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthLoginRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = AuthLoginRequest_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthLoginRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = AuthLoginRequest_FieldNumber_AgentId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthLoginRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentName",
        .number = AuthLoginRequest_FieldNumber_AgentName,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthLoginRequest__storage_, agentName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentType",
        .number = AuthLoginRequest_FieldNumber_AgentType,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(AuthLoginRequest__storage_, agentType),
        .defaultValue.valueEnum = UserAgent_UserAgentType_Unknown,
        .dataTypeSpecific.enumDescFunc = UserAgent_UserAgentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthLoginRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthLoginRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AuthLoginRequest_AgentType_RawValue(AuthLoginRequest *message) {
  GPBDescriptor *descriptor = [AuthLoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthLoginRequest_FieldNumber_AgentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAuthLoginRequest_AgentType_RawValue(AuthLoginRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AuthLoginRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthLoginRequest_FieldNumber_AgentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AuthLoginResponse

@implementation AuthLoginResponse

@dynamic success;
@dynamic token;
@dynamic hasUser, user;

typedef struct AuthLoginResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
  NSString *token;
  User *user;
} AuthLoginResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthLoginResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthLoginResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = AuthLoginResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthLoginResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = AuthLoginResponse_FieldNumber_User,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(AuthLoginResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthLoginResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthLoginResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthWithTokenRequest

@implementation AuthWithTokenRequest

@dynamic token;

typedef struct AuthWithTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
} AuthWithTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .number = AuthWithTokenRequest_FieldNumber_Token,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthWithTokenRequest__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthWithTokenRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthWithTokenRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthWithTokenResponse

@implementation AuthWithTokenResponse

@dynamic success;
@dynamic token;

typedef struct AuthWithTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
  NSString *token;
} AuthWithTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthWithTokenResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthWithTokenResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = AuthWithTokenResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthWithTokenResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthWithTokenResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthWithTokenResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthRegisterRequest

@implementation AuthRegisterRequest

@dynamic username;
@dynamic password;
@dynamic email;
@dynamic inviteCode;
@dynamic newsletter;
@dynamic termsOfService;
@dynamic gosuInviteCode;
@dynamic agentId;
@dynamic agentName;
@dynamic agentType;
@dynamic ephemeral;
@dynamic joinCommunitiesArray, joinCommunitiesArray_Count;
@dynamic autoGenerateNameSuffix;

typedef struct AuthRegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL newsletter;
  BOOL termsOfService;
  BOOL ephemeral;
  BOOL autoGenerateNameSuffix;
  UserAgent_UserAgentType agentType;
  NSString *username;
  NSString *password;
  NSString *email;
  NSString *inviteCode;
  NSString *gosuInviteCode;
  NSString *agentId;
  NSString *agentName;
  NSMutableArray *joinCommunitiesArray;
} AuthRegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = AuthRegisterRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = AuthRegisterRequest_FieldNumber_Password,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "email",
        .number = AuthRegisterRequest_FieldNumber_Email,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviteCode",
        .number = AuthRegisterRequest_FieldNumber_InviteCode,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = AuthRegisterRequest_FieldNumber_Newsletter,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthRegisterRequest__storage_, newsletter),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "termsOfService",
        .number = AuthRegisterRequest_FieldNumber_TermsOfService,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthRegisterRequest__storage_, termsOfService),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "gosuInviteCode",
        .number = AuthRegisterRequest_FieldNumber_GosuInviteCode,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, gosuInviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = AuthRegisterRequest_FieldNumber_AgentId,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentName",
        .number = AuthRegisterRequest_FieldNumber_AgentName,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, agentName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentType",
        .number = AuthRegisterRequest_FieldNumber_AgentType,
        .hasIndex = 9,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(AuthRegisterRequest__storage_, agentType),
        .defaultValue.valueEnum = UserAgent_UserAgentType_Unknown,
        .dataTypeSpecific.enumDescFunc = UserAgent_UserAgentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "ephemeral",
        .number = AuthRegisterRequest_FieldNumber_Ephemeral,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthRegisterRequest__storage_, ephemeral),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "joinCommunitiesArray",
        .number = AuthRegisterRequest_FieldNumber_JoinCommunitiesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterRequest__storage_, joinCommunitiesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "autoGenerateNameSuffix",
        .number = AuthRegisterRequest_FieldNumber_AutoGenerateNameSuffix,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthRegisterRequest__storage_, autoGenerateNameSuffix),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthRegisterRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthRegisterRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AuthRegisterRequest_AgentType_RawValue(AuthRegisterRequest *message) {
  GPBDescriptor *descriptor = [AuthRegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthRegisterRequest_FieldNumber_AgentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAuthRegisterRequest_AgentType_RawValue(AuthRegisterRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AuthRegisterRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthRegisterRequest_FieldNumber_AgentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AuthRegisterResponse

@implementation AuthRegisterResponse

@dynamic success;
@dynamic token;
@dynamic error;
@dynamic hasUser, user;
@dynamic autoGeneratedPassword;

typedef struct AuthRegisterResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
  AuthRegisterResponse_ErrorType error;
  NSString *token;
  User *user;
  NSString *autoGeneratedPassword;
} AuthRegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthRegisterResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthRegisterResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = AuthRegisterResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "error",
        .number = AuthRegisterResponse_FieldNumber_Error,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(AuthRegisterResponse__storage_, error),
        .defaultValue.valueEnum = AuthRegisterResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = AuthRegisterResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = AuthRegisterResponse_FieldNumber_User,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(AuthRegisterResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
      {
        .name = "autoGeneratedPassword",
        .number = AuthRegisterResponse_FieldNumber_AutoGeneratedPassword,
        .hasIndex = 4,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthRegisterResponse__storage_, autoGeneratedPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = AuthRegisterResponse_ErrorType_EnumDescriptor },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\005U\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthRegisterResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthRegisterResponse__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AuthRegisterResponse_Error_RawValue(AuthRegisterResponse *message) {
  GPBDescriptor *descriptor = [AuthRegisterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthRegisterResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetAuthRegisterResponse_Error_RawValue(AuthRegisterResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AuthRegisterResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AuthRegisterResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AuthRegisterResponse_ErrorType

GPBEnumDescriptor *AuthRegisterResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = AuthRegisterResponse_ErrorType_None },
      { .name = "UsernameTaken", .number = AuthRegisterResponse_ErrorType_UsernameTaken },
      { .name = "EmailTaken", .number = AuthRegisterResponse_ErrorType_EmailTaken },
      { .name = "PwTooShort", .number = AuthRegisterResponse_ErrorType_PwTooShort },
      { .name = "PwBad", .number = AuthRegisterResponse_ErrorType_PwBad },
      { .name = "EmailInvalid", .number = AuthRegisterResponse_ErrorType_EmailInvalid },
      { .name = "ServerError", .number = AuthRegisterResponse_ErrorType_ServerError },
      { .name = "UsernameInvalid", .number = AuthRegisterResponse_ErrorType_UsernameInvalid },
      { .name = "DisplaynameTaken", .number = AuthRegisterResponse_ErrorType_DisplaynameTaken },
      { .name = "DisplaynameInvalid", .number = AuthRegisterResponse_ErrorType_DisplaynameInvalid },
      { .name = "AvatarInvalid", .number = AuthRegisterResponse_ErrorType_AvatarInvalid },
      { .name = "GroupInviteCodeInvalid", .number = AuthRegisterResponse_ErrorType_GroupInviteCodeInvalid },
      { .name = "GosuInviteCodeInvalid", .number = AuthRegisterResponse_ErrorType_GosuInviteCodeInvalid },
      { .name = "InviteCodeMissing", .number = AuthRegisterResponse_ErrorType_InviteCodeMissing },
      { .name = "BackgroundImageInvalid", .number = AuthRegisterResponse_ErrorType_BackgroundImageInvalid },
      { .name = "TitleImageInvalid", .number = AuthRegisterResponse_ErrorType_TitleImageInvalid },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AuthRegisterResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:AuthRegisterResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL AuthRegisterResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AuthRegisterResponse_ErrorType_None:
    case AuthRegisterResponse_ErrorType_UsernameTaken:
    case AuthRegisterResponse_ErrorType_EmailTaken:
    case AuthRegisterResponse_ErrorType_PwTooShort:
    case AuthRegisterResponse_ErrorType_PwBad:
    case AuthRegisterResponse_ErrorType_EmailInvalid:
    case AuthRegisterResponse_ErrorType_ServerError:
    case AuthRegisterResponse_ErrorType_UsernameInvalid:
    case AuthRegisterResponse_ErrorType_DisplaynameTaken:
    case AuthRegisterResponse_ErrorType_DisplaynameInvalid:
    case AuthRegisterResponse_ErrorType_AvatarInvalid:
    case AuthRegisterResponse_ErrorType_GroupInviteCodeInvalid:
    case AuthRegisterResponse_ErrorType_GosuInviteCodeInvalid:
    case AuthRegisterResponse_ErrorType_InviteCodeMissing:
    case AuthRegisterResponse_ErrorType_BackgroundImageInvalid:
    case AuthRegisterResponse_ErrorType_TitleImageInvalid:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AuthActivateResponse

@implementation AuthActivateResponse

@dynamic success;

typedef struct AuthActivateResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} AuthActivateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthActivateResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthActivateResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthActivateResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthActivateResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthPasswordResetRequest

@implementation AuthPasswordResetRequest

@dynamic email;

typedef struct AuthPasswordResetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *email;
} AuthPasswordResetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .number = AuthPasswordResetRequest_FieldNumber_Email,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthPasswordResetRequest__storage_, email),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthPasswordResetRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthPasswordResetRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthPasswordResetResponse

@implementation AuthPasswordResetResponse

@dynamic success;

typedef struct AuthPasswordResetResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} AuthPasswordResetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthPasswordResetResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthPasswordResetResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthPasswordResetResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthPasswordResetResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthExecutePasswordResetRequest

@implementation AuthExecutePasswordResetRequest

@dynamic secret;
@dynamic newPassword;

typedef struct AuthExecutePasswordResetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *secret;
  NSString *newPassword;
} AuthExecutePasswordResetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "secret",
        .number = AuthExecutePasswordResetRequest_FieldNumber_Secret,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthExecutePasswordResetRequest__storage_, secret),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newPassword",
        .number = AuthExecutePasswordResetRequest_FieldNumber_NewPassword,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AuthExecutePasswordResetRequest__storage_, newPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthExecutePasswordResetRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthExecutePasswordResetRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AuthExecutePasswordResetResponse

@implementation AuthExecutePasswordResetResponse

@dynamic success;

typedef struct AuthExecutePasswordResetResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} AuthExecutePasswordResetResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = AuthExecutePasswordResetResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(AuthExecutePasswordResetResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AuthExecutePasswordResetResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AuthExecutePasswordResetResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileGetOwnProfileResponse

@implementation ProfileGetOwnProfileResponse

@dynamic hasUserInfo, userInfo;

typedef struct ProfileGetOwnProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  UserInfo *userInfo;
} ProfileGetOwnProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .number = ProfileGetOwnProfileResponse_FieldNumber_UserInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileGetOwnProfileResponse__storage_, userInfo),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileGetOwnProfileResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileGetOwnProfileResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileGetOtherProfileResponse

@implementation ProfileGetOtherProfileResponse

@dynamic hasUserInfo, userInfo;

typedef struct ProfileGetOtherProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  ChatUserInfo *userInfo;
} ProfileGetOtherProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .number = ProfileGetOtherProfileResponse_FieldNumber_UserInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileGetOtherProfileResponse__storage_, userInfo),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUserInfo),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileGetOtherProfileResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileGetOtherProfileResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileUpdateRequest

@implementation ProfileUpdateRequest

@dynamic hasEmail, email;
@dynamic hasDisplayName, displayName;
@dynamic hasAvatarImage, avatarImage;
@dynamic status;
@dynamic hasTermsOfService, termsOfService;
@dynamic hasNewsletter, newsletter;
@dynamic hasBackgroundImage, backgroundImage;
@dynamic hasTitleImage, titleImage;
@dynamic hasBiography, biography;

typedef struct ProfileUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  User_UserStatus status;
  OptionalString *email;
  OptionalString *displayName;
  OptionalString *avatarImage;
  OptionalBool *termsOfService;
  OptionalBool *newsletter;
  OptionalString *backgroundImage;
  OptionalString *titleImage;
  BiographyUpdateData *biography;
} ProfileUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "email",
        .number = ProfileUpdateRequest_FieldNumber_Email,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, email),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "displayName",
        .number = ProfileUpdateRequest_FieldNumber_DisplayName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, displayName),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "avatarImage",
        .number = ProfileUpdateRequest_FieldNumber_AvatarImage,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, avatarImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "status",
        .number = ProfileUpdateRequest_FieldNumber_Status,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ProfileUpdateRequest__storage_, status),
        .defaultValue.valueEnum = User_UserStatus_Unknown,
        .dataTypeSpecific.enumDescFunc = User_UserStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "termsOfService",
        .number = ProfileUpdateRequest_FieldNumber_TermsOfService,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, termsOfService),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalBool),
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = ProfileUpdateRequest_FieldNumber_Newsletter,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, newsletter),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalBool),
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = ProfileUpdateRequest_FieldNumber_BackgroundImage,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, backgroundImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = ProfileUpdateRequest_FieldNumber_TitleImage,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, titleImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "biography",
        .number = ProfileUpdateRequest_FieldNumber_Biography,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateRequest__storage_, biography),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(BiographyUpdateData),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileUpdateRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileUpdateRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProfileUpdateRequest_Status_RawValue(ProfileUpdateRequest *message) {
  GPBDescriptor *descriptor = [ProfileUpdateRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileUpdateRequest_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetProfileUpdateRequest_Status_RawValue(ProfileUpdateRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ProfileUpdateRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileUpdateRequest_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ProfileUpdateResponse

@implementation ProfileUpdateResponse

@dynamic error;
@dynamic hasUser, user;

typedef struct ProfileUpdateResponse__storage_ {
  uint32_t _has_storage_[1];
  AuthRegisterResponse_ErrorType error;
  User *user;
} ProfileUpdateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = ProfileUpdateResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ProfileUpdateResponse__storage_, error),
        .defaultValue.valueEnum = AuthRegisterResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = AuthRegisterResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = ProfileUpdateResponse_FieldNumber_User,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileUpdateResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileUpdateResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileUpdateResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProfileUpdateResponse_Error_RawValue(ProfileUpdateResponse *message) {
  GPBDescriptor *descriptor = [ProfileUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileUpdateResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetProfileUpdateResponse_Error_RawValue(ProfileUpdateResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ProfileUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileUpdateResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ProfileUpdatePasswordRequest

@implementation ProfileUpdatePasswordRequest

@dynamic oldPassword;
@dynamic newPassword;

typedef struct ProfileUpdatePasswordRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *oldPassword;
  NSString *newPassword;
} ProfileUpdatePasswordRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "oldPassword",
        .number = ProfileUpdatePasswordRequest_FieldNumber_OldPassword,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ProfileUpdatePasswordRequest__storage_, oldPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newPassword",
        .number = ProfileUpdatePasswordRequest_FieldNumber_NewPassword,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ProfileUpdatePasswordRequest__storage_, newPassword),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileUpdatePasswordRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileUpdatePasswordRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileUpdatePasswordResponse

@implementation ProfileUpdatePasswordResponse

@dynamic success;

typedef struct ProfileUpdatePasswordResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} ProfileUpdatePasswordResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = ProfileUpdatePasswordResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(ProfileUpdatePasswordResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileUpdatePasswordResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileUpdatePasswordResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileRequestFriendshipRequest

@implementation ProfileRequestFriendshipRequest

@dynamic userId;
@dynamic message;

typedef struct ProfileRequestFriendshipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *message;
} ProfileRequestFriendshipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = ProfileRequestFriendshipRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ProfileRequestFriendshipRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "message",
        .number = ProfileRequestFriendshipRequest_FieldNumber_Message,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ProfileRequestFriendshipRequest__storage_, message),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileRequestFriendshipRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileRequestFriendshipRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileRequestFriendshipResponse

@implementation ProfileRequestFriendshipResponse

@dynamic status;

typedef struct ProfileRequestFriendshipResponse__storage_ {
  uint32_t _has_storage_[1];
  ProfileRequestFriendshipResponse_FriendshipStatus status;
} ProfileRequestFriendshipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .number = ProfileRequestFriendshipResponse_FieldNumber_Status,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ProfileRequestFriendshipResponse__storage_, status),
        .defaultValue.valueEnum = ProfileRequestFriendshipResponse_FriendshipStatus_None,
        .dataTypeSpecific.enumDescFunc = ProfileRequestFriendshipResponse_FriendshipStatus_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = ProfileRequestFriendshipResponse_FriendshipStatus_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileRequestFriendshipResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileRequestFriendshipResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ProfileRequestFriendshipResponse_Status_RawValue(ProfileRequestFriendshipResponse *message) {
  GPBDescriptor *descriptor = [ProfileRequestFriendshipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileRequestFriendshipResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetProfileRequestFriendshipResponse_Status_RawValue(ProfileRequestFriendshipResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ProfileRequestFriendshipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ProfileRequestFriendshipResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ProfileRequestFriendshipResponse_FriendshipStatus

GPBEnumDescriptor *ProfileRequestFriendshipResponse_FriendshipStatus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = ProfileRequestFriendshipResponse_FriendshipStatus_None },
      { .name = "Requested", .number = ProfileRequestFriendshipResponse_FriendshipStatus_Requested },
      { .name = "Accepted", .number = ProfileRequestFriendshipResponse_FriendshipStatus_Accepted },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ProfileRequestFriendshipResponse_FriendshipStatus)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ProfileRequestFriendshipResponse_FriendshipStatus_IsValidValue];
  }
  return descriptor;
}

BOOL ProfileRequestFriendshipResponse_FriendshipStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case ProfileRequestFriendshipResponse_FriendshipStatus_None:
    case ProfileRequestFriendshipResponse_FriendshipStatus_Requested:
    case ProfileRequestFriendshipResponse_FriendshipStatus_Accepted:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ProfileUnfriendResponse

@implementation ProfileUnfriendResponse


typedef struct ProfileUnfriendResponse__storage_ {
  uint32_t _has_storage_[0];
} ProfileUnfriendResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileUnfriendResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileUnfriendResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ProfileGetFriendsResponse

@implementation ProfileGetFriendsResponse

@dynamic friendsArray, friendsArray_Count;
@dynamic sentFriendRequestsArray, sentFriendRequestsArray_Count;
@dynamic receivedFriendRequestsArray, receivedFriendRequestsArray_Count;

typedef struct ProfileGetFriendsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *friendsArray;
  NSMutableArray *sentFriendRequestsArray;
  NSMutableArray *receivedFriendRequestsArray;
} ProfileGetFriendsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "friendsArray",
        .number = ProfileGetFriendsResponse_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileGetFriendsResponse__storage_, friendsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .fieldOptions = NULL,
      },
      {
        .name = "sentFriendRequestsArray",
        .number = ProfileGetFriendsResponse_FieldNumber_SentFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileGetFriendsResponse__storage_, sentFriendRequestsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .fieldOptions = NULL,
      },
      {
        .name = "receivedFriendRequestsArray",
        .number = ProfileGetFriendsResponse_FieldNumber_ReceivedFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ProfileGetFriendsResponse__storage_, receivedFriendRequestsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ProfileGetFriendsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ProfileGetFriendsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserSetChannelRoleRequest

@implementation UserSetChannelRoleRequest

@dynamic userId;
@dynamic membershipType;

typedef struct UserSetChannelRoleRequest__storage_ {
  uint32_t _has_storage_[1];
  ChannelMembershipRecord_MembershipType membershipType;
  NSString *userId;
} UserSetChannelRoleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = UserSetChannelRoleRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserSetChannelRoleRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membershipType",
        .number = UserSetChannelRoleRequest_FieldNumber_MembershipType,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserSetChannelRoleRequest__storage_, membershipType),
        .defaultValue.valueEnum = ChannelMembershipRecord_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = ChannelMembershipRecord_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserSetChannelRoleRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserSetChannelRoleRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserSetChannelRoleRequest_MembershipType_RawValue(UserSetChannelRoleRequest *message) {
  GPBDescriptor *descriptor = [UserSetChannelRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetChannelRoleRequest_FieldNumber_MembershipType];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserSetChannelRoleRequest_MembershipType_RawValue(UserSetChannelRoleRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UserSetChannelRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetChannelRoleRequest_FieldNumber_MembershipType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserSetChannelRoleResponse

@implementation UserSetChannelRoleResponse

@dynamic error;

typedef struct UserSetChannelRoleResponse__storage_ {
  uint32_t _has_storage_[1];
  UserSetChannelRoleResponse_ErrorType error;
} UserSetChannelRoleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = UserSetChannelRoleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserSetChannelRoleResponse__storage_, error),
        .defaultValue.valueEnum = UserSetChannelRoleResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserSetChannelRoleResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = UserSetChannelRoleResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserSetChannelRoleResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserSetChannelRoleResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserSetChannelRoleResponse_Error_RawValue(UserSetChannelRoleResponse *message) {
  GPBDescriptor *descriptor = [UserSetChannelRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetChannelRoleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserSetChannelRoleResponse_Error_RawValue(UserSetChannelRoleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserSetChannelRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetChannelRoleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserSetChannelRoleResponse_ErrorType

GPBEnumDescriptor *UserSetChannelRoleResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = UserSetChannelRoleResponse_ErrorType_None },
      { .name = "Unknown", .number = UserSetChannelRoleResponse_ErrorType_Unknown },
      { .name = "UserNotInChannel", .number = UserSetChannelRoleResponse_ErrorType_UserNotInChannel },
      { .name = "Forbidden", .number = UserSetChannelRoleResponse_ErrorType_Forbidden },
      { .name = "BadRequest", .number = UserSetChannelRoleResponse_ErrorType_BadRequest },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserSetChannelRoleResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:UserSetChannelRoleResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL UserSetChannelRoleResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserSetChannelRoleResponse_ErrorType_None:
    case UserSetChannelRoleResponse_ErrorType_Unknown:
    case UserSetChannelRoleResponse_ErrorType_UserNotInChannel:
    case UserSetChannelRoleResponse_ErrorType_Forbidden:
    case UserSetChannelRoleResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserSetGroupRoleRequest

@implementation UserSetGroupRoleRequest

@dynamic userId;
@dynamic membershipType;

typedef struct UserSetGroupRoleRequest__storage_ {
  uint32_t _has_storage_[1];
  GroupMembershipRecord_MembershipType membershipType;
  NSString *userId;
} UserSetGroupRoleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = UserSetGroupRoleRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserSetGroupRoleRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "membershipType",
        .number = UserSetGroupRoleRequest_FieldNumber_MembershipType,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserSetGroupRoleRequest__storage_, membershipType),
        .defaultValue.valueEnum = GroupMembershipRecord_MembershipType_Unknown,
        .dataTypeSpecific.enumDescFunc = GroupMembershipRecord_MembershipType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserSetGroupRoleRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserSetGroupRoleRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserSetGroupRoleRequest_MembershipType_RawValue(UserSetGroupRoleRequest *message) {
  GPBDescriptor *descriptor = [UserSetGroupRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetGroupRoleRequest_FieldNumber_MembershipType];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserSetGroupRoleRequest_MembershipType_RawValue(UserSetGroupRoleRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [UserSetGroupRoleRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetGroupRoleRequest_FieldNumber_MembershipType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserSetGroupRoleResponse

@implementation UserSetGroupRoleResponse

@dynamic error;

typedef struct UserSetGroupRoleResponse__storage_ {
  uint32_t _has_storage_[1];
  UserSetGroupRoleResponse_ErrorType error;
} UserSetGroupRoleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = UserSetGroupRoleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserSetGroupRoleResponse__storage_, error),
        .defaultValue.valueEnum = UserSetGroupRoleResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserSetGroupRoleResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = UserSetGroupRoleResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserSetGroupRoleResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserSetGroupRoleResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserSetGroupRoleResponse_Error_RawValue(UserSetGroupRoleResponse *message) {
  GPBDescriptor *descriptor = [UserSetGroupRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetGroupRoleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserSetGroupRoleResponse_Error_RawValue(UserSetGroupRoleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserSetGroupRoleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserSetGroupRoleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserSetGroupRoleResponse_ErrorType

GPBEnumDescriptor *UserSetGroupRoleResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = UserSetGroupRoleResponse_ErrorType_None },
      { .name = "Unknown", .number = UserSetGroupRoleResponse_ErrorType_Unknown },
      { .name = "UserNotInGroup", .number = UserSetGroupRoleResponse_ErrorType_UserNotInGroup },
      { .name = "Forbidden", .number = UserSetGroupRoleResponse_ErrorType_Forbidden },
      { .name = "BadRequest", .number = UserSetGroupRoleResponse_ErrorType_BadRequest },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserSetGroupRoleResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:UserSetGroupRoleResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL UserSetGroupRoleResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserSetGroupRoleResponse_ErrorType_None:
    case UserSetGroupRoleResponse_ErrorType_Unknown:
    case UserSetGroupRoleResponse_ErrorType_UserNotInGroup:
    case UserSetGroupRoleResponse_ErrorType_Forbidden:
    case UserSetGroupRoleResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - UserValidateUsernameRequest

@implementation UserValidateUsernameRequest

@dynamic username;

typedef struct UserValidateUsernameRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *username;
} UserValidateUsernameRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = UserValidateUsernameRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserValidateUsernameRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserValidateUsernameRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserValidateUsernameRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserValidateUsernameResponse

@implementation UserValidateUsernameResponse

@dynamic error;

typedef struct UserValidateUsernameResponse__storage_ {
  uint32_t _has_storage_[1];
  AuthRegisterResponse_ErrorType error;
} UserValidateUsernameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = UserValidateUsernameResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserValidateUsernameResponse__storage_, error),
        .defaultValue.valueEnum = AuthRegisterResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = AuthRegisterResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserValidateUsernameResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserValidateUsernameResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserValidateUsernameResponse_Error_RawValue(UserValidateUsernameResponse *message) {
  GPBDescriptor *descriptor = [UserValidateUsernameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserValidateUsernameResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserValidateUsernameResponse_Error_RawValue(UserValidateUsernameResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserValidateUsernameResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserValidateUsernameResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UserConvertEphemeralUserRequest

@implementation UserConvertEphemeralUserRequest

@dynamic username;
@dynamic emailAddress;
@dynamic password;
@dynamic newsletter;
@dynamic termsOfService;

typedef struct UserConvertEphemeralUserRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL newsletter;
  BOOL termsOfService;
  NSString *username;
  NSString *emailAddress;
  NSString *password;
} UserConvertEphemeralUserRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "username",
        .number = UserConvertEphemeralUserRequest_FieldNumber_Username,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserConvertEphemeralUserRequest__storage_, username),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "emailAddress",
        .number = UserConvertEphemeralUserRequest_FieldNumber_EmailAddress,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserConvertEphemeralUserRequest__storage_, emailAddress),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "password",
        .number = UserConvertEphemeralUserRequest_FieldNumber_Password,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserConvertEphemeralUserRequest__storage_, password),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "newsletter",
        .number = UserConvertEphemeralUserRequest_FieldNumber_Newsletter,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(UserConvertEphemeralUserRequest__storage_, newsletter),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "termsOfService",
        .number = UserConvertEphemeralUserRequest_FieldNumber_TermsOfService,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(UserConvertEphemeralUserRequest__storage_, termsOfService),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserConvertEphemeralUserRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserConvertEphemeralUserRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UserConvertEphemeralUserResponse

@implementation UserConvertEphemeralUserResponse

@dynamic error;
@dynamic token;
@dynamic hasUser, user;

typedef struct UserConvertEphemeralUserResponse__storage_ {
  uint32_t _has_storage_[1];
  UserConvertEphemeralUserResponse_ErrorType error;
  NSString *token;
  User *user;
} UserConvertEphemeralUserResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = UserConvertEphemeralUserResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(UserConvertEphemeralUserResponse__storage_, error),
        .defaultValue.valueEnum = UserConvertEphemeralUserResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = UserConvertEphemeralUserResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = UserConvertEphemeralUserResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UserConvertEphemeralUserResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "user",
        .number = UserConvertEphemeralUserResponse_FieldNumber_User,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UserConvertEphemeralUserResponse__storage_, user),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = UserConvertEphemeralUserResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserConvertEphemeralUserResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UserConvertEphemeralUserResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UserConvertEphemeralUserResponse_Error_RawValue(UserConvertEphemeralUserResponse *message) {
  GPBDescriptor *descriptor = [UserConvertEphemeralUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserConvertEphemeralUserResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetUserConvertEphemeralUserResponse_Error_RawValue(UserConvertEphemeralUserResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [UserConvertEphemeralUserResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UserConvertEphemeralUserResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum UserConvertEphemeralUserResponse_ErrorType

GPBEnumDescriptor *UserConvertEphemeralUserResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = UserConvertEphemeralUserResponse_ErrorType_None },
      { .name = "BadRequest", .number = UserConvertEphemeralUserResponse_ErrorType_BadRequest },
      { .name = "UnknownError", .number = UserConvertEphemeralUserResponse_ErrorType_UnknownError },
      { .name = "UserNotEphemeral", .number = UserConvertEphemeralUserResponse_ErrorType_UserNotEphemeral },
      { .name = "UsernameTaken", .number = UserConvertEphemeralUserResponse_ErrorType_UsernameTaken },
      { .name = "UsernameInvalid", .number = UserConvertEphemeralUserResponse_ErrorType_UsernameInvalid },
      { .name = "EmailTaken", .number = UserConvertEphemeralUserResponse_ErrorType_EmailTaken },
      { .name = "EmailInvalid", .number = UserConvertEphemeralUserResponse_ErrorType_EmailInvalid },
      { .name = "PwTooShort", .number = UserConvertEphemeralUserResponse_ErrorType_PwTooShort },
      { .name = "PwBad", .number = UserConvertEphemeralUserResponse_ErrorType_PwBad },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(UserConvertEphemeralUserResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:UserConvertEphemeralUserResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL UserConvertEphemeralUserResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case UserConvertEphemeralUserResponse_ErrorType_None:
    case UserConvertEphemeralUserResponse_ErrorType_BadRequest:
    case UserConvertEphemeralUserResponse_ErrorType_UnknownError:
    case UserConvertEphemeralUserResponse_ErrorType_UserNotEphemeral:
    case UserConvertEphemeralUserResponse_ErrorType_UsernameTaken:
    case UserConvertEphemeralUserResponse_ErrorType_UsernameInvalid:
    case UserConvertEphemeralUserResponse_ErrorType_EmailTaken:
    case UserConvertEphemeralUserResponse_ErrorType_EmailInvalid:
    case UserConvertEphemeralUserResponse_ErrorType_PwTooShort:
    case UserConvertEphemeralUserResponse_ErrorType_PwBad:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ChatHandshakeResponse

@implementation ChatHandshakeResponse

@dynamic socketAddress;

typedef struct ChatHandshakeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *socketAddress;
} ChatHandshakeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "socketAddress",
        .number = ChatHandshakeResponse_FieldNumber_SocketAddress,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatHandshakeResponse__storage_, socketAddress),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatHandshakeResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatHandshakeResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetMessagesResponse

@implementation ChatGetMessagesResponse

@dynamic messagesArray, messagesArray_Count;

typedef struct ChatGetMessagesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *messagesArray;
} ChatGetMessagesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messagesArray",
        .number = ChatGetMessagesResponse_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChatGetMessagesResponse__storage_, messagesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(WebsocketMessage),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetMessagesResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetMessagesResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetUsersResponse

@implementation ChatGetUsersResponse

@dynamic usersArray, usersArray_Count;

typedef struct ChatGetUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} ChatGetUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .number = ChatGetUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChatGetUsersResponse__storage_, usersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetUsersResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetUsersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetChannelUsersResponse

@implementation ChatGetChannelUsersResponse

@dynamic usersArray, usersArray_Count;
@dynamic pagedUsers;
@dynamic from;
@dynamic onlineUsers;
@dynamic totalUsers;

typedef struct ChatGetChannelUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  int64_t pagedUsers;
  int64_t from;
  int64_t onlineUsers;
  int64_t totalUsers;
} ChatGetChannelUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .number = ChatGetChannelUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChatGetChannelUsersResponse__storage_, usersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChannelUser),
        .fieldOptions = NULL,
      },
      {
        .name = "pagedUsers",
        .number = ChatGetChannelUsersResponse_FieldNumber_PagedUsers,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ChatGetChannelUsersResponse__storage_, pagedUsers),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "from",
        .number = ChatGetChannelUsersResponse_FieldNumber_From,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ChatGetChannelUsersResponse__storage_, from),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "onlineUsers",
        .number = ChatGetChannelUsersResponse_FieldNumber_OnlineUsers,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ChatGetChannelUsersResponse__storage_, onlineUsers),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "totalUsers",
        .number = ChatGetChannelUsersResponse_FieldNumber_TotalUsers,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ChatGetChannelUsersResponse__storage_, totalUsers),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetChannelUsersResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetChannelUsersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetChannelsResponse

@implementation ChatGetChannelsResponse

@dynamic channelsArray, channelsArray_Count;

typedef struct ChatGetChannelsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelsArray;
} ChatGetChannelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelsArray",
        .number = ChatGetChannelsResponse_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChatGetChannelsResponse__storage_, channelsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetChannelsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetChannelsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatPostJoinedChannelsRequest

@implementation ChatPostJoinedChannelsRequest

@dynamic channelIdsArray, channelIdsArray_Count;

typedef struct ChatPostJoinedChannelsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelIdsArray;
} ChatPostJoinedChannelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelIdsArray",
        .number = ChatPostJoinedChannelsRequest_FieldNumber_ChannelIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatPostJoinedChannelsRequest__storage_, channelIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatPostJoinedChannelsRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatPostJoinedChannelsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetS3UploadDataResponse

@implementation ChatGetS3UploadDataResponse

@dynamic uRL;
@dynamic accessKeyId;
@dynamic filename;
@dynamic policy;
@dynamic signed_p;

typedef struct ChatGetS3UploadDataResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uRL;
  NSString *accessKeyId;
  NSString *filename;
  NSString *policy;
  NSString *signed_p;
} ChatGetS3UploadDataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uRL",
        .number = ChatGetS3UploadDataResponse_FieldNumber_URL,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetS3UploadDataResponse__storage_, uRL),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "accessKeyId",
        .number = ChatGetS3UploadDataResponse_FieldNumber_AccessKeyId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetS3UploadDataResponse__storage_, accessKeyId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "filename",
        .number = ChatGetS3UploadDataResponse_FieldNumber_Filename,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetS3UploadDataResponse__storage_, filename),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "policy",
        .number = ChatGetS3UploadDataResponse_FieldNumber_Policy,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetS3UploadDataResponse__storage_, policy),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "signed_p",
        .number = ChatGetS3UploadDataResponse_FieldNumber_Signed_p,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetS3UploadDataResponse__storage_, signed_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\001\001!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetS3UploadDataResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetS3UploadDataResponse__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetDirectMessageChannelRequest

@implementation ChatGetDirectMessageChannelRequest

@dynamic userIdsArray, userIdsArray_Count;

typedef struct ChatGetDirectMessageChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userIdsArray;
} ChatGetDirectMessageChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdsArray",
        .number = ChatGetDirectMessageChannelRequest_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChatGetDirectMessageChannelRequest__storage_, userIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetDirectMessageChannelRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetDirectMessageChannelRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatGetDirectMessageChannelResponse

@implementation ChatGetDirectMessageChannelResponse

@dynamic hasChannel, channel;

typedef struct ChatGetDirectMessageChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} ChatGetDirectMessageChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .number = ChatGetDirectMessageChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChatGetDirectMessageChannelResponse__storage_, channel),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatGetDirectMessageChannelResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChatGetDirectMessageChannelResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCreateGroupRequest

@implementation GroupCreateGroupRequest

@dynamic name;
@dynamic description_p;
@dynamic titleImage;
@dynamic backgroundImage;

typedef struct GroupCreateGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *description_p;
  NSString *titleImage;
  NSString *backgroundImage;
} GroupCreateGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .number = GroupCreateGroupRequest_FieldNumber_Name,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateGroupRequest__storage_, name),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = GroupCreateGroupRequest_FieldNumber_Description_p,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateGroupRequest__storage_, description_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = GroupCreateGroupRequest_FieldNumber_TitleImage,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateGroupRequest__storage_, titleImage),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = GroupCreateGroupRequest_FieldNumber_BackgroundImage,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateGroupRequest__storage_, backgroundImage),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCreateGroupRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupCreateGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCreateGroupResponse

@implementation GroupCreateGroupResponse

@dynamic error;
@dynamic hasGroup, group;

typedef struct GroupCreateGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  CreateGroupErrorType error;
  Group *group;
} GroupCreateGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = GroupCreateGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupCreateGroupResponse__storage_, error),
        .defaultValue.valueEnum = CreateGroupErrorType_None,
        .dataTypeSpecific.enumDescFunc = CreateGroupErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "group",
        .number = GroupCreateGroupResponse_FieldNumber_Group,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupCreateGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCreateGroupResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupCreateGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupCreateGroupResponse_Error_RawValue(GroupCreateGroupResponse *message) {
  GPBDescriptor *descriptor = [GroupCreateGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupCreateGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupCreateGroupResponse_Error_RawValue(GroupCreateGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupCreateGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupCreateGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GroupEditGroupRequest

@implementation GroupEditGroupRequest

@dynamic id_p;
@dynamic hasName, name;
@dynamic hasDescription_p, description_p;
@dynamic hasTitleImage, titleImage;
@dynamic hasBackgroundImage, backgroundImage;

typedef struct GroupEditGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  OptionalString *name;
  OptionalString *description_p;
  OptionalString *titleImage;
  OptionalString *backgroundImage;
} GroupEditGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = GroupEditGroupRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupEditGroupRequest__storage_, id_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "name",
        .number = GroupEditGroupRequest_FieldNumber_Name,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupEditGroupRequest__storage_, name),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = GroupEditGroupRequest_FieldNumber_Description_p,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupEditGroupRequest__storage_, description_p),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "titleImage",
        .number = GroupEditGroupRequest_FieldNumber_TitleImage,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupEditGroupRequest__storage_, titleImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
      {
        .name = "backgroundImage",
        .number = GroupEditGroupRequest_FieldNumber_BackgroundImage,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupEditGroupRequest__storage_, backgroundImage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupEditGroupRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupEditGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupEditGroupResponse

@implementation GroupEditGroupResponse

@dynamic error;
@dynamic hasGroup, group;

typedef struct GroupEditGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  CreateGroupErrorType error;
  Group *group;
} GroupEditGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = GroupEditGroupResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupEditGroupResponse__storage_, error),
        .defaultValue.valueEnum = CreateGroupErrorType_None,
        .dataTypeSpecific.enumDescFunc = CreateGroupErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "group",
        .number = GroupEditGroupResponse_FieldNumber_Group,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupEditGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupEditGroupResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupEditGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupEditGroupResponse_Error_RawValue(GroupEditGroupResponse *message) {
  GPBDescriptor *descriptor = [GroupEditGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupEditGroupResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupEditGroupResponse_Error_RawValue(GroupEditGroupResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupEditGroupResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupEditGroupResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - GroupGetGroupResponse

@implementation GroupGetGroupResponse

@dynamic hasGroup, group;
@dynamic linkedHubsArray, linkedHubsArray_Count;

typedef struct GroupGetGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
  NSMutableArray *linkedHubsArray;
} GroupGetGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .number = GroupGetGroupResponse_FieldNumber_Group,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupGetGroupResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
      {
        .name = "linkedHubsArray",
        .number = GroupGetGroupResponse_FieldNumber_LinkedHubsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupGetGroupResponse__storage_, linkedHubsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupGetGroupResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupGetGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCreateInviteCodeRequest

@implementation GroupCreateInviteCodeRequest

@dynamic groupId;

typedef struct GroupCreateInviteCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} GroupCreateInviteCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = GroupCreateInviteCodeRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateInviteCodeRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCreateInviteCodeRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupCreateInviteCodeRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupCreateInviteCodeResponse

@implementation GroupCreateInviteCodeResponse

@dynamic inviteCode;

typedef struct GroupCreateInviteCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
} GroupCreateInviteCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = GroupCreateInviteCodeResponse_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupCreateInviteCodeResponse__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupCreateInviteCodeResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupCreateInviteCodeResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupGetInviteCodeInfoRequest

@implementation GroupGetInviteCodeInfoRequest

@dynamic inviteCode;

typedef struct GroupGetInviteCodeInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
} GroupGetInviteCodeInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = GroupGetInviteCodeInfoRequest_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupGetInviteCodeInfoRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupGetInviteCodeInfoRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupGetInviteCodeInfoRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupGetInviteCodeInfoResponse

@implementation GroupGetInviteCodeInfoResponse

@dynamic hasGroup, group;

typedef struct GroupGetInviteCodeInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  Group *group;
} GroupGetInviteCodeInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "group",
        .number = GroupGetInviteCodeInfoResponse_FieldNumber_Group,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupGetInviteCodeInfoResponse__storage_, group),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupGetInviteCodeInfoResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupGetInviteCodeInfoResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupAcceptInviteRequest

@implementation GroupAcceptInviteRequest

@dynamic inviteCode;

typedef struct GroupAcceptInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteCode;
} GroupAcceptInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteCode",
        .number = GroupAcceptInviteRequest_FieldNumber_InviteCode,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupAcceptInviteRequest__storage_, inviteCode),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupAcceptInviteRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupAcceptInviteRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupAcceptInviteResponse

@implementation GroupAcceptInviteResponse

@dynamic success;

typedef struct GroupAcceptInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  BOOL success;
} GroupAcceptInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .number = GroupAcceptInviteResponse_FieldNumber_Success,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(GroupAcceptInviteResponse__storage_, success),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupAcceptInviteResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupAcceptInviteResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupLeaveGroupRequest

@implementation GroupLeaveGroupRequest

@dynamic groupId;

typedef struct GroupLeaveGroupRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
} GroupLeaveGroupRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = GroupLeaveGroupRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupLeaveGroupRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupLeaveGroupRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupLeaveGroupRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupLeaveGroupResponse

@implementation GroupLeaveGroupResponse

@dynamic hasUserInfo, userInfo;

typedef struct GroupLeaveGroupResponse__storage_ {
  uint32_t _has_storage_[1];
  UserInfo *userInfo;
} GroupLeaveGroupResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userInfo",
        .number = GroupLeaveGroupResponse_FieldNumber_UserInfo,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupLeaveGroupResponse__storage_, userInfo),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupLeaveGroupResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupLeaveGroupResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupGetGroupsResponse

@implementation GroupGetGroupsResponse

@dynamic groupsArray, groupsArray_Count;

typedef struct GroupGetGroupsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *groupsArray;
} GroupGetGroupsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupsArray",
        .number = GroupGetGroupsResponse_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupGetGroupsResponse__storage_, groupsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupGetGroupsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupGetGroupsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupAddGroupMembersRequest

@implementation GroupAddGroupMembersRequest

@dynamic groupId;
@dynamic inviteesArray, inviteesArray_Count;

typedef struct GroupAddGroupMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSMutableArray *inviteesArray;
} GroupAddGroupMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .number = GroupAddGroupMembersRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupAddGroupMembersRequest__storage_, groupId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inviteesArray",
        .number = GroupAddGroupMembersRequest_FieldNumber_InviteesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GroupAddGroupMembersRequest__storage_, inviteesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(PotentialGroupMember),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupAddGroupMembersRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupAddGroupMembersRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupAddGroupMembersResponse

@implementation GroupAddGroupMembersResponse


typedef struct GroupAddGroupMembersResponse__storage_ {
  uint32_t _has_storage_[0];
} GroupAddGroupMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupAddGroupMembersResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupAddGroupMembersResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupJoinRequest

@implementation GroupJoinRequest

@dynamic code;

typedef struct GroupJoinRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *code;
} GroupJoinRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = GroupJoinRequest_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupJoinRequest__storage_, code),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupJoinRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupJoinRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GroupJoinResponse

@implementation GroupJoinResponse

@dynamic error;

typedef struct GroupJoinResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupJoinResponse_ErrorType error;
} GroupJoinResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = GroupJoinResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupJoinResponse__storage_, error),
        .defaultValue.valueEnum = GroupJoinResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupJoinResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = GroupJoinResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupJoinResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupJoinResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupJoinResponse_Error_RawValue(GroupJoinResponse *message) {
  GPBDescriptor *descriptor = [GroupJoinResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupJoinResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupJoinResponse_Error_RawValue(GroupJoinResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupJoinResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupJoinResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GroupJoinResponse_ErrorType

GPBEnumDescriptor *GroupJoinResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = GroupJoinResponse_ErrorType_None },
      { .name = "UnknownError", .number = GroupJoinResponse_ErrorType_UnknownError },
      { .name = "BadRequest", .number = GroupJoinResponse_ErrorType_BadRequest },
      { .name = "Forbidden", .number = GroupJoinResponse_ErrorType_Forbidden },
      { .name = "Banned", .number = GroupJoinResponse_ErrorType_Banned },
      { .name = "InvalidCode", .number = GroupJoinResponse_ErrorType_InvalidCode },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupJoinResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:GroupJoinResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL GroupJoinResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupJoinResponse_ErrorType_None:
    case GroupJoinResponse_ErrorType_UnknownError:
    case GroupJoinResponse_ErrorType_BadRequest:
    case GroupJoinResponse_ErrorType_Forbidden:
    case GroupJoinResponse_ErrorType_Banned:
    case GroupJoinResponse_ErrorType_InvalidCode:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GroupLeaveResponse

@implementation GroupLeaveResponse

@dynamic error;

typedef struct GroupLeaveResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupLeaveResponse_ErrorType error;
} GroupLeaveResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = GroupLeaveResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupLeaveResponse__storage_, error),
        .defaultValue.valueEnum = GroupLeaveResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupLeaveResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = GroupLeaveResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupLeaveResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupLeaveResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupLeaveResponse_Error_RawValue(GroupLeaveResponse *message) {
  GPBDescriptor *descriptor = [GroupLeaveResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupLeaveResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupLeaveResponse_Error_RawValue(GroupLeaveResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupLeaveResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupLeaveResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GroupLeaveResponse_ErrorType

GPBEnumDescriptor *GroupLeaveResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = GroupLeaveResponse_ErrorType_None },
      { .name = "UnknownError", .number = GroupLeaveResponse_ErrorType_UnknownError },
      { .name = "BadRequest", .number = GroupLeaveResponse_ErrorType_BadRequest },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupLeaveResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:GroupLeaveResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL GroupLeaveResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupLeaveResponse_ErrorType_None:
    case GroupLeaveResponse_ErrorType_UnknownError:
    case GroupLeaveResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GroupGetGroupTokenResponse

@implementation GroupGetGroupTokenResponse

@dynamic error;
@dynamic token;

typedef struct GroupGetGroupTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  GroupGetGroupTokenResponse_ErrorType error;
  NSString *token;
} GroupGetGroupTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = GroupGetGroupTokenResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GroupGetGroupTokenResponse__storage_, error),
        .defaultValue.valueEnum = GroupGetGroupTokenResponse_ErrorType_None,
        .dataTypeSpecific.enumDescFunc = GroupGetGroupTokenResponse_ErrorType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "token",
        .number = GroupGetGroupTokenResponse_FieldNumber_Token,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GroupGetGroupTokenResponse__storage_, token),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = GroupGetGroupTokenResponse_ErrorType_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GroupGetGroupTokenResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GroupGetGroupTokenResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GroupGetGroupTokenResponse_Error_RawValue(GroupGetGroupTokenResponse *message) {
  GPBDescriptor *descriptor = [GroupGetGroupTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupGetGroupTokenResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGroupGetGroupTokenResponse_Error_RawValue(GroupGetGroupTokenResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GroupGetGroupTokenResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GroupGetGroupTokenResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GroupGetGroupTokenResponse_ErrorType

GPBEnumDescriptor *GroupGetGroupTokenResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "None", .number = GroupGetGroupTokenResponse_ErrorType_None },
      { .name = "UnknownError", .number = GroupGetGroupTokenResponse_ErrorType_UnknownError },
      { .name = "BadRequest", .number = GroupGetGroupTokenResponse_ErrorType_BadRequest },
      { .name = "Forbidden", .number = GroupGetGroupTokenResponse_ErrorType_Forbidden },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GroupGetGroupTokenResponse_ErrorType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:GroupGetGroupTokenResponse_ErrorType_IsValidValue];
  }
  return descriptor;
}

BOOL GroupGetGroupTokenResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GroupGetGroupTokenResponse_ErrorType_None:
    case GroupGetGroupTokenResponse_ErrorType_UnknownError:
    case GroupGetGroupTokenResponse_ErrorType_BadRequest:
    case GroupGetGroupTokenResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PrefsGetPrefResponse

@implementation PrefsGetPrefResponse

@dynamic hasPref, pref;

typedef struct PrefsGetPrefResponse__storage_ {
  uint32_t _has_storage_[1];
  Pref *pref;
} PrefsGetPrefResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pref",
        .number = PrefsGetPrefResponse_FieldNumber_Pref,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PrefsGetPrefResponse__storage_, pref),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefsGetPrefResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrefsGetPrefResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrefsGetPrefsResponse

@implementation PrefsGetPrefsResponse

@dynamic prefsArray, prefsArray_Count;

typedef struct PrefsGetPrefsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *prefsArray;
} PrefsGetPrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prefsArray",
        .number = PrefsGetPrefsResponse_FieldNumber_PrefsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PrefsGetPrefsResponse__storage_, prefsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefsGetPrefsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrefsGetPrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrefsSetPrefsRequest

@implementation PrefsSetPrefsRequest

@dynamic prefsArray, prefsArray_Count;

typedef struct PrefsSetPrefsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *prefsArray;
} PrefsSetPrefsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prefsArray",
        .number = PrefsSetPrefsRequest_FieldNumber_PrefsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(PrefsSetPrefsRequest__storage_, prefsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Pref),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefsSetPrefsRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrefsSetPrefsRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrefsSetPrefsResponse

@implementation PrefsSetPrefsResponse


typedef struct PrefsSetPrefsResponse__storage_ {
  uint32_t _has_storage_[0];
} PrefsSetPrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefsSetPrefsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrefsSetPrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PrefsDeletePrefsResponse

@implementation PrefsDeletePrefsResponse


typedef struct PrefsDeletePrefsResponse__storage_ {
  uint32_t _has_storage_[0];
} PrefsDeletePrefsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PrefsDeletePrefsResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(PrefsDeletePrefsResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchSearchRequest

@implementation SearchSearchRequest

@dynamic searchTerm;
@dynamic limit;
@dynamic searchUsers;
@dynamic searchChannels;
@dynamic searchGroups;
@dynamic searchGames;
@dynamic searchTags;

typedef struct SearchSearchRequest__storage_ {
  uint32_t _has_storage_[1];
  BOOL searchUsers;
  BOOL searchChannels;
  BOOL searchGroups;
  BOOL searchGames;
  BOOL searchTags;
  int32_t limit;
  NSString *searchTerm;
} SearchSearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "searchTerm",
        .number = SearchSearchRequest_FieldNumber_SearchTerm,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchSearchRequest__storage_, searchTerm),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "limit",
        .number = SearchSearchRequest_FieldNumber_Limit,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(SearchSearchRequest__storage_, limit),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchUsers",
        .number = SearchSearchRequest_FieldNumber_SearchUsers,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchSearchRequest__storage_, searchUsers),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchChannels",
        .number = SearchSearchRequest_FieldNumber_SearchChannels,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchSearchRequest__storage_, searchChannels),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchGroups",
        .number = SearchSearchRequest_FieldNumber_SearchGroups,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchSearchRequest__storage_, searchGroups),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchGames",
        .number = SearchSearchRequest_FieldNumber_SearchGames,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchSearchRequest__storage_, searchGames),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "searchTags",
        .number = SearchSearchRequest_FieldNumber_SearchTags,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SearchSearchRequest__storage_, searchTags),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchSearchRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SearchSearchRequest__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchSearchResponse

@implementation SearchSearchResponse

@dynamic usersArray, usersArray_Count;
@dynamic channelsArray, channelsArray_Count;
@dynamic groupsArray, groupsArray_Count;
@dynamic gamesArray, gamesArray_Count;
@dynamic tagsArray, tagsArray_Count;

typedef struct SearchSearchResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
  NSMutableArray *channelsArray;
  NSMutableArray *groupsArray;
  NSMutableArray *gamesArray;
  NSMutableArray *tagsArray;
} SearchSearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .number = SearchSearchResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SearchSearchResponse__storage_, usersArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .fieldOptions = NULL,
      },
      {
        .name = "channelsArray",
        .number = SearchSearchResponse_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SearchSearchResponse__storage_, channelsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .fieldOptions = NULL,
      },
      {
        .name = "groupsArray",
        .number = SearchSearchResponse_FieldNumber_GroupsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SearchSearchResponse__storage_, groupsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .fieldOptions = NULL,
      },
      {
        .name = "gamesArray",
        .number = SearchSearchResponse_FieldNumber_GamesArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(SearchSearchResponse__storage_, gamesArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .fieldOptions = NULL,
      },
      {
        .name = "tagsArray",
        .number = SearchSearchResponse_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SearchSearchResponse__storage_, tagsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchSearchResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SearchSearchResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelGetGameListResponse

@implementation ChannelGetGameListResponse

@dynamic hasPage, page;
@dynamic cacheId;

typedef struct ChannelGetGameListResponse__storage_ {
  uint32_t _has_storage_[1];
  GameListPage *page;
  NSString *cacheId;
} ChannelGetGameListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .number = ChannelGetGameListResponse_FieldNumber_Page,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChannelGetGameListResponse__storage_, page),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GameListPage),
        .fieldOptions = NULL,
      },
      {
        .name = "cacheId",
        .number = ChannelGetGameListResponse_FieldNumber_CacheId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChannelGetGameListResponse__storage_, cacheId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelGetGameListResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChannelGetGameListResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelGetGameChannelListResponse

@implementation ChannelGetGameChannelListResponse

@dynamic hasPage, page;
@dynamic cacheId;

typedef struct ChannelGetGameChannelListResponse__storage_ {
  uint32_t _has_storage_[1];
  GameChannelListPage *page;
  NSString *cacheId;
} ChannelGetGameChannelListResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .number = ChannelGetGameChannelListResponse_FieldNumber_Page,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ChannelGetGameChannelListResponse__storage_, page),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(GameChannelListPage),
        .fieldOptions = NULL,
      },
      {
        .name = "cacheId",
        .number = ChannelGetGameChannelListResponse_FieldNumber_CacheId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ChannelGetGameChannelListResponse__storage_, cacheId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelGetGameChannelListResponse class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ChannelGetGameChannelListResponse__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReportRequest

@implementation ReportRequest

@dynamic userId;
@dynamic displayName;
@dynamic avatarImageURL;
@dynamic channelId;
@dynamic channelName;
@dynamic messageId;
@dynamic messageTimestamp;
@dynamic messageBody;
@dynamic reason;

typedef struct ReportRequest__storage_ {
  uint32_t _has_storage_[1];
  ReportRequest_Reason reason;
  NSString *userId;
  NSString *displayName;
  NSString *avatarImageURL;
  NSString *channelId;
  NSString *channelName;
  NSString *messageId;
  NSString *messageTimestamp;
  NSString *messageBody;
} ReportRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = ReportRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "displayName",
        .number = ReportRequest_FieldNumber_DisplayName,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, displayName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "avatarImageURL",
        .number = ReportRequest_FieldNumber_AvatarImageURL,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, avatarImageURL),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelId",
        .number = ReportRequest_FieldNumber_ChannelId,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, channelId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "channelName",
        .number = ReportRequest_FieldNumber_ChannelName,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, channelName),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "messageId",
        .number = ReportRequest_FieldNumber_MessageId,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, messageId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "messageTimestamp",
        .number = ReportRequest_FieldNumber_MessageTimestamp,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, messageTimestamp),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "messageBody",
        .number = ReportRequest_FieldNumber_MessageBody,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReportRequest__storage_, messageBody),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "reason",
        .number = ReportRequest_FieldNumber_Reason,
        .hasIndex = 8,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(ReportRequest__storage_, reason),
        .defaultValue.valueEnum = ReportRequest_Reason_Unknown,
        .dataTypeSpecific.enumDescFunc = ReportRequest_Reason_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = ReportRequest_Reason_EnumDescriptor },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\003\006\245\241!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReportRequest class]
                                     rootClass:[ApiRoot class]
                                          file:ApiRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ReportRequest__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReportRequest_Reason_RawValue(ReportRequest *message) {
  GPBDescriptor *descriptor = [ReportRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReportRequest_FieldNumber_Reason];
  return GPBGetMessageInt32Field(message, field);
}

void SetReportRequest_Reason_RawValue(ReportRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ReportRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReportRequest_FieldNumber_Reason];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ReportRequest_Reason

GPBEnumDescriptor *ReportRequest_Reason_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = ReportRequest_Reason_Unknown },
      { .name = "AbusiveLanguage", .number = ReportRequest_Reason_AbusiveLanguage },
      { .name = "Griefing", .number = ReportRequest_Reason_Griefing },
      { .name = "Mobbing", .number = ReportRequest_Reason_Mobbing },
      { .name = "Racism", .number = ReportRequest_Reason_Racism },
      { .name = "Spam", .number = ReportRequest_Reason_Spam },
      { .name = "Other", .number = ReportRequest_Reason_Other },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ReportRequest_Reason)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:ReportRequest_Reason_IsValidValue];
  }
  return descriptor;
}

BOOL ReportRequest_Reason_IsValidValue(int32_t value__) {
  switch (value__) {
    case ReportRequest_Reason_Unknown:
    case ReportRequest_Reason_AbusiveLanguage:
    case ReportRequest_Reason_Griefing:
    case ReportRequest_Reason_Mobbing:
    case ReportRequest_Reason_Racism:
    case ReportRequest_Reason_Spam:
    case ReportRequest_Reason_Other:
      return YES;
    default:
      return NO;
  }
}


// @@protoc_insertion_point(global_scope)
