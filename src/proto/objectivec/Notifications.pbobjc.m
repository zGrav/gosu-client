// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notifications.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Notifications.pbobjc.h"
 #import "Any.pbobjc.h"
 #import "Api.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GOSUNotificationsRoot

@implementation GOSUNotificationsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnyRoot extensionRegistry]];
    [registry addExtensions:[ApiRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - GOSUNotificationsRoot_FileDescriptor

static GPBFileDescriptor *GOSUNotificationsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - GOSUReadStatusUpdate

@implementation GOSUReadStatusUpdate

@dynamic userId;
@dynamic channelId;
@dynamic timestamp;

typedef struct GOSUReadStatusUpdate__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *channelId;
  NSString *timestamp;
} GOSUReadStatusUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUReadStatusUpdate_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUReadStatusUpdate__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUReadStatusUpdate_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSUReadStatusUpdate__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = GOSUReadStatusUpdate_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUReadStatusUpdate__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUReadStatusUpdate class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUReadStatusUpdate__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUNotification

@implementation GOSUNotification

@dynamic id_p;
@dynamic title;
@dynamic detail;
@dynamic imageURL;
@dynamic read;
@dynamic priority;
@dynamic type;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic deletedAt;
@dynamic channelId;
@dynamic userId;
@dynamic hasData_p, data_p;

typedef struct GOSUNotification__storage_ {
  uint32_t _has_storage_[1];
  int32_t priority;
  GOSUNotification_NotificationType type;
  NSString *id_p;
  NSString *title;
  NSString *detail;
  NSString *imageURL;
  NSString *channelId;
  NSString *userId;
  Any *data_p;
  int64_t createdAt;
  int64_t updatedAt;
  int64_t deletedAt;
} GOSUNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detail",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_Detail,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, detail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_ImageURL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, imageURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "read",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_Read,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "priority",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_Priority,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, priority),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = GOSUNotification_NotificationType_EnumDescriptor,
        .number = GOSUNotification_FieldNumber_Type,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_CreatedAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_UpdatedAt,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "deletedAt",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_DeletedAt,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, deletedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_ChannelId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotification_FieldNumber_UserId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Any),
        .number = GOSUNotification_FieldNumber_Data_p,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(GOSUNotification__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUNotification class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUNotification__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\005\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GOSUNotification_Type_RawValue(GOSUNotification *message) {
  GPBDescriptor *descriptor = [GOSUNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GOSUNotification_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetGOSUNotification_Type_RawValue(GOSUNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [GOSUNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GOSUNotification_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GOSUNotification_NotificationType

GPBEnumDescriptor *GOSUNotification_NotificationType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000NewMessage\000MessageReply\000ChannelI"
        "nvite\000";
    static const int32_t values[] = {
        GOSUNotification_NotificationType_Unknown,
        GOSUNotification_NotificationType_NewMessage,
        GOSUNotification_NotificationType_MessageReply,
        GOSUNotification_NotificationType_ChannelInvite,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GOSUNotification_NotificationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GOSUNotification_NotificationType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GOSUNotification_NotificationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case GOSUNotification_NotificationType_Unknown:
    case GOSUNotification_NotificationType_NewMessage:
    case GOSUNotification_NotificationType_MessageReply:
    case GOSUNotification_NotificationType_ChannelInvite:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GOSUNotificationPreference

@implementation GOSUNotificationPreference

@dynamic value;

typedef struct GOSUNotificationPreference__storage_ {
  uint32_t _has_storage_[1];
  GOSUNotificationPreference_Value value;
} GOSUNotificationPreference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.enumDescFunc = GOSUNotificationPreference_Value_EnumDescriptor,
        .number = GOSUNotificationPreference_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUNotificationPreference__storage_, value),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUNotificationPreference class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUNotificationPreference__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GOSUNotificationPreference_Value_RawValue(GOSUNotificationPreference *message) {
  GPBDescriptor *descriptor = [GOSUNotificationPreference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GOSUNotificationPreference_FieldNumber_Value];
  return GPBGetMessageInt32Field(message, field);
}

void SetGOSUNotificationPreference_Value_RawValue(GOSUNotificationPreference *message, int32_t value) {
  GPBDescriptor *descriptor = [GOSUNotificationPreference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GOSUNotificationPreference_FieldNumber_Value];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum GOSUNotificationPreference_Value

GPBEnumDescriptor *GOSUNotificationPreference_Value_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000AllMessages\000OnlyMentions\000NoNotif"
        "ications\000";
    static const int32_t values[] = {
        GOSUNotificationPreference_Value_Unknown,
        GOSUNotificationPreference_Value_AllMessages,
        GOSUNotificationPreference_Value_OnlyMentions,
        GOSUNotificationPreference_Value_NoNotifications,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(GOSUNotificationPreference_Value)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:GOSUNotificationPreference_Value_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL GOSUNotificationPreference_Value_IsValidValue(int32_t value__) {
  switch (value__) {
    case GOSUNotificationPreference_Value_Unknown:
    case GOSUNotificationPreference_Value_AllMessages:
    case GOSUNotificationPreference_Value_OnlyMentions:
    case GOSUNotificationPreference_Value_NoNotifications:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GOSUNotificationPreferences

@implementation GOSUNotificationPreferences

@dynamic userId;
@dynamic preferences, preferences_Count;

typedef struct GOSUNotificationPreferences__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableDictionary *preferences;
} GOSUNotificationPreferences__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUNotificationPreferences_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUNotificationPreferences__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preferences",
        .dataTypeSpecific.className = GPBStringifySymbol(GOSUNotificationPreference),
        .number = GOSUNotificationPreferences_FieldNumber_Preferences,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GOSUNotificationPreferences__storage_, preferences),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUNotificationPreferences class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUNotificationPreferences__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUGetNotificationsRequest

@implementation GOSUGetNotificationsRequest

@dynamic userId;
@dynamic agentId;
@dynamic timestamp;

typedef struct GOSUGetNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *agentId;
  int64_t timestamp;
} GOSUGetNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetNotificationsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUGetNotificationsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetNotificationsRequest_FieldNumber_AgentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSUGetNotificationsRequest__storage_, agentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetNotificationsRequest_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUGetNotificationsRequest__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUGetNotificationsRequest class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUGetNotificationsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUGetNotificationsResponse

@implementation GOSUGetNotificationsResponse

@dynamic notificationsArray, notificationsArray_Count;
@dynamic success;
@dynamic hasError, error;

typedef struct GOSUGetNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *notificationsArray;
  APIError *error;
} GOSUGetNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "notificationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GOSUNotification),
        .number = GOSUGetNotificationsResponse_FieldNumber_NotificationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GOSUGetNotificationsResponse__storage_, notificationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetNotificationsResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(APIError),
        .number = GOSUGetNotificationsResponse_FieldNumber_Error,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUGetNotificationsResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUGetNotificationsResponse class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUGetNotificationsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUDeleteNotificationsRequest

@implementation GOSUDeleteNotificationsRequest

@dynamic userId;
@dynamic notificationIdsArray, notificationIdsArray_Count;

typedef struct GOSUDeleteNotificationsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSMutableArray *notificationIdsArray;
} GOSUDeleteNotificationsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUDeleteNotificationsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUDeleteNotificationsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "notificationIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = GOSUDeleteNotificationsRequest_FieldNumber_NotificationIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GOSUDeleteNotificationsRequest__storage_, notificationIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUDeleteNotificationsRequest class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUDeleteNotificationsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUDeleteNotificationsResponse

@implementation GOSUDeleteNotificationsResponse

@dynamic success;
@dynamic hasError, error;

typedef struct GOSUDeleteNotificationsResponse__storage_ {
  uint32_t _has_storage_[1];
  APIError *error;
} GOSUDeleteNotificationsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = GOSUDeleteNotificationsResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(APIError),
        .number = GOSUDeleteNotificationsResponse_FieldNumber_Error,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUDeleteNotificationsResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUDeleteNotificationsResponse class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUDeleteNotificationsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSURegisterTokenRequest

@implementation GOSURegisterTokenRequest

@dynamic userId;
@dynamic agentId;
@dynamic token;
@dynamic provider;
@dynamic language;

typedef struct GOSURegisterTokenRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *agentId;
  NSString *token;
  NSString *provider;
  NSString *language;
} GOSURegisterTokenRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSURegisterTokenRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentId",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenRequest_FieldNumber_AgentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSURegisterTokenRequest__storage_, agentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenRequest_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSURegisterTokenRequest__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenRequest_FieldNumber_Provider,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GOSURegisterTokenRequest__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenRequest_FieldNumber_Language,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GOSURegisterTokenRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSURegisterTokenRequest class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSURegisterTokenRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSURegisterTokenResponse

@implementation GOSURegisterTokenResponse

@dynamic userId;
@dynamic agentId;
@dynamic token;
@dynamic provider;
@dynamic subscriberId;

typedef struct GOSURegisterTokenResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *agentId;
  NSString *token;
  NSString *provider;
  NSString *subscriberId;
} GOSURegisterTokenResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenResponse_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSURegisterTokenResponse__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "agentId",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenResponse_FieldNumber_AgentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSURegisterTokenResponse__storage_, agentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenResponse_FieldNumber_Token,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSURegisterTokenResponse__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "provider",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenResponse_FieldNumber_Provider,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GOSURegisterTokenResponse__storage_, provider),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "subscriberId",
        .dataTypeSpecific.className = NULL,
        .number = GOSURegisterTokenResponse_FieldNumber_SubscriberId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(GOSURegisterTokenResponse__storage_, subscriberId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSURegisterTokenResponse class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSURegisterTokenResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUGetPreferencesRequest

@implementation GOSUGetPreferencesRequest

@dynamic userId;

typedef struct GOSUGetPreferencesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} GOSUGetPreferencesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetPreferencesRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUGetPreferencesRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUGetPreferencesRequest class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUGetPreferencesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUGetPreferencesResponse

@implementation GOSUGetPreferencesResponse

@dynamic hasPreferences, preferences;
@dynamic success;
@dynamic hasError, error;

typedef struct GOSUGetPreferencesResponse__storage_ {
  uint32_t _has_storage_[1];
  GOSUNotificationPreferences *preferences;
  APIError *error;
} GOSUGetPreferencesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "preferences",
        .dataTypeSpecific.className = GPBStringifySymbol(GOSUNotificationPreferences),
        .number = GOSUGetPreferencesResponse_FieldNumber_Preferences,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUGetPreferencesResponse__storage_, preferences),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = GOSUGetPreferencesResponse_FieldNumber_Success,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(APIError),
        .number = GOSUGetPreferencesResponse_FieldNumber_Error,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GOSUGetPreferencesResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUGetPreferencesResponse class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUGetPreferencesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUUpdatePreferenceRequest

@implementation GOSUUpdatePreferenceRequest

@dynamic userId;
@dynamic channelId;
@dynamic hasPreference, preference;

typedef struct GOSUUpdatePreferenceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *channelId;
  GOSUNotificationPreference *preference;
} GOSUUpdatePreferenceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUUpdatePreferenceRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GOSUUpdatePreferenceRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = GOSUUpdatePreferenceRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GOSUUpdatePreferenceRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preference",
        .dataTypeSpecific.className = GPBStringifySymbol(GOSUNotificationPreference),
        .number = GOSUUpdatePreferenceRequest_FieldNumber_Preference,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUUpdatePreferenceRequest__storage_, preference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUUpdatePreferenceRequest class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUUpdatePreferenceRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GOSUUpdatePreferenceResponse

@implementation GOSUUpdatePreferenceResponse

@dynamic success;
@dynamic hasError, error;

typedef struct GOSUUpdatePreferenceResponse__storage_ {
  uint32_t _has_storage_[1];
  APIError *error;
} GOSUUpdatePreferenceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = GOSUUpdatePreferenceResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(APIError),
        .number = GOSUUpdatePreferenceResponse_FieldNumber_Error,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GOSUUpdatePreferenceResponse__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GOSUUpdatePreferenceResponse class]
                                     rootClass:[GOSUNotificationsRoot class]
                                          file:GOSUNotificationsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GOSUUpdatePreferenceResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
