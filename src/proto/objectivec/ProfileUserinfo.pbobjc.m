// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile_userinfo.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ProfileUserinfo.pbobjc.h"
 #import "Optional.pbobjc.h"
 #import "HubBase.pbobjc.h"
 #import "Hub.pbobjc.h"
 #import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ProfileUserinfoRoot

@implementation ProfileUserinfoRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[OptionalRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
    [registry addExtensions:[HubRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ProfileUserinfoRoot_FileDescriptor

static GPBFileDescriptor *ProfileUserinfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - UserInfo

@implementation UserInfo

@dynamic hasUser, user;
@dynamic friendsArray, friendsArray_Count;
@dynamic sentFriendRequestsArray, sentFriendRequestsArray_Count;
@dynamic receivedFriendRequestsArray, receivedFriendRequestsArray_Count;
@dynamic groupMembershipsArray, groupMembershipsArray_Count;
@dynamic gamesArray, gamesArray_Count;
@dynamic hubMembershipsArray, hubMembershipsArray_Count;

typedef struct UserInfo__storage_ {
  uint32_t _has_storage_[1];
  User *user;
  NSMutableArray *friendsArray;
  NSMutableArray *sentFriendRequestsArray;
  NSMutableArray *receivedFriendRequestsArray;
  NSMutableArray *groupMembershipsArray;
  NSMutableArray *gamesArray;
  NSMutableArray *hubMembershipsArray;
} UserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = UserInfo_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserInfo__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "friendsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = UserInfo_FieldNumber_FriendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, friendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sentFriendRequestsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .number = UserInfo_FieldNumber_SentFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, sentFriendRequestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receivedFriendRequestsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FriendRequest),
        .number = UserInfo_FieldNumber_ReceivedFriendRequestsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, receivedFriendRequestsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupMembershipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupMembership),
        .number = UserInfo_FieldNumber_GroupMembershipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, groupMembershipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gamesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .number = UserInfo_FieldNumber_GamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, gamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hubMembershipsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HubMembership),
        .number = UserInfo_FieldNumber_HubMembershipsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UserInfo__storage_, hubMembershipsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfo class]
                                     rootClass:[ProfileUserinfoRoot class]
                                          file:ProfileUserinfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserInfo__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
