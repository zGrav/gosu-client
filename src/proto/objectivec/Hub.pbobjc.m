// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hub.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Hub.pbobjc.h"
 #import "Wrappers.pbobjc.h"
 #import "Optional.pbobjc.h"
 #import "HubBase.pbobjc.h"
 #import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HubRoot

@implementation HubRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
    [registry addExtensions:[OptionalRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - HubRoot_FileDescriptor

static GPBFileDescriptor *HubRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCHubCreateHubRequest

@implementation RPCHubCreateHubRequest

@dynamic parentIdsArray, parentIdsArray_Count;
@dynamic translationIdsArray, translationIdsArray_Count;
@dynamic userId;
@dynamic groupId;
@dynamic closed;
@dynamic title;
@dynamic shortTitle;
@dynamic description_p;
@dynamic titleImage;
@dynamic backgroundImage;
@dynamic claimedGroupId;
@dynamic language;
@dynamic nsfw;
@dynamic autoGenerateTitleSuffix;
@dynamic autoGenerateShortTitleSuffix;
@dynamic hasGeoLocation, geoLocation;

typedef struct RPCHubCreateHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *parentIdsArray;
  NSMutableArray *translationIdsArray;
  NSString *userId;
  NSString *title;
  NSString *shortTitle;
  NSString *description_p;
  NSString *titleImage;
  NSString *backgroundImage;
  NSString *claimedGroupId;
  NSString *language;
  NSString *groupId;
  GeoLocation *geoLocation;
} RPCHubCreateHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_ParentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, parentIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "translationIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_TranslationIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, translationIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "closed",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_Closed,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_Title,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_ShortTitle,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_Description_p,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_TitleImage,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_BackgroundImage,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "claimedGroupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_ClaimedGroupId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, claimedGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_Language,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nsfw",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_Nsfw,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "autoGenerateTitleSuffix",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_AutoGenerateTitleSuffix,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "autoGenerateShortTitleSuffix",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubCreateHubRequest_FieldNumber_AutoGenerateShortTitleSuffix,
        .hasIndex = 15,
        .offset = 16,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "geoLocation",
        .dataTypeSpecific.className = GPBStringifySymbol(GeoLocation),
        .number = RPCHubCreateHubRequest_FieldNumber_GeoLocation,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(RPCHubCreateHubRequest__storage_, geoLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubCreateHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubCreateHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubCreateHubResponse

@implementation RPCHubCreateHubResponse

@dynamic error;
@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct RPCHubCreateHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubCreateHubResponse_ErrorType error;
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} RPCHubCreateHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubCreateHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubCreateHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubCreateHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubCreateHubResponse_FieldNumber_Hub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubCreateHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubCreateHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubCreateHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubCreateHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubCreateHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubCreateHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubCreateHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubCreateHubResponse_Error_RawValue(RPCHubCreateHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubCreateHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubCreateHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubCreateHubResponse_Error_RawValue(RPCHubCreateHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubCreateHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubCreateHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubCreateHubResponse_ErrorType

GPBEnumDescriptor *RPCHubCreateHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000ServerError\000TitleExists\000OwnerInvali"
        "d\000GroupInvalid\000TitleImageInvalid\000Backgro"
        "undImageInvalid\000ParentsInvalid\000Translati"
        "onsInvalid\000LanguageInvalid\000TitleInvalid\000"
        "ShortTitleInvalid\000BadRequest\000ShortTitleE"
        "xists\000Forbidden\000TitleTooShort\000TitleTooLo"
        "ng\000ShortTitleTooShort\000ShortTitleTooLong\000"
        "ShortTitleReserved\000MaxMessageLengthTooLo"
        "w\000MaxMessageLengthTooHigh\000MaxMessageLeng"
        "thEphemeralTooLow\000MaxMessageLengthEpheme"
        "ralTooHigh\000MaxMessagesPerMinuteTooLow\000Ma"
        "xMessagesPerMinuteTooHigh\000MaxMessagesPer"
        "MinuteEphemeralTooLow\000MaxMessagesPerMinu"
        "teEphemeralTooHigh\000";
    static const int32_t values[] = {
        RPCHubCreateHubResponse_ErrorType_None,
        RPCHubCreateHubResponse_ErrorType_ServerError,
        RPCHubCreateHubResponse_ErrorType_TitleExists,
        RPCHubCreateHubResponse_ErrorType_OwnerInvalid,
        RPCHubCreateHubResponse_ErrorType_GroupInvalid,
        RPCHubCreateHubResponse_ErrorType_TitleImageInvalid,
        RPCHubCreateHubResponse_ErrorType_BackgroundImageInvalid,
        RPCHubCreateHubResponse_ErrorType_ParentsInvalid,
        RPCHubCreateHubResponse_ErrorType_TranslationsInvalid,
        RPCHubCreateHubResponse_ErrorType_LanguageInvalid,
        RPCHubCreateHubResponse_ErrorType_TitleInvalid,
        RPCHubCreateHubResponse_ErrorType_ShortTitleInvalid,
        RPCHubCreateHubResponse_ErrorType_BadRequest,
        RPCHubCreateHubResponse_ErrorType_ShortTitleExists,
        RPCHubCreateHubResponse_ErrorType_Forbidden,
        RPCHubCreateHubResponse_ErrorType_TitleTooShort,
        RPCHubCreateHubResponse_ErrorType_TitleTooLong,
        RPCHubCreateHubResponse_ErrorType_ShortTitleTooShort,
        RPCHubCreateHubResponse_ErrorType_ShortTitleTooLong,
        RPCHubCreateHubResponse_ErrorType_ShortTitleReserved,
        RPCHubCreateHubResponse_ErrorType_MaxMessageLengthTooLow,
        RPCHubCreateHubResponse_ErrorType_MaxMessageLengthTooHigh,
        RPCHubCreateHubResponse_ErrorType_MaxMessageLengthEphemeralTooLow,
        RPCHubCreateHubResponse_ErrorType_MaxMessageLengthEphemeralTooHigh,
        RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteTooLow,
        RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteTooHigh,
        RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteEphemeralTooLow,
        RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteEphemeralTooHigh,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubCreateHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubCreateHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubCreateHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubCreateHubResponse_ErrorType_None:
    case RPCHubCreateHubResponse_ErrorType_ServerError:
    case RPCHubCreateHubResponse_ErrorType_TitleExists:
    case RPCHubCreateHubResponse_ErrorType_OwnerInvalid:
    case RPCHubCreateHubResponse_ErrorType_GroupInvalid:
    case RPCHubCreateHubResponse_ErrorType_TitleImageInvalid:
    case RPCHubCreateHubResponse_ErrorType_BackgroundImageInvalid:
    case RPCHubCreateHubResponse_ErrorType_ParentsInvalid:
    case RPCHubCreateHubResponse_ErrorType_TranslationsInvalid:
    case RPCHubCreateHubResponse_ErrorType_LanguageInvalid:
    case RPCHubCreateHubResponse_ErrorType_TitleInvalid:
    case RPCHubCreateHubResponse_ErrorType_ShortTitleInvalid:
    case RPCHubCreateHubResponse_ErrorType_BadRequest:
    case RPCHubCreateHubResponse_ErrorType_ShortTitleExists:
    case RPCHubCreateHubResponse_ErrorType_Forbidden:
    case RPCHubCreateHubResponse_ErrorType_TitleTooShort:
    case RPCHubCreateHubResponse_ErrorType_TitleTooLong:
    case RPCHubCreateHubResponse_ErrorType_ShortTitleTooShort:
    case RPCHubCreateHubResponse_ErrorType_ShortTitleTooLong:
    case RPCHubCreateHubResponse_ErrorType_ShortTitleReserved:
    case RPCHubCreateHubResponse_ErrorType_MaxMessageLengthTooLow:
    case RPCHubCreateHubResponse_ErrorType_MaxMessageLengthTooHigh:
    case RPCHubCreateHubResponse_ErrorType_MaxMessageLengthEphemeralTooLow:
    case RPCHubCreateHubResponse_ErrorType_MaxMessageLengthEphemeralTooHigh:
    case RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteTooLow:
    case RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteTooHigh:
    case RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteEphemeralTooLow:
    case RPCHubCreateHubResponse_ErrorType_MaxMessagesPerMinuteEphemeralTooHigh:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubEditHubRequest

@implementation RPCHubEditHubRequest

@dynamic hubId;
@dynamic userId;
@dynamic groupId;
@dynamic hasParentIds, parentIds;
@dynamic hasTranslationIds, translationIds;
@dynamic hasOwnerId, ownerId;
@dynamic hasClosed, closed;
@dynamic hasTitle, title;
@dynamic hasShortTitle, shortTitle;
@dynamic hasDescription_p, description_p;
@dynamic hasTitleImage, titleImage;
@dynamic hasBackgroundImage, backgroundImage;
@dynamic hasClaimedGroupId, claimedGroupId;
@dynamic hasLanguage, language;
@dynamic hasNsfw, nsfw;
@dynamic hasWordfilterEnabled, wordfilterEnabled;
@dynamic hasWordfilterList, wordfilterList;
@dynamic hasLinkwhitelistEnabled, linkwhitelistEnabled;
@dynamic hasLinkwhitelistList, linkwhitelistList;
@dynamic hasGeoLocation, geoLocation;
@dynamic hasTopic, topic;
@dynamic hasMaxMessageLength, maxMessageLength;
@dynamic hasMaxMessagesPerMinute, maxMessagesPerMinute;
@dynamic hasMaxMessageLengthEphemeral, maxMessageLengthEphemeral;
@dynamic hasMaxMessagesPerMinuteEphemeral, maxMessagesPerMinuteEphemeral;

typedef struct RPCHubEditHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
  OptionalRepeatedString *parentIds;
  OptionalRepeatedString *translationIds;
  GPBStringValue *ownerId;
  GPBBoolValue *closed;
  GPBStringValue *title;
  GPBStringValue *shortTitle;
  GPBStringValue *description_p;
  GPBStringValue *titleImage;
  GPBStringValue *backgroundImage;
  GPBStringValue *claimedGroupId;
  GPBStringValue *language;
  GPBBoolValue *nsfw;
  NSString *groupId;
  GPBBoolValue *wordfilterEnabled;
  GPBStringValue *wordfilterList;
  GPBBoolValue *linkwhitelistEnabled;
  GPBStringValue *linkwhitelistList;
  OptionalGeoLocation *geoLocation;
  GPBStringValue *topic;
  GPBInt32Value *maxMessageLength;
  GPBInt32Value *maxMessagesPerMinute;
  GPBInt32Value *maxMessageLengthEphemeral;
  GPBInt32Value *maxMessagesPerMinuteEphemeral;
} RPCHubEditHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditHubRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "parentIds",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalRepeatedString),
        .number = RPCHubEditHubRequest_FieldNumber_ParentIds,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, parentIds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "translationIds",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalRepeatedString),
        .number = RPCHubEditHubRequest_FieldNumber_TranslationIds,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, translationIds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ownerId",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_OwnerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, ownerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "closed",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = RPCHubEditHubRequest_FieldNumber_Closed,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, closed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_Title,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_ShortTitle,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_Description_p,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_TitleImage,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_BackgroundImage,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "claimedGroupId",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_ClaimedGroupId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, claimedGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_Language,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nsfw",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = RPCHubEditHubRequest_FieldNumber_Nsfw,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, nsfw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditHubRequest_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wordfilterEnabled",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = RPCHubEditHubRequest_FieldNumber_WordfilterEnabled,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, wordfilterEnabled),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wordfilterList",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_WordfilterList,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, wordfilterList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkwhitelistEnabled",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = RPCHubEditHubRequest_FieldNumber_LinkwhitelistEnabled,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, linkwhitelistEnabled),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkwhitelistList",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_LinkwhitelistList,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, linkwhitelistList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "geoLocation",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalGeoLocation),
        .number = RPCHubEditHubRequest_FieldNumber_GeoLocation,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, geoLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubEditHubRequest_FieldNumber_Topic,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessageLength",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = RPCHubEditHubRequest_FieldNumber_MaxMessageLength,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, maxMessageLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessagesPerMinute",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = RPCHubEditHubRequest_FieldNumber_MaxMessagesPerMinute,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, maxMessagesPerMinute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessageLengthEphemeral",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = RPCHubEditHubRequest_FieldNumber_MaxMessageLengthEphemeral,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, maxMessageLengthEphemeral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessagesPerMinuteEphemeral",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = RPCHubEditHubRequest_FieldNumber_MaxMessagesPerMinuteEphemeral,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(RPCHubEditHubRequest__storage_, maxMessagesPerMinuteEphemeral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubEditHubResponse

@implementation RPCHubEditHubResponse

@dynamic error;
@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct RPCHubEditHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubCreateHubResponse_ErrorType error;
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} RPCHubEditHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubCreateHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubEditHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubEditHubResponse_FieldNumber_Hub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubEditHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubEditHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubEditHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubEditHubResponse_Error_RawValue(RPCHubEditHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubEditHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubEditHubResponse_Error_RawValue(RPCHubEditHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubEditHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCHubDeleteHubRequest

@implementation RPCHubDeleteHubRequest

@dynamic hubId;
@dynamic userId;
@dynamic groupId;

typedef struct RPCHubDeleteHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
  NSString *groupId;
} RPCHubDeleteHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubDeleteHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubDeleteHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubDeleteHubRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubDeleteHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubDeleteHubRequest_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubDeleteHubRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubDeleteHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubDeleteHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubDeleteHubResponse

@implementation RPCHubDeleteHubResponse

@dynamic error;

typedef struct RPCHubDeleteHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubDeleteHubResponse_ErrorType error;
} RPCHubDeleteHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubDeleteHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubDeleteHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubDeleteHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubDeleteHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubDeleteHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubDeleteHubResponse_Error_RawValue(RPCHubDeleteHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubDeleteHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubDeleteHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubDeleteHubResponse_Error_RawValue(RPCHubDeleteHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubDeleteHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubDeleteHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubDeleteHubResponse_ErrorType

GPBEnumDescriptor *RPCHubDeleteHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Unknown\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubDeleteHubResponse_ErrorType_None,
        RPCHubDeleteHubResponse_ErrorType_Unknown,
        RPCHubDeleteHubResponse_ErrorType_Forbidden,
        RPCHubDeleteHubResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubDeleteHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubDeleteHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubDeleteHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubDeleteHubResponse_ErrorType_None:
    case RPCHubDeleteHubResponse_ErrorType_Unknown:
    case RPCHubDeleteHubResponse_ErrorType_Forbidden:
    case RPCHubDeleteHubResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubGetHubRequest

@implementation RPCHubGetHubRequest

@dynamic hubId;
@dynamic shortTitle;
@dynamic hubIdOrShortTitle;
@dynamic populateParents;
@dynamic populateChildren;
@dynamic populateSiblings;

typedef struct RPCHubGetHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *shortTitle;
  NSString *hubIdOrShortTitle;
} RPCHubGetHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_ShortTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetHubRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hubIdOrShortTitle",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_HubIdOrShortTitle,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubGetHubRequest__storage_, hubIdOrShortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "populateParents",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_PopulateParents,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "populateChildren",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_PopulateChildren,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "populateSiblings",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetHubRequest_FieldNumber_PopulateSiblings,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetHubResponse

@implementation RPCHubGetHubResponse

@dynamic error;
@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct RPCHubGetHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetHubResponse_ErrorType error;
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} RPCHubGetHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubGetHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubGetHubResponse_FieldNumber_Hub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubGetHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubGetHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubGetHubResponse_Error_RawValue(RPCHubGetHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetHubResponse_Error_RawValue(RPCHubGetHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubGetHubResponse_ErrorType

GPBEnumDescriptor *RPCHubGetHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Unknown\000NotFound\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubGetHubResponse_ErrorType_None,
        RPCHubGetHubResponse_ErrorType_Unknown,
        RPCHubGetHubResponse_ErrorType_NotFound,
        RPCHubGetHubResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubGetHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubGetHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubGetHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubGetHubResponse_ErrorType_None:
    case RPCHubGetHubResponse_ErrorType_Unknown:
    case RPCHubGetHubResponse_ErrorType_NotFound:
    case RPCHubGetHubResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubLinkHubRequest

@implementation RPCHubLinkHubRequest

@dynamic hubId;
@dynamic groupId;
@dynamic userId;

typedef struct RPCHubLinkHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *groupId;
  NSString *userId;
} RPCHubLinkHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubLinkHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubLinkHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubLinkHubRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubLinkHubRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubLinkHubRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubLinkHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubLinkHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubLinkHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubLinkHubResponse

@implementation RPCHubLinkHubResponse

@dynamic error;

typedef struct RPCHubLinkHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubLinkHubResponse_ErrorType error;
} RPCHubLinkHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubLinkHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubLinkHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubLinkHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubLinkHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubLinkHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubLinkHubResponse_Error_RawValue(RPCHubLinkHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubLinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubLinkHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubLinkHubResponse_Error_RawValue(RPCHubLinkHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubLinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubLinkHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubLinkHubResponse_ErrorType

GPBEnumDescriptor *RPCHubLinkHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000A"
        "lreadyLinked\000";
    static const int32_t values[] = {
        RPCHubLinkHubResponse_ErrorType_None,
        RPCHubLinkHubResponse_ErrorType_UnknownError,
        RPCHubLinkHubResponse_ErrorType_Forbidden,
        RPCHubLinkHubResponse_ErrorType_BadRequest,
        RPCHubLinkHubResponse_ErrorType_AlreadyLinked,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubLinkHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubLinkHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubLinkHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubLinkHubResponse_ErrorType_None:
    case RPCHubLinkHubResponse_ErrorType_UnknownError:
    case RPCHubLinkHubResponse_ErrorType_Forbidden:
    case RPCHubLinkHubResponse_ErrorType_BadRequest:
    case RPCHubLinkHubResponse_ErrorType_AlreadyLinked:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubUnlinkHubRequest

@implementation RPCHubUnlinkHubRequest

@dynamic hubId;
@dynamic groupId;
@dynamic userId;

typedef struct RPCHubUnlinkHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *groupId;
  NSString *userId;
} RPCHubUnlinkHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubUnlinkHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubUnlinkHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubUnlinkHubRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubUnlinkHubRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubUnlinkHubRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubUnlinkHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubUnlinkHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubUnlinkHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubUnlinkHubResponse

@implementation RPCHubUnlinkHubResponse

@dynamic error;

typedef struct RPCHubUnlinkHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubUnlinkHubResponse_ErrorType error;
} RPCHubUnlinkHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubUnlinkHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubUnlinkHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubUnlinkHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubUnlinkHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubUnlinkHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubUnlinkHubResponse_Error_RawValue(RPCHubUnlinkHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubUnlinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubUnlinkHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubUnlinkHubResponse_Error_RawValue(RPCHubUnlinkHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubUnlinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubUnlinkHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubUnlinkHubResponse_ErrorType

GPBEnumDescriptor *RPCHubUnlinkHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000N"
        "otLinked\000";
    static const int32_t values[] = {
        RPCHubUnlinkHubResponse_ErrorType_None,
        RPCHubUnlinkHubResponse_ErrorType_UnknownError,
        RPCHubUnlinkHubResponse_ErrorType_Forbidden,
        RPCHubUnlinkHubResponse_ErrorType_BadRequest,
        RPCHubUnlinkHubResponse_ErrorType_NotLinked,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubUnlinkHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubUnlinkHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubUnlinkHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubUnlinkHubResponse_ErrorType_None:
    case RPCHubUnlinkHubResponse_ErrorType_UnknownError:
    case RPCHubUnlinkHubResponse_ErrorType_Forbidden:
    case RPCHubUnlinkHubResponse_ErrorType_BadRequest:
    case RPCHubUnlinkHubResponse_ErrorType_NotLinked:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubGetAllHubsRequest

@implementation RPCHubGetAllHubsRequest

@dynamic limit;

typedef struct RPCHubGetAllHubsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
} RPCHubGetAllHubsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetAllHubsRequest_FieldNumber_Limit,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetAllHubsRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetAllHubsRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetAllHubsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetAllHubsResponse

@implementation RPCHubGetAllHubsResponse

@dynamic hubsArray, hubsArray_Count;

typedef struct RPCHubGetAllHubsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hubsArray;
} RPCHubGetAllHubsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = RPCHubGetAllHubsResponse_FieldNumber_HubsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetAllHubsResponse__storage_, hubsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetAllHubsResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetAllHubsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubValidateTitleRequest

@implementation RPCHubValidateTitleRequest

@dynamic hasTitle, title;
@dynamic hasShortTitle, shortTitle;

typedef struct RPCHubValidateTitleRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *title;
  GPBStringValue *shortTitle;
} RPCHubValidateTitleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubValidateTitleRequest_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubValidateTitleRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCHubValidateTitleRequest_FieldNumber_ShortTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubValidateTitleRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubValidateTitleRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubValidateTitleRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubValidateTitleResponse

@implementation RPCHubValidateTitleResponse

@dynamic error;

typedef struct RPCHubValidateTitleResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubValidateTitleResponse_ErrorType error;
} RPCHubValidateTitleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubValidateTitleResponse_ErrorType_EnumDescriptor,
        .number = RPCHubValidateTitleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubValidateTitleResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubValidateTitleResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubValidateTitleResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubValidateTitleResponse_Error_RawValue(RPCHubValidateTitleResponse *message) {
  GPBDescriptor *descriptor = [RPCHubValidateTitleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubValidateTitleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubValidateTitleResponse_Error_RawValue(RPCHubValidateTitleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubValidateTitleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubValidateTitleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubValidateTitleResponse_ErrorType

GPBEnumDescriptor *RPCHubValidateTitleResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000BadRequest\000ServerError\000TitleExists\000"
        "TitleInvalid\000ShortTitleExists\000ShortTitle"
        "Invalid\000TitleTooShort\000TitleTooLong\000Short"
        "TitleTooShort\000ShortTitleTooLong\000ShortTit"
        "leReserved\000";
    static const int32_t values[] = {
        RPCHubValidateTitleResponse_ErrorType_None,
        RPCHubValidateTitleResponse_ErrorType_BadRequest,
        RPCHubValidateTitleResponse_ErrorType_ServerError,
        RPCHubValidateTitleResponse_ErrorType_TitleExists,
        RPCHubValidateTitleResponse_ErrorType_TitleInvalid,
        RPCHubValidateTitleResponse_ErrorType_ShortTitleExists,
        RPCHubValidateTitleResponse_ErrorType_ShortTitleInvalid,
        RPCHubValidateTitleResponse_ErrorType_TitleTooShort,
        RPCHubValidateTitleResponse_ErrorType_TitleTooLong,
        RPCHubValidateTitleResponse_ErrorType_ShortTitleTooShort,
        RPCHubValidateTitleResponse_ErrorType_ShortTitleTooLong,
        RPCHubValidateTitleResponse_ErrorType_ShortTitleReserved,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubValidateTitleResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubValidateTitleResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubValidateTitleResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubValidateTitleResponse_ErrorType_None:
    case RPCHubValidateTitleResponse_ErrorType_BadRequest:
    case RPCHubValidateTitleResponse_ErrorType_ServerError:
    case RPCHubValidateTitleResponse_ErrorType_TitleExists:
    case RPCHubValidateTitleResponse_ErrorType_TitleInvalid:
    case RPCHubValidateTitleResponse_ErrorType_ShortTitleExists:
    case RPCHubValidateTitleResponse_ErrorType_ShortTitleInvalid:
    case RPCHubValidateTitleResponse_ErrorType_TitleTooShort:
    case RPCHubValidateTitleResponse_ErrorType_TitleTooLong:
    case RPCHubValidateTitleResponse_ErrorType_ShortTitleTooShort:
    case RPCHubValidateTitleResponse_ErrorType_ShortTitleTooLong:
    case RPCHubValidateTitleResponse_ErrorType_ShortTitleReserved:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubAddMemberRequest

@implementation RPCHubAddMemberRequest

@dynamic identifierOneOfCase;
@dynamic hubId;
@dynamic inviterId;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;
@dynamic fetchBanned;
@dynamic banDuration;
@dynamic inviteText;
@dynamic joinLink;

typedef struct RPCHubAddMemberRequest__storage_ {
  uint32_t _has_storage_[2];
  MembershipEntry_MembershipType type;
  NSString *hubId;
  NSString *inviterId;
  NSString *userId;
  NSString *email;
  NSString *inviteText;
  NSString *joinLink;
  int64_t banDuration;
} RPCHubAddMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_UserId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_Email,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = RPCHubAddMemberRequest_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fetchExisting",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchPending",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchBanned",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_FetchBanned,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_BanDuration,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_InviteText,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joinLink",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMemberRequest_FieldNumber_JoinLink,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RPCHubAddMemberRequest__storage_, joinLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddMemberRequest__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "identifier",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubAddMemberRequest_Type_RawValue(RPCHubAddMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCHubAddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubAddMemberRequest_Type_RawValue(RPCHubAddMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubAddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void RPCHubAddMemberRequest_ClearIdentifierOneOfCase(RPCHubAddMemberRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - RPCHubAddMemberResponse

@implementation RPCHubAddMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic hasUpdatedEntry, updatedEntry;

typedef struct RPCHubAddMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubAddMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  MembershipEntry *updatedEntry;
} RPCHubAddMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubAddMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCHubAddMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubAddMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddMemberResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubAddMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddMemberResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubAddMemberResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddMemberResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedEntry",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubAddMemberResponse_FieldNumber_UpdatedEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubAddMemberResponse__storage_, updatedEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubAddMemberResponse_Error_RawValue(RPCHubAddMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubAddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubAddMemberResponse_Error_RawValue(RPCHubAddMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubAddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubAddMemberResponse_ErrorType

GPBEnumDescriptor *RPCHubAddMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000InvalidUserI"
        "d\000InvalidEmail\000InvalidMembershipType\000Bad"
        "Request\000AlreadyPending\000AlreadyMember\000Alr"
        "eadyBanned\000";
    static const int32_t values[] = {
        RPCHubAddMemberResponse_ErrorType_None,
        RPCHubAddMemberResponse_ErrorType_UnknownError,
        RPCHubAddMemberResponse_ErrorType_Forbidden,
        RPCHubAddMemberResponse_ErrorType_InvalidUserId,
        RPCHubAddMemberResponse_ErrorType_InvalidEmail,
        RPCHubAddMemberResponse_ErrorType_InvalidMembershipType,
        RPCHubAddMemberResponse_ErrorType_BadRequest,
        RPCHubAddMemberResponse_ErrorType_AlreadyPending,
        RPCHubAddMemberResponse_ErrorType_AlreadyMember,
        RPCHubAddMemberResponse_ErrorType_AlreadyBanned,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubAddMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubAddMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubAddMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubAddMemberResponse_ErrorType_None:
    case RPCHubAddMemberResponse_ErrorType_UnknownError:
    case RPCHubAddMemberResponse_ErrorType_Forbidden:
    case RPCHubAddMemberResponse_ErrorType_InvalidUserId:
    case RPCHubAddMemberResponse_ErrorType_InvalidEmail:
    case RPCHubAddMemberResponse_ErrorType_InvalidMembershipType:
    case RPCHubAddMemberResponse_ErrorType_BadRequest:
    case RPCHubAddMemberResponse_ErrorType_AlreadyPending:
    case RPCHubAddMemberResponse_ErrorType_AlreadyMember:
    case RPCHubAddMemberResponse_ErrorType_AlreadyBanned:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubAddMembersRequest

@implementation RPCHubAddMembersRequest

@dynamic hubId;
@dynamic inviterId;
@dynamic entriesArray, entriesArray_Count;
@dynamic inviteText;
@dynamic joinLink;

typedef struct RPCHubAddMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *inviterId;
  NSMutableArray *entriesArray;
  NSString *inviteText;
  NSString *joinLink;
} RPCHubAddMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMembersRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddMembersRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMembersRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubAddMembersRequest__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HubAddMembersRequestEntry),
        .number = RPCHubAddMembersRequest_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddMembersRequest__storage_, entriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMembersRequest_FieldNumber_InviteText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubAddMembersRequest__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joinLink",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddMembersRequest_FieldNumber_JoinLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubAddMembersRequest__storage_, joinLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddMembersRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubAddMembersResponse

@implementation RPCHubAddMembersResponse

@dynamic error;
@dynamic updatedEntriesArray, updatedEntriesArray_Count;

typedef struct RPCHubAddMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  HubAddMembersResponse_ErrorType error;
  NSMutableArray *updatedEntriesArray;
} RPCHubAddMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = HubAddMembersResponse_ErrorType_EnumDescriptor,
        .number = RPCHubAddMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "updatedEntriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HubAddMembersResponseEntry),
        .number = RPCHubAddMembersResponse_FieldNumber_UpdatedEntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddMembersResponse__storage_, updatedEntriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubAddMembersResponse_Error_RawValue(RPCHubAddMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCHubAddMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubAddMembersResponse_Error_RawValue(RPCHubAddMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubAddMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCHubGetMembersRequest

@implementation RPCHubGetMembersRequest

@dynamic hubId;
@dynamic userId;
@dynamic fetchExisting;
@dynamic fetchPending;
@dynamic fetchBanned;
@dynamic size;
@dynamic from;

typedef struct RPCHubGetMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
  int64_t size;
  int64_t from;
} RPCHubGetMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetMembersRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetMembersRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fetchExisting",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_FetchExisting,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchPending",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_FetchPending,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchBanned",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_FetchBanned,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_Size,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RPCHubGetMembersRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersRequest_FieldNumber_From,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(RPCHubGetMembersRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetMembersRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetMembersResponse

@implementation RPCHubGetMembersResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic totalUsers;
@dynamic from;
@dynamic pagedUsers;

typedef struct RPCHubGetMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetMembersResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  int64_t totalUsers;
  int64_t from;
  int64_t pagedUsers;
} RPCHubGetMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetMembersResponse_ErrorType_EnumDescriptor,
        .number = RPCHubGetMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubGetMembersResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubGetMembersResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubGetMembersResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersResponse_FieldNumber_TotalUsers,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, totalUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersResponse_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMembersResponse_FieldNumber_PagedUsers,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubGetMembersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubGetMembersResponse_Error_RawValue(RPCHubGetMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetMembersResponse_Error_RawValue(RPCHubGetMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubGetMembersResponse_ErrorType

GPBEnumDescriptor *RPCHubGetMembersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubGetMembersResponse_ErrorType_None,
        RPCHubGetMembersResponse_ErrorType_UnknownError,
        RPCHubGetMembersResponse_ErrorType_Forbidden,
        RPCHubGetMembersResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubGetMembersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubGetMembersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubGetMembersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubGetMembersResponse_ErrorType_None:
    case RPCHubGetMembersResponse_ErrorType_UnknownError:
    case RPCHubGetMembersResponse_ErrorType_Forbidden:
    case RPCHubGetMembersResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MembershipEntry

@implementation MembershipEntry

@dynamic userId;
@dynamic invitedEmail;
@dynamic status;
@dynamic type;
@dynamic hasUser, user;
@dynamic hasOwner, owner;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic derivedType;
@dynamic parentType;
@dynamic bannedUntil;

typedef struct MembershipEntry__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_Status status;
  MembershipEntry_MembershipType type;
  MembershipEntry_MembershipType derivedType;
  MembershipEntry_MembershipType parentType;
  NSString *userId;
  NSString *invitedEmail;
  ChatUser *user;
  ChatUser *owner;
  int64_t createdAt;
  int64_t updatedAt;
  int64_t bannedUntil;
} MembershipEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MembershipEntry_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invitedEmail",
        .dataTypeSpecific.className = NULL,
        .number = MembershipEntry_FieldNumber_InvitedEmail,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, invitedEmail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_Status_EnumDescriptor,
        .number = MembershipEntry_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = MembershipEntry_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = MembershipEntry_FieldNumber_User,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = MembershipEntry_FieldNumber_Owner,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = MembershipEntry_FieldNumber_CreatedAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = MembershipEntry_FieldNumber_UpdatedAt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "derivedType",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = MembershipEntry_FieldNumber_DerivedType,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, derivedType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "parentType",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = MembershipEntry_FieldNumber_ParentType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, parentType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "bannedUntil",
        .dataTypeSpecific.className = NULL,
        .number = MembershipEntry_FieldNumber_BannedUntil,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(MembershipEntry__storage_, bannedUntil),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MembershipEntry class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MembershipEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MembershipEntry_Status_RawValue(MembershipEntry *message) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetMembershipEntry_Status_RawValue(MembershipEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MembershipEntry_Type_RawValue(MembershipEntry *message) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetMembershipEntry_Type_RawValue(MembershipEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MembershipEntry_DerivedType_RawValue(MembershipEntry *message) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_DerivedType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMembershipEntry_DerivedType_RawValue(MembershipEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_DerivedType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t MembershipEntry_ParentType_RawValue(MembershipEntry *message) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_ParentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetMembershipEntry_ParentType_RawValue(MembershipEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [MembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MembershipEntry_FieldNumber_ParentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum MembershipEntry_Status

GPBEnumDescriptor *MembershipEntry_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "StatusUnknown\000StatusExisting\000StatusPendi"
        "ng\000StatusBanned\000";
    static const int32_t values[] = {
        MembershipEntry_Status_StatusUnknown,
        MembershipEntry_Status_StatusExisting,
        MembershipEntry_Status_StatusPending,
        MembershipEntry_Status_StatusBanned,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MembershipEntry_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MembershipEntry_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MembershipEntry_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case MembershipEntry_Status_StatusUnknown:
    case MembershipEntry_Status_StatusExisting:
    case MembershipEntry_Status_StatusPending:
    case MembershipEntry_Status_StatusBanned:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MembershipEntry_MembershipType

GPBEnumDescriptor *MembershipEntry_MembershipType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Banned\000None\000Member\000Moderator\000Own"
        "er\000";
    static const int32_t values[] = {
        MembershipEntry_MembershipType_Unknown,
        MembershipEntry_MembershipType_Banned,
        MembershipEntry_MembershipType_None,
        MembershipEntry_MembershipType_Member,
        MembershipEntry_MembershipType_Moderator,
        MembershipEntry_MembershipType_Owner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MembershipEntry_MembershipType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MembershipEntry_MembershipType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MembershipEntry_MembershipType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MembershipEntry_MembershipType_Unknown:
    case MembershipEntry_MembershipType_Banned:
    case MembershipEntry_MembershipType_None:
    case MembershipEntry_MembershipType_Member:
    case MembershipEntry_MembershipType_Moderator:
    case MembershipEntry_MembershipType_Owner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubSendInviteRequest

@implementation RPCHubSendInviteRequest

@dynamic hubId;
@dynamic senderId;
@dynamic userId;
@dynamic email;

typedef struct RPCHubSendInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *senderId;
  NSString *userId;
  NSString *email;
} RPCHubSendInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubSendInviteRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubSendInviteRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "senderId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubSendInviteRequest_FieldNumber_SenderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubSendInviteRequest__storage_, senderId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubSendInviteRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubSendInviteRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubSendInviteRequest_FieldNumber_Email,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubSendInviteRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubSendInviteRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubSendInviteRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubSendInviteResponse

@implementation RPCHubSendInviteResponse

@dynamic error;

typedef struct RPCHubSendInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubSendInviteResponse_ErrorType error;
} RPCHubSendInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubSendInviteResponse_ErrorType_EnumDescriptor,
        .number = RPCHubSendInviteResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubSendInviteResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubSendInviteResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubSendInviteResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubSendInviteResponse_Error_RawValue(RPCHubSendInviteResponse *message) {
  GPBDescriptor *descriptor = [RPCHubSendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubSendInviteResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubSendInviteResponse_Error_RawValue(RPCHubSendInviteResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubSendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubSendInviteResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubSendInviteResponse_ErrorType

GPBEnumDescriptor *RPCHubSendInviteResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000AlreadyMembe"
        "r\000NotInvited\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubSendInviteResponse_ErrorType_None,
        RPCHubSendInviteResponse_ErrorType_UnknownError,
        RPCHubSendInviteResponse_ErrorType_Forbidden,
        RPCHubSendInviteResponse_ErrorType_AlreadyMember,
        RPCHubSendInviteResponse_ErrorType_NotInvited,
        RPCHubSendInviteResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubSendInviteResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubSendInviteResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubSendInviteResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubSendInviteResponse_ErrorType_None:
    case RPCHubSendInviteResponse_ErrorType_UnknownError:
    case RPCHubSendInviteResponse_ErrorType_Forbidden:
    case RPCHubSendInviteResponse_ErrorType_AlreadyMember:
    case RPCHubSendInviteResponse_ErrorType_NotInvited:
    case RPCHubSendInviteResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubRequestMembershipRequest

@implementation RPCHubRequestMembershipRequest

@dynamic hubId;
@dynamic userId;

typedef struct RPCHubRequestMembershipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
} RPCHubRequestMembershipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubRequestMembershipRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubRequestMembershipRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubRequestMembershipRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubRequestMembershipRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubRequestMembershipRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubRequestMembershipRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubRequestMembershipResponse

@implementation RPCHubRequestMembershipResponse

@dynamic error;

typedef struct RPCHubRequestMembershipResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubRequestMembershipResponse_ErrorType error;
} RPCHubRequestMembershipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubRequestMembershipResponse_ErrorType_EnumDescriptor,
        .number = RPCHubRequestMembershipResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubRequestMembershipResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubRequestMembershipResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubRequestMembershipResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubRequestMembershipResponse_Error_RawValue(RPCHubRequestMembershipResponse *message) {
  GPBDescriptor *descriptor = [RPCHubRequestMembershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubRequestMembershipResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubRequestMembershipResponse_Error_RawValue(RPCHubRequestMembershipResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubRequestMembershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubRequestMembershipResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubRequestMembershipResponse_ErrorType

GPBEnumDescriptor *RPCHubRequestMembershipResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000AlreadyMemb"
        "er\000Banned\000HubNotClosed\000";
    static const int32_t values[] = {
        RPCHubRequestMembershipResponse_ErrorType_None,
        RPCHubRequestMembershipResponse_ErrorType_UnknownError,
        RPCHubRequestMembershipResponse_ErrorType_BadRequest,
        RPCHubRequestMembershipResponse_ErrorType_AlreadyMember,
        RPCHubRequestMembershipResponse_ErrorType_Banned,
        RPCHubRequestMembershipResponse_ErrorType_HubNotClosed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubRequestMembershipResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubRequestMembershipResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubRequestMembershipResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubRequestMembershipResponse_ErrorType_None:
    case RPCHubRequestMembershipResponse_ErrorType_UnknownError:
    case RPCHubRequestMembershipResponse_ErrorType_BadRequest:
    case RPCHubRequestMembershipResponse_ErrorType_AlreadyMember:
    case RPCHubRequestMembershipResponse_ErrorType_Banned:
    case RPCHubRequestMembershipResponse_ErrorType_HubNotClosed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubEditMemberRequest

@implementation RPCHubEditMemberRequest

@dynamic hubId;
@dynamic editerId;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;
@dynamic fetchBanned;
@dynamic banDuration;

typedef struct RPCHubEditMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *hubId;
  NSString *editerId;
  NSString *userId;
  NSString *email;
  int64_t banDuration;
} RPCHubEditMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "editerId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_EditerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, editerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_Email,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = RPCHubEditMemberRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fetchExisting",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchPending",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchBanned",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_FetchBanned,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditMemberRequest_FieldNumber_BanDuration,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(RPCHubEditMemberRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubEditMemberRequest_Type_RawValue(RPCHubEditMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCHubEditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubEditMemberRequest_Type_RawValue(RPCHubEditMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubEditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCHubEditMemberResponse

@implementation RPCHubEditMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic hasUpdatedEntry, updatedEntry;

typedef struct RPCHubEditMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubEditMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  MembershipEntry *updatedEntry;
} RPCHubEditMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubEditMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCHubEditMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubEditMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditMemberResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubEditMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditMemberResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubEditMemberResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditMemberResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedEntry",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCHubEditMemberResponse_FieldNumber_UpdatedEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubEditMemberResponse__storage_, updatedEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubEditMemberResponse_Error_RawValue(RPCHubEditMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubEditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubEditMemberResponse_Error_RawValue(RPCHubEditMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubEditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubEditMemberResponse_ErrorType

GPBEnumDescriptor *RPCHubEditMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubEditMemberResponse_ErrorType_None,
        RPCHubEditMemberResponse_ErrorType_UnknownError,
        RPCHubEditMemberResponse_ErrorType_Forbidden,
        RPCHubEditMemberResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubEditMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubEditMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubEditMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubEditMemberResponse_ErrorType_None:
    case RPCHubEditMemberResponse_ErrorType_UnknownError:
    case RPCHubEditMemberResponse_ErrorType_Forbidden:
    case RPCHubEditMemberResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubJoinHubRequest

@implementation RPCHubJoinHubRequest

@dynamic hubId;
@dynamic userId;
@dynamic code;

typedef struct RPCHubJoinHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
  NSString *code;
} RPCHubJoinHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubJoinHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubJoinHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubJoinHubRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubJoinHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubJoinHubRequest_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubJoinHubRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubJoinHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubJoinHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubJoinHubResponse

@implementation RPCHubJoinHubResponse

@dynamic error;

typedef struct RPCHubJoinHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubJoinHubResponse_ErrorType error;
} RPCHubJoinHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubJoinHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubJoinHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubJoinHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubJoinHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubJoinHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubJoinHubResponse_Error_RawValue(RPCHubJoinHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubJoinHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubJoinHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubJoinHubResponse_Error_RawValue(RPCHubJoinHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubJoinHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubJoinHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubJoinHubResponse_ErrorType

GPBEnumDescriptor *RPCHubJoinHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000B"
        "anned\000InvalidCode\000";
    static const int32_t values[] = {
        RPCHubJoinHubResponse_ErrorType_None,
        RPCHubJoinHubResponse_ErrorType_UnknownError,
        RPCHubJoinHubResponse_ErrorType_BadRequest,
        RPCHubJoinHubResponse_ErrorType_Forbidden,
        RPCHubJoinHubResponse_ErrorType_Banned,
        RPCHubJoinHubResponse_ErrorType_InvalidCode,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubJoinHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubJoinHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubJoinHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubJoinHubResponse_ErrorType_None:
    case RPCHubJoinHubResponse_ErrorType_UnknownError:
    case RPCHubJoinHubResponse_ErrorType_BadRequest:
    case RPCHubJoinHubResponse_ErrorType_Forbidden:
    case RPCHubJoinHubResponse_ErrorType_Banned:
    case RPCHubJoinHubResponse_ErrorType_InvalidCode:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubLeaveHubRequest

@implementation RPCHubLeaveHubRequest

@dynamic hubId;
@dynamic userId;

typedef struct RPCHubLeaveHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
} RPCHubLeaveHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubLeaveHubRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubLeaveHubRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubLeaveHubRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubLeaveHubRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubLeaveHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubLeaveHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubLeaveHubResponse

@implementation RPCHubLeaveHubResponse

@dynamic error;

typedef struct RPCHubLeaveHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubLeaveHubResponse_ErrorType error;
} RPCHubLeaveHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubLeaveHubResponse_ErrorType_EnumDescriptor,
        .number = RPCHubLeaveHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubLeaveHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubLeaveHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubLeaveHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubLeaveHubResponse_Error_RawValue(RPCHubLeaveHubResponse *message) {
  GPBDescriptor *descriptor = [RPCHubLeaveHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubLeaveHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubLeaveHubResponse_Error_RawValue(RPCHubLeaveHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubLeaveHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubLeaveHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubLeaveHubResponse_ErrorType

GPBEnumDescriptor *RPCHubLeaveHubResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubLeaveHubResponse_ErrorType_None,
        RPCHubLeaveHubResponse_ErrorType_UnknownError,
        RPCHubLeaveHubResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubLeaveHubResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubLeaveHubResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubLeaveHubResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubLeaveHubResponse_ErrorType_None:
    case RPCHubLeaveHubResponse_ErrorType_UnknownError:
    case RPCHubLeaveHubResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubAddExternalMemberRequest

@implementation RPCHubAddExternalMemberRequest

@dynamic hubId;
@dynamic actingUserId;
@dynamic actingGroupId;
@dynamic externalUserId;
@dynamic type;

typedef struct RPCHubAddExternalMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *hubId;
  NSString *actingUserId;
  NSString *actingGroupId;
  NSString *externalUserId;
} RPCHubAddExternalMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddExternalMemberRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddExternalMemberRequest_FieldNumber_ActingUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberRequest__storage_, actingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingGroupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddExternalMemberRequest_FieldNumber_ActingGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberRequest__storage_, actingGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubAddExternalMemberRequest_FieldNumber_ExternalUserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = RPCHubAddExternalMemberRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddExternalMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddExternalMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubAddExternalMemberRequest_Type_RawValue(RPCHubAddExternalMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCHubAddExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddExternalMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubAddExternalMemberRequest_Type_RawValue(RPCHubAddExternalMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubAddExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddExternalMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCHubAddExternalMemberResponse

@implementation RPCHubAddExternalMemberResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct RPCHubAddExternalMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubAddExternalMemberResponse_ErrorType error;
  NSMutableArray *usersArray;
} RPCHubAddExternalMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubAddExternalMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCHubAddExternalMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = RPCHubAddExternalMemberResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubAddExternalMemberResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubAddExternalMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubAddExternalMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubAddExternalMemberResponse_Error_RawValue(RPCHubAddExternalMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubAddExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddExternalMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubAddExternalMemberResponse_Error_RawValue(RPCHubAddExternalMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubAddExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubAddExternalMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubAddExternalMemberResponse_ErrorType

GPBEnumDescriptor *RPCHubAddExternalMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000I"
        "nvalidMembershipType\000AlreadyMember\000";
    static const int32_t values[] = {
        RPCHubAddExternalMemberResponse_ErrorType_None,
        RPCHubAddExternalMemberResponse_ErrorType_UnknownError,
        RPCHubAddExternalMemberResponse_ErrorType_BadRequest,
        RPCHubAddExternalMemberResponse_ErrorType_Forbidden,
        RPCHubAddExternalMemberResponse_ErrorType_InvalidMembershipType,
        RPCHubAddExternalMemberResponse_ErrorType_AlreadyMember,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubAddExternalMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubAddExternalMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubAddExternalMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubAddExternalMemberResponse_ErrorType_None:
    case RPCHubAddExternalMemberResponse_ErrorType_UnknownError:
    case RPCHubAddExternalMemberResponse_ErrorType_BadRequest:
    case RPCHubAddExternalMemberResponse_ErrorType_Forbidden:
    case RPCHubAddExternalMemberResponse_ErrorType_InvalidMembershipType:
    case RPCHubAddExternalMemberResponse_ErrorType_AlreadyMember:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubGetExternalMembersRequest

@implementation RPCHubGetExternalMembersRequest

@dynamic hubId;
@dynamic actingUserId;
@dynamic actingGroupId;

typedef struct RPCHubGetExternalMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *actingUserId;
  NSString *actingGroupId;
} RPCHubGetExternalMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetExternalMembersRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetExternalMembersRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetExternalMembersRequest_FieldNumber_ActingUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetExternalMembersRequest__storage_, actingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingGroupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetExternalMembersRequest_FieldNumber_ActingGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubGetExternalMembersRequest__storage_, actingGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetExternalMembersRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetExternalMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetExternalMembersResponse

@implementation RPCHubGetExternalMembersResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct RPCHubGetExternalMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetExternalMembersResponse_ErrorType error;
  NSMutableArray *usersArray;
} RPCHubGetExternalMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetExternalMembersResponse_ErrorType_EnumDescriptor,
        .number = RPCHubGetExternalMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetExternalMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = RPCHubGetExternalMembersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubGetExternalMembersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetExternalMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetExternalMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubGetExternalMembersResponse_Error_RawValue(RPCHubGetExternalMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetExternalMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetExternalMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetExternalMembersResponse_Error_RawValue(RPCHubGetExternalMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetExternalMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetExternalMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubGetExternalMembersResponse_ErrorType

GPBEnumDescriptor *RPCHubGetExternalMembersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubGetExternalMembersResponse_ErrorType_None,
        RPCHubGetExternalMembersResponse_ErrorType_UnknownError,
        RPCHubGetExternalMembersResponse_ErrorType_Forbidden,
        RPCHubGetExternalMembersResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubGetExternalMembersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubGetExternalMembersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubGetExternalMembersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubGetExternalMembersResponse_ErrorType_None:
    case RPCHubGetExternalMembersResponse_ErrorType_UnknownError:
    case RPCHubGetExternalMembersResponse_ErrorType_Forbidden:
    case RPCHubGetExternalMembersResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ExternalMembershipEntry

@implementation ExternalMembershipEntry

@dynamic externalUserId;
@dynamic type;
@dynamic createdAt;
@dynamic updatedAt;

typedef struct ExternalMembershipEntry__storage_ {
  uint32_t _has_storage_[1];
  ExternalMembershipEntry_MembershipType type;
  NSString *externalUserId;
  int64_t createdAt;
  int64_t updatedAt;
} ExternalMembershipEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = ExternalMembershipEntry_FieldNumber_ExternalUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExternalMembershipEntry__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ExternalMembershipEntry_MembershipType_EnumDescriptor,
        .number = ExternalMembershipEntry_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExternalMembershipEntry__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = ExternalMembershipEntry_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ExternalMembershipEntry__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = ExternalMembershipEntry_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ExternalMembershipEntry__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExternalMembershipEntry class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExternalMembershipEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ExternalMembershipEntry_Type_RawValue(ExternalMembershipEntry *message) {
  GPBDescriptor *descriptor = [ExternalMembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ExternalMembershipEntry_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetExternalMembershipEntry_Type_RawValue(ExternalMembershipEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [ExternalMembershipEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ExternalMembershipEntry_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ExternalMembershipEntry_Status

GPBEnumDescriptor *ExternalMembershipEntry_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "StatusUnknown\000StatusExisting\000";
    static const int32_t values[] = {
        ExternalMembershipEntry_Status_StatusUnknown,
        ExternalMembershipEntry_Status_StatusExisting,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ExternalMembershipEntry_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ExternalMembershipEntry_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ExternalMembershipEntry_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case ExternalMembershipEntry_Status_StatusUnknown:
    case ExternalMembershipEntry_Status_StatusExisting:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ExternalMembershipEntry_MembershipType

GPBEnumDescriptor *ExternalMembershipEntry_MembershipType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Banned\000None\000Member\000Moderator\000Own"
        "er\000";
    static const int32_t values[] = {
        ExternalMembershipEntry_MembershipType_Unknown,
        ExternalMembershipEntry_MembershipType_Banned,
        ExternalMembershipEntry_MembershipType_None,
        ExternalMembershipEntry_MembershipType_Member,
        ExternalMembershipEntry_MembershipType_Moderator,
        ExternalMembershipEntry_MembershipType_Owner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ExternalMembershipEntry_MembershipType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ExternalMembershipEntry_MembershipType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ExternalMembershipEntry_MembershipType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ExternalMembershipEntry_MembershipType_Unknown:
    case ExternalMembershipEntry_MembershipType_Banned:
    case ExternalMembershipEntry_MembershipType_None:
    case ExternalMembershipEntry_MembershipType_Member:
    case ExternalMembershipEntry_MembershipType_Moderator:
    case ExternalMembershipEntry_MembershipType_Owner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubEditExternalMemberRequest

@implementation RPCHubEditExternalMemberRequest

@dynamic hubId;
@dynamic actingUserId;
@dynamic actingGroupId;
@dynamic externalUserId;
@dynamic type;

typedef struct RPCHubEditExternalMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *hubId;
  NSString *actingUserId;
  NSString *actingGroupId;
  NSString *externalUserId;
} RPCHubEditExternalMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditExternalMemberRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditExternalMemberRequest_FieldNumber_ActingUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberRequest__storage_, actingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "actingGroupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditExternalMemberRequest_FieldNumber_ActingGroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberRequest__storage_, actingGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubEditExternalMemberRequest_FieldNumber_ExternalUserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = RPCHubEditExternalMemberRequest_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditExternalMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditExternalMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubEditExternalMemberRequest_Type_RawValue(RPCHubEditExternalMemberRequest *message) {
  GPBDescriptor *descriptor = [RPCHubEditExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditExternalMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubEditExternalMemberRequest_Type_RawValue(RPCHubEditExternalMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubEditExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditExternalMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCHubEditExternalMemberResponse

@implementation RPCHubEditExternalMemberResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct RPCHubEditExternalMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubEditExternalMemberResponse_ErrorType error;
  NSMutableArray *usersArray;
} RPCHubEditExternalMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubEditExternalMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCHubEditExternalMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = RPCHubEditExternalMemberResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCHubEditExternalMemberResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubEditExternalMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubEditExternalMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubEditExternalMemberResponse_Error_RawValue(RPCHubEditExternalMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubEditExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditExternalMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubEditExternalMemberResponse_Error_RawValue(RPCHubEditExternalMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubEditExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubEditExternalMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubEditExternalMemberResponse_ErrorType

GPBEnumDescriptor *RPCHubEditExternalMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubEditExternalMemberResponse_ErrorType_None,
        RPCHubEditExternalMemberResponse_ErrorType_UnknownError,
        RPCHubEditExternalMemberResponse_ErrorType_Forbidden,
        RPCHubEditExternalMemberResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubEditExternalMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubEditExternalMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubEditExternalMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubEditExternalMemberResponse_ErrorType_None:
    case RPCHubEditExternalMemberResponse_ErrorType_UnknownError:
    case RPCHubEditExternalMemberResponse_ErrorType_Forbidden:
    case RPCHubEditExternalMemberResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubGetMemberRequest

@implementation RPCHubGetMemberRequest

@dynamic hubId;
@dynamic userId;

typedef struct RPCHubGetMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *hubId;
  NSString *userId;
} RPCHubGetMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMemberRequest_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetMemberRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetMemberRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetMemberResponse

@implementation RPCHubGetMemberResponse

@dynamic error;
@dynamic type;

typedef struct RPCHubGetMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetMemberResponse_ErrorType error;
  HubMembershipRecord_MembershipType type;
} RPCHubGetMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCHubGetMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = RPCHubGetMemberResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetMemberResponse__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubGetMemberResponse_Error_RawValue(RPCHubGetMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetMemberResponse_Error_RawValue(RPCHubGetMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RPCHubGetMemberResponse_Type_RawValue(RPCHubGetMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMemberResponse_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetMemberResponse_Type_RawValue(RPCHubGetMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetMemberResponse_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubGetMemberResponse_ErrorType

GPBEnumDescriptor *RPCHubGetMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubGetMemberResponse_ErrorType_None,
        RPCHubGetMemberResponse_ErrorType_UnknownError,
        RPCHubGetMemberResponse_ErrorType_Forbidden,
        RPCHubGetMemberResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubGetMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubGetMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubGetMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubGetMemberResponse_ErrorType_None:
    case RPCHubGetMemberResponse_ErrorType_UnknownError:
    case RPCHubGetMemberResponse_ErrorType_Forbidden:
    case RPCHubGetMemberResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubRegisterExternalUserIDRequest

@implementation RPCHubRegisterExternalUserIDRequest

@dynamic userId;
@dynamic groupId;
@dynamic externalUserId;

typedef struct RPCHubRegisterExternalUserIDRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *groupId;
  NSString *externalUserId;
} RPCHubRegisterExternalUserIDRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubRegisterExternalUserIDRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubRegisterExternalUserIDRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubRegisterExternalUserIDRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubRegisterExternalUserIDRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubRegisterExternalUserIDRequest_FieldNumber_ExternalUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCHubRegisterExternalUserIDRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubRegisterExternalUserIDRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubRegisterExternalUserIDRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubRegisterExternalUserIDResponse

@implementation RPCHubRegisterExternalUserIDResponse

@dynamic error;

typedef struct RPCHubRegisterExternalUserIDResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubRegisterExternalUserIDResponse_ErrorType error;
} RPCHubRegisterExternalUserIDResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubRegisterExternalUserIDResponse_ErrorType_EnumDescriptor,
        .number = RPCHubRegisterExternalUserIDResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubRegisterExternalUserIDResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubRegisterExternalUserIDResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubRegisterExternalUserIDResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubRegisterExternalUserIDResponse_Error_RawValue(RPCHubRegisterExternalUserIDResponse *message) {
  GPBDescriptor *descriptor = [RPCHubRegisterExternalUserIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubRegisterExternalUserIDResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubRegisterExternalUserIDResponse_Error_RawValue(RPCHubRegisterExternalUserIDResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubRegisterExternalUserIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubRegisterExternalUserIDResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCHubRegisterExternalUserIDResponse_ErrorType

GPBEnumDescriptor *RPCHubRegisterExternalUserIDResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        RPCHubRegisterExternalUserIDResponse_ErrorType_None,
        RPCHubRegisterExternalUserIDResponse_ErrorType_UnknownError,
        RPCHubRegisterExternalUserIDResponse_ErrorType_Forbidden,
        RPCHubRegisterExternalUserIDResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCHubRegisterExternalUserIDResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCHubRegisterExternalUserIDResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCHubRegisterExternalUserIDResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCHubRegisterExternalUserIDResponse_ErrorType_None:
    case RPCHubRegisterExternalUserIDResponse_ErrorType_UnknownError:
    case RPCHubRegisterExternalUserIDResponse_ErrorType_Forbidden:
    case RPCHubRegisterExternalUserIDResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCHubGetUserByExternalIDRequest

@implementation RPCHubGetUserByExternalIDRequest

@dynamic externalUserId;
@dynamic groupId;

typedef struct RPCHubGetUserByExternalIDRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *externalUserId;
  NSString *groupId;
} RPCHubGetUserByExternalIDRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetUserByExternalIDRequest_FieldNumber_ExternalUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetUserByExternalIDRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCHubGetUserByExternalIDRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetUserByExternalIDRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetUserByExternalIDRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetUserByExternalIDRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCHubGetUserByExternalIDResponse

@implementation RPCHubGetUserByExternalIDResponse

@dynamic error;
@dynamic hasUserInfo, userInfo;

typedef struct RPCHubGetUserByExternalIDResponse__storage_ {
  uint32_t _has_storage_[1];
  HubGetUserByExternalIDResponse_ErrorType error;
  ExternalUserInfo *userInfo;
} RPCHubGetUserByExternalIDResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = HubGetUserByExternalIDResponse_ErrorType_EnumDescriptor,
        .number = RPCHubGetUserByExternalIDResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCHubGetUserByExternalIDResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalUserInfo),
        .number = RPCHubGetUserByExternalIDResponse_FieldNumber_UserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCHubGetUserByExternalIDResponse__storage_, userInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCHubGetUserByExternalIDResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCHubGetUserByExternalIDResponse__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCHubGetUserByExternalIDResponse_Error_RawValue(RPCHubGetUserByExternalIDResponse *message) {
  GPBDescriptor *descriptor = [RPCHubGetUserByExternalIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetUserByExternalIDResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCHubGetUserByExternalIDResponse_Error_RawValue(RPCHubGetUserByExternalIDResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCHubGetUserByExternalIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCHubGetUserByExternalIDResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubInvite

@implementation HubInvite

@dynamic id_p;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic hubId;
@dynamic inviterId;
@dynamic userId;
@dynamic email;
@dynamic code;
@dynamic type;

typedef struct HubInvite__storage_ {
  uint32_t _has_storage_[1];
  HubMembershipRecord_MembershipType type;
  NSString *id_p;
  NSString *hubId;
  NSString *inviterId;
  NSString *userId;
  NSString *email;
  NSString *code;
  int64_t createdAt;
  int64_t updatedAt;
} HubInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubInvite__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubInvite__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubInvite__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_HubId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubInvite__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_InviterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubInvite__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_UserId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HubInvite__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_Email,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HubInvite__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = HubInvite_FieldNumber_Code,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HubInvite__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = HubInvite_FieldNumber_Type,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HubInvite__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubInvite class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubInvite__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubInvite_Type_RawValue(HubInvite *message) {
  GPBDescriptor *descriptor = [HubInvite descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubInvite_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubInvite_Type_RawValue(HubInvite *message, int32_t value) {
  GPBDescriptor *descriptor = [HubInvite descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubInvite_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubMembershipRequest

@implementation HubMembershipRequest

@dynamic id_p;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic hubId;
@dynamic userId;

typedef struct HubMembershipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *hubId;
  NSString *userId;
  int64_t createdAt;
  int64_t updatedAt;
} HubMembershipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubMembershipRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRequest_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubMembershipRequest__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRequest_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubMembershipRequest__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRequest_FieldNumber_HubId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubMembershipRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRequest_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubMembershipRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubMembershipRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubMembershipRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubMembership

@implementation HubMembership

@dynamic hubId;
@dynamic userId;
@dynamic type;
@dynamic hasHub, hub;
@dynamic hasPermissions, permissions;

typedef struct HubMembership__storage_ {
  uint32_t _has_storage_[1];
  HubMembershipRecord_MembershipType type;
  NSString *hubId;
  NSString *userId;
  Hub *hub;
  HubPermissions *permissions;
} HubMembership__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembership_FieldNumber_HubId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubMembership__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembership_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubMembership__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = HubMembership_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubMembership__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubMembership_FieldNumber_Hub,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubMembership__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "permissions",
        .dataTypeSpecific.className = GPBStringifySymbol(HubPermissions),
        .number = HubMembership_FieldNumber_Permissions,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubMembership__storage_, permissions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubMembership class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubMembership__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubMembership_Type_RawValue(HubMembership *message) {
  GPBDescriptor *descriptor = [HubMembership descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembership_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubMembership_Type_RawValue(HubMembership *message, int32_t value) {
  GPBDescriptor *descriptor = [HubMembership descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembership_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubMembershipRecord

@implementation HubMembershipRecord

@dynamic id_p;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic hubId;
@dynamic userId;
@dynamic type;
@dynamic hasHub, hub;
@dynamic hasUser, user;
@dynamic hasPermissions, permissions;

typedef struct HubMembershipRecord__storage_ {
  uint32_t _has_storage_[1];
  HubMembershipRecord_MembershipType type;
  NSString *id_p;
  NSString *hubId;
  NSString *userId;
  Hub *hub;
  User *user;
  HubPermissions *permissions;
  int64_t createdAt;
  int64_t updatedAt;
} HubMembershipRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRecord_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRecord_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRecord_FieldNumber_HubId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HubMembershipRecord_FieldNumber_UserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = HubMembershipRecord_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubMembershipRecord_FieldNumber_Hub,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = HubMembershipRecord_FieldNumber_User,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "permissions",
        .dataTypeSpecific.className = GPBStringifySymbol(HubPermissions),
        .number = HubMembershipRecord_FieldNumber_Permissions,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HubMembershipRecord__storage_, permissions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubMembershipRecord class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubMembershipRecord__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubMembershipRecord_Type_RawValue(HubMembershipRecord *message) {
  GPBDescriptor *descriptor = [HubMembershipRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembershipRecord_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubMembershipRecord_Type_RawValue(HubMembershipRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [HubMembershipRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubMembershipRecord_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubMembershipRecord_MembershipType

GPBEnumDescriptor *HubMembershipRecord_MembershipType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Banned\000None\000RequestPending\000Invit"
        "ed\000Member\000Moderator\000ModeratorGroup\000Owner"
        "\000";
    static const int32_t values[] = {
        HubMembershipRecord_MembershipType_Unknown,
        HubMembershipRecord_MembershipType_Banned,
        HubMembershipRecord_MembershipType_None,
        HubMembershipRecord_MembershipType_RequestPending,
        HubMembershipRecord_MembershipType_Invited,
        HubMembershipRecord_MembershipType_Member,
        HubMembershipRecord_MembershipType_Moderator,
        HubMembershipRecord_MembershipType_ModeratorGroup,
        HubMembershipRecord_MembershipType_Owner,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubMembershipRecord_MembershipType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HubMembershipRecord_MembershipType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HubMembershipRecord_MembershipType_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubMembershipRecord_MembershipType_Unknown:
    case HubMembershipRecord_MembershipType_Banned:
    case HubMembershipRecord_MembershipType_None:
    case HubMembershipRecord_MembershipType_RequestPending:
    case HubMembershipRecord_MembershipType_Invited:
    case HubMembershipRecord_MembershipType_Member:
    case HubMembershipRecord_MembershipType_Moderator:
    case HubMembershipRecord_MembershipType_ModeratorGroup:
    case HubMembershipRecord_MembershipType_Owner:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HubPermissions

@implementation HubPermissions

@dynamic editHub;
@dynamic deleteHub;

typedef struct HubPermissions__storage_ {
  uint32_t _has_storage_[1];
} HubPermissions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "editHub",
        .dataTypeSpecific.className = NULL,
        .number = HubPermissions_FieldNumber_EditHub,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "deleteHub",
        .dataTypeSpecific.className = NULL,
        .number = HubPermissions_FieldNumber_DeleteHub,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubPermissions class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubPermissions__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubExternalMembershipRecord

@implementation HubExternalMembershipRecord

@dynamic id_p;
@dynamic createdAt;
@dynamic updatedAt;
@dynamic hubId;
@dynamic externalUserId;
@dynamic type;

typedef struct HubExternalMembershipRecord__storage_ {
  uint32_t _has_storage_[1];
  HubMembershipRecord_MembershipType type;
  NSString *id_p;
  NSString *hubId;
  NSString *externalUserId;
  int64_t createdAt;
  int64_t updatedAt;
} HubExternalMembershipRecord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = HubExternalMembershipRecord_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = HubExternalMembershipRecord_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = HubExternalMembershipRecord_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = HubExternalMembershipRecord_FieldNumber_HubId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = HubExternalMembershipRecord_FieldNumber_ExternalUserId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = HubExternalMembershipRecord_FieldNumber_Type,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HubExternalMembershipRecord__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubExternalMembershipRecord class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubExternalMembershipRecord__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubExternalMembershipRecord_Type_RawValue(HubExternalMembershipRecord *message) {
  GPBDescriptor *descriptor = [HubExternalMembershipRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubExternalMembershipRecord_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubExternalMembershipRecord_Type_RawValue(HubExternalMembershipRecord *message, int32_t value) {
  GPBDescriptor *descriptor = [HubExternalMembershipRecord descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubExternalMembershipRecord_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ExternalUserInfo

@implementation ExternalUserInfo

@dynamic externalUserId;
@dynamic emailAddress;

typedef struct ExternalUserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *externalUserId;
  NSString *emailAddress;
} ExternalUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = ExternalUserInfo_FieldNumber_ExternalUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExternalUserInfo__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "emailAddress",
        .dataTypeSpecific.className = NULL,
        .number = ExternalUserInfo_FieldNumber_EmailAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ExternalUserInfo__storage_, emailAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExternalUserInfo class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExternalUserInfo__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubCreateHubRequest

@implementation HubCreateHubRequest

@dynamic parentIdsArray, parentIdsArray_Count;
@dynamic translationIdsArray, translationIdsArray_Count;
@dynamic closed;
@dynamic title;
@dynamic shortTitle;
@dynamic description_p;
@dynamic titleImage;
@dynamic backgroundImage;
@dynamic claimedGroupId;
@dynamic language;
@dynamic nsfw;
@dynamic autoGenerateTitleSuffix;
@dynamic autoGenerateShortTitleSuffix;
@dynamic hasGeoLocation, geoLocation;

typedef struct HubCreateHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *parentIdsArray;
  NSMutableArray *translationIdsArray;
  NSString *title;
  NSString *shortTitle;
  NSString *description_p;
  NSString *titleImage;
  NSString *backgroundImage;
  NSString *claimedGroupId;
  NSString *language;
  GeoLocation *geoLocation;
} HubCreateHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_ParentIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, parentIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "translationIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_TranslationIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, translationIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "closed",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_Closed,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_ShortTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_Description_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_TitleImage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_BackgroundImage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "claimedGroupId",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_ClaimedGroupId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, claimedGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_Language,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nsfw",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_Nsfw,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "autoGenerateTitleSuffix",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_AutoGenerateTitleSuffix,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "autoGenerateShortTitleSuffix",
        .dataTypeSpecific.className = NULL,
        .number = HubCreateHubRequest_FieldNumber_AutoGenerateShortTitleSuffix,
        .hasIndex = 13,
        .offset = 14,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "geoLocation",
        .dataTypeSpecific.className = GPBStringifySymbol(GeoLocation),
        .number = HubCreateHubRequest_FieldNumber_GeoLocation,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(HubCreateHubRequest__storage_, geoLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubCreateHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubCreateHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubCreateHubResponse

@implementation HubCreateHubResponse

@dynamic error;
@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct HubCreateHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubCreateHubResponse_ErrorType error;
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} HubCreateHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubCreateHubResponse_ErrorType_EnumDescriptor,
        .number = HubCreateHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubCreateHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubCreateHubResponse_FieldNumber_Hub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubCreateHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubCreateHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubCreateHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubCreateHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubCreateHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubCreateHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubCreateHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubCreateHubResponse_Error_RawValue(HubCreateHubResponse *message) {
  GPBDescriptor *descriptor = [HubCreateHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubCreateHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubCreateHubResponse_Error_RawValue(HubCreateHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubCreateHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubCreateHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubGetHubResponse

@implementation HubGetHubResponse

@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct HubGetHubResponse__storage_ {
  uint32_t _has_storage_[1];
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} HubGetHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubGetHubResponse_FieldNumber_Hub,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubGetHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubGetHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubGetHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubGetHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubGetHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubGetHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubGetHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubGetAllHubsResponse

@implementation HubGetAllHubsResponse

@dynamic hubsArray, hubsArray_Count;

typedef struct HubGetAllHubsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hubsArray;
} HubGetAllHubsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hubsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubGetAllHubsResponse_FieldNumber_HubsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubGetAllHubsResponse__storage_, hubsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubGetAllHubsResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubGetAllHubsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubEditHubRequest

@implementation HubEditHubRequest

@dynamic hasParentIds, parentIds;
@dynamic hasTranslationIds, translationIds;
@dynamic hasClosed, closed;
@dynamic hasTitle, title;
@dynamic hasShortTitle, shortTitle;
@dynamic hasDescription_p, description_p;
@dynamic hasTitleImage, titleImage;
@dynamic hasBackgroundImage, backgroundImage;
@dynamic hasClaimedGroupId, claimedGroupId;
@dynamic hasLanguage, language;
@dynamic hasNsfw, nsfw;
@dynamic hasWordfilterEnabled, wordfilterEnabled;
@dynamic hasWordfilterList, wordfilterList;
@dynamic hasLinkwhitelistEnabled, linkwhitelistEnabled;
@dynamic hasLinkwhitelistList, linkwhitelistList;
@dynamic hasGeoLocation, geoLocation;
@dynamic hasTopic, topic;
@dynamic hasMaxMessageLength, maxMessageLength;
@dynamic hasMaxMessagesPerMinute, maxMessagesPerMinute;
@dynamic hasMaxMessageLengthEphemeral, maxMessageLengthEphemeral;
@dynamic hasMaxMessagesPerMinuteEphemeral, maxMessagesPerMinuteEphemeral;

typedef struct HubEditHubRequest__storage_ {
  uint32_t _has_storage_[1];
  OptionalRepeatedString *parentIds;
  OptionalRepeatedString *translationIds;
  GPBBoolValue *closed;
  GPBStringValue *title;
  GPBStringValue *shortTitle;
  GPBStringValue *description_p;
  GPBStringValue *titleImage;
  GPBStringValue *backgroundImage;
  GPBStringValue *claimedGroupId;
  GPBStringValue *language;
  GPBBoolValue *nsfw;
  GPBBoolValue *wordfilterEnabled;
  GPBStringValue *wordfilterList;
  GPBBoolValue *linkwhitelistEnabled;
  GPBStringValue *linkwhitelistList;
  OptionalGeoLocation *geoLocation;
  GPBStringValue *topic;
  GPBInt32Value *maxMessageLength;
  GPBInt32Value *maxMessagesPerMinute;
  GPBInt32Value *maxMessageLengthEphemeral;
  GPBInt32Value *maxMessagesPerMinuteEphemeral;
} HubEditHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parentIds",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalRepeatedString),
        .number = HubEditHubRequest_FieldNumber_ParentIds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, parentIds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "translationIds",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalRepeatedString),
        .number = HubEditHubRequest_FieldNumber_TranslationIds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, translationIds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "closed",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = HubEditHubRequest_FieldNumber_Closed,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, closed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_Title,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_ShortTitle,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_Description_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_TitleImage,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_BackgroundImage,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "claimedGroupId",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_ClaimedGroupId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, claimedGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_Language,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nsfw",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = HubEditHubRequest_FieldNumber_Nsfw,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, nsfw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wordfilterEnabled",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = HubEditHubRequest_FieldNumber_WordfilterEnabled,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, wordfilterEnabled),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "wordfilterList",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_WordfilterList,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, wordfilterList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkwhitelistEnabled",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = HubEditHubRequest_FieldNumber_LinkwhitelistEnabled,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, linkwhitelistEnabled),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkwhitelistList",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_LinkwhitelistList,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, linkwhitelistList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "geoLocation",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalGeoLocation),
        .number = HubEditHubRequest_FieldNumber_GeoLocation,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, geoLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubEditHubRequest_FieldNumber_Topic,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessageLength",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = HubEditHubRequest_FieldNumber_MaxMessageLength,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, maxMessageLength),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessagesPerMinute",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = HubEditHubRequest_FieldNumber_MaxMessagesPerMinute,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, maxMessagesPerMinute),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessageLengthEphemeral",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = HubEditHubRequest_FieldNumber_MaxMessageLengthEphemeral,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, maxMessageLengthEphemeral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxMessagesPerMinuteEphemeral",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt32Value),
        .number = HubEditHubRequest_FieldNumber_MaxMessagesPerMinuteEphemeral,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(HubEditHubRequest__storage_, maxMessagesPerMinuteEphemeral),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubEditHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubEditHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubEditHubResponse

@implementation HubEditHubResponse

@dynamic error;
@dynamic hasHub, hub;
@dynamic childrenArray, childrenArray_Count;
@dynamic siblingsArray, siblingsArray_Count;

typedef struct HubEditHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubCreateHubResponse_ErrorType error;
  Hub *hub;
  NSMutableArray *childrenArray;
  NSMutableArray *siblingsArray;
} HubEditHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubCreateHubResponse_ErrorType_EnumDescriptor,
        .number = HubEditHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubEditHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubEditHubResponse_FieldNumber_Hub,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubEditHubResponse__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubEditHubResponse_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubEditHubResponse__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "siblingsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = HubEditHubResponse_FieldNumber_SiblingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubEditHubResponse__storage_, siblingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubEditHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubEditHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubEditHubResponse_Error_RawValue(HubEditHubResponse *message) {
  GPBDescriptor *descriptor = [HubEditHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubEditHubResponse_Error_RawValue(HubEditHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubEditHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubDeleteHubResponse

@implementation HubDeleteHubResponse

@dynamic error;

typedef struct HubDeleteHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubDeleteHubResponse_ErrorType error;
} HubDeleteHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubDeleteHubResponse_ErrorType_EnumDescriptor,
        .number = HubDeleteHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubDeleteHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubDeleteHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubDeleteHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubDeleteHubResponse_Error_RawValue(HubDeleteHubResponse *message) {
  GPBDescriptor *descriptor = [HubDeleteHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubDeleteHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubDeleteHubResponse_Error_RawValue(HubDeleteHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubDeleteHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubDeleteHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubValidateTitleRequest

@implementation HubValidateTitleRequest

@dynamic hasTitle, title;
@dynamic hasShortTitle, shortTitle;

typedef struct HubValidateTitleRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *title;
  GPBStringValue *shortTitle;
} HubValidateTitleRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubValidateTitleRequest_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubValidateTitleRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortTitle",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = HubValidateTitleRequest_FieldNumber_ShortTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubValidateTitleRequest__storage_, shortTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubValidateTitleRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubValidateTitleRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubValidateTitleResponse

@implementation HubValidateTitleResponse

@dynamic error;

typedef struct HubValidateTitleResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubValidateTitleResponse_ErrorType error;
} HubValidateTitleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubValidateTitleResponse_ErrorType_EnumDescriptor,
        .number = HubValidateTitleResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubValidateTitleResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubValidateTitleResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubValidateTitleResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubValidateTitleResponse_Error_RawValue(HubValidateTitleResponse *message) {
  GPBDescriptor *descriptor = [HubValidateTitleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubValidateTitleResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubValidateTitleResponse_Error_RawValue(HubValidateTitleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubValidateTitleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubValidateTitleResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AddMemberRequest

@implementation AddMemberRequest

@dynamic identifierOneOfCase;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;
@dynamic fetchBanned;
@dynamic banDuration;
@dynamic inviteText;
@dynamic joinLink;

typedef struct AddMemberRequest__storage_ {
  uint32_t _has_storage_[2];
  MembershipEntry_MembershipType type;
  NSString *userId;
  NSString *email;
  NSString *inviteText;
  NSString *joinLink;
  int64_t banDuration;
} AddMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_UserId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_Email,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = AddMemberRequest_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fetchExisting",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchPending",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchBanned",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_FetchBanned,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_BanDuration,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_InviteText,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joinLink",
        .dataTypeSpecific.className = NULL,
        .number = AddMemberRequest_FieldNumber_JoinLink,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AddMemberRequest__storage_, joinLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddMemberRequest__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "identifier",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AddMemberRequest_Type_RawValue(AddMemberRequest *message) {
  GPBDescriptor *descriptor = [AddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddMemberRequest_Type_RawValue(AddMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AddMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void AddMemberRequest_ClearIdentifierOneOfCase(AddMemberRequest *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - AddMemberResponse

@implementation AddMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic hasUpdatedEntry, updatedEntry;

typedef struct AddMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubAddMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  MembershipEntry *updatedEntry;
} AddMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubAddMemberResponse_ErrorType_EnumDescriptor,
        .number = AddMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = AddMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddMemberResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = AddMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddMemberResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = AddMemberResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddMemberResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedEntry",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = AddMemberResponse_FieldNumber_UpdatedEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddMemberResponse__storage_, updatedEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AddMemberResponse_Error_RawValue(AddMemberResponse *message) {
  GPBDescriptor *descriptor = [AddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddMemberResponse_Error_RawValue(AddMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [AddMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubAddMembersRequest

@implementation HubAddMembersRequest

@dynamic inviteText;
@dynamic joinLink;
@dynamic entriesArray, entriesArray_Count;

typedef struct HubAddMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *inviteText;
  NSString *joinLink;
  NSMutableArray *entriesArray;
} HubAddMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequest_FieldNumber_InviteText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddMembersRequest__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joinLink",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequest_FieldNumber_JoinLink,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubAddMembersRequest__storage_, joinLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "entriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HubAddMembersRequestEntry),
        .number = HubAddMembersRequest_FieldNumber_EntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubAddMembersRequest__storage_, entriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddMembersRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubAddMembersResponse

@implementation HubAddMembersResponse

@dynamic error;
@dynamic updatedEntriesArray, updatedEntriesArray_Count;

typedef struct HubAddMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  HubAddMembersResponse_ErrorType error;
  NSMutableArray *updatedEntriesArray;
} HubAddMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = HubAddMembersResponse_ErrorType_EnumDescriptor,
        .number = HubAddMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "updatedEntriesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(HubAddMembersResponseEntry),
        .number = HubAddMembersResponse_FieldNumber_UpdatedEntriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubAddMembersResponse__storage_, updatedEntriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubAddMembersResponse_Error_RawValue(HubAddMembersResponse *message) {
  GPBDescriptor *descriptor = [HubAddMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubAddMembersResponse_Error_RawValue(HubAddMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubAddMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubAddMembersResponse_ErrorType

GPBEnumDescriptor *HubAddMembersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000Forbidden\000BadRequest\000";
    static const int32_t values[] = {
        HubAddMembersResponse_ErrorType_None,
        HubAddMembersResponse_ErrorType_UnknownError,
        HubAddMembersResponse_ErrorType_Forbidden,
        HubAddMembersResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubAddMembersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HubAddMembersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HubAddMembersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubAddMembersResponse_ErrorType_None:
    case HubAddMembersResponse_ErrorType_UnknownError:
    case HubAddMembersResponse_ErrorType_Forbidden:
    case HubAddMembersResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HubAddMembersRequestEntry

@implementation HubAddMembersRequestEntry

@dynamic identifierOneOfCase;
@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic banDuration;
@dynamic inviteText;
@dynamic joinLink;

typedef struct HubAddMembersRequestEntry__storage_ {
  uint32_t _has_storage_[2];
  MembershipEntry_MembershipType type;
  NSString *userId;
  NSString *email;
  NSString *inviteText;
  NSString *joinLink;
  int64_t banDuration;
} HubAddMembersRequestEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequestEntry_FieldNumber_UserId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequestEntry_FieldNumber_Email,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = HubAddMembersRequestEntry_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequestEntry_FieldNumber_BanDuration,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inviteText",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequestEntry_FieldNumber_InviteText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, inviteText),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "joinLink",
        .dataTypeSpecific.className = NULL,
        .number = HubAddMembersRequestEntry_FieldNumber_JoinLink,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HubAddMembersRequestEntry__storage_, joinLink),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddMembersRequestEntry class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddMembersRequestEntry__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "identifier",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubAddMembersRequestEntry_Type_RawValue(HubAddMembersRequestEntry *message) {
  GPBDescriptor *descriptor = [HubAddMembersRequestEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersRequestEntry_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubAddMembersRequestEntry_Type_RawValue(HubAddMembersRequestEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [HubAddMembersRequestEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersRequestEntry_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void HubAddMembersRequestEntry_ClearIdentifierOneOfCase(HubAddMembersRequestEntry *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - HubAddMembersResponseEntry

@implementation HubAddMembersResponseEntry

@dynamic error;
@dynamic hasEntry, entry;

typedef struct HubAddMembersResponseEntry__storage_ {
  uint32_t _has_storage_[1];
  HubAddMembersResponseEntry_ErrorType error;
  HubAddMembersRequestEntry *entry;
} HubAddMembersResponseEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = HubAddMembersResponseEntry_ErrorType_EnumDescriptor,
        .number = HubAddMembersResponseEntry_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddMembersResponseEntry__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entry",
        .dataTypeSpecific.className = GPBStringifySymbol(HubAddMembersRequestEntry),
        .number = HubAddMembersResponseEntry_FieldNumber_Entry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubAddMembersResponseEntry__storage_, entry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddMembersResponseEntry class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddMembersResponseEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubAddMembersResponseEntry_Error_RawValue(HubAddMembersResponseEntry *message) {
  GPBDescriptor *descriptor = [HubAddMembersResponseEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersResponseEntry_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubAddMembersResponseEntry_Error_RawValue(HubAddMembersResponseEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [HubAddMembersResponseEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddMembersResponseEntry_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubAddMembersResponseEntry_ErrorType

GPBEnumDescriptor *HubAddMembersResponseEntry_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000InvalidUserId\000InvalidE"
        "mail\000InvalidMembershipType\000AlreadyPendin"
        "g\000AlreadyMember\000AlreadyBanned\000";
    static const int32_t values[] = {
        HubAddMembersResponseEntry_ErrorType_None,
        HubAddMembersResponseEntry_ErrorType_UnknownError,
        HubAddMembersResponseEntry_ErrorType_InvalidUserId,
        HubAddMembersResponseEntry_ErrorType_InvalidEmail,
        HubAddMembersResponseEntry_ErrorType_InvalidMembershipType,
        HubAddMembersResponseEntry_ErrorType_AlreadyPending,
        HubAddMembersResponseEntry_ErrorType_AlreadyMember,
        HubAddMembersResponseEntry_ErrorType_AlreadyBanned,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubAddMembersResponseEntry_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HubAddMembersResponseEntry_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HubAddMembersResponseEntry_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubAddMembersResponseEntry_ErrorType_None:
    case HubAddMembersResponseEntry_ErrorType_UnknownError:
    case HubAddMembersResponseEntry_ErrorType_InvalidUserId:
    case HubAddMembersResponseEntry_ErrorType_InvalidEmail:
    case HubAddMembersResponseEntry_ErrorType_InvalidMembershipType:
    case HubAddMembersResponseEntry_ErrorType_AlreadyPending:
    case HubAddMembersResponseEntry_ErrorType_AlreadyMember:
    case HubAddMembersResponseEntry_ErrorType_AlreadyBanned:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GetMembersResponse

@implementation GetMembersResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic totalUsers;
@dynamic from;
@dynamic pagedUsers;

typedef struct GetMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetMembersResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  int64_t totalUsers;
  int64_t from;
  int64_t pagedUsers;
} GetMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetMembersResponse_ErrorType_EnumDescriptor,
        .number = GetMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = GetMembersResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = GetMembersResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = GetMembersResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "totalUsers",
        .dataTypeSpecific.className = NULL,
        .number = GetMembersResponse_FieldNumber_TotalUsers,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, totalUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = GetMembersResponse_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = GetMembersResponse_FieldNumber_PagedUsers,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetMembersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t GetMembersResponse_Error_RawValue(GetMembersResponse *message) {
  GPBDescriptor *descriptor = [GetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetGetMembersResponse_Error_RawValue(GetMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [GetMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:GetMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SearchMembersResponse

@implementation SearchMembersResponse

@dynamic error;
@dynamic from;
@dynamic usersArray, usersArray_Count;
@dynamic pagedUsers;

typedef struct SearchMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  SearchMembersResponse_ErrorType error;
  NSMutableArray *usersArray;
  int64_t from;
  int64_t pagedUsers;
} SearchMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = SearchMembersResponse_ErrorType_EnumDescriptor,
        .number = SearchMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SearchMembersResponse_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchMembersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = SearchMembersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchMembersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = SearchMembersResponse_FieldNumber_PagedUsers,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchMembersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SearchMembersResponse_Error_RawValue(SearchMembersResponse *message) {
  GPBDescriptor *descriptor = [SearchMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetSearchMembersResponse_Error_RawValue(SearchMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SearchMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum SearchMembersResponse_ErrorType

GPBEnumDescriptor *SearchMembersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        SearchMembersResponse_ErrorType_None,
        SearchMembersResponse_ErrorType_UnknownError,
        SearchMembersResponse_ErrorType_BadRequest,
        SearchMembersResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SearchMembersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SearchMembersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SearchMembersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SearchMembersResponse_ErrorType_None:
    case SearchMembersResponse_ErrorType_UnknownError:
    case SearchMembersResponse_ErrorType_BadRequest:
    case SearchMembersResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SendInviteRequest

@implementation SendInviteRequest

@dynamic userId;
@dynamic email;

typedef struct SendInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *email;
} SendInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = SendInviteRequest_FieldNumber_Email,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendInviteRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendInviteResponse

@implementation SendInviteResponse

@dynamic error;

typedef struct SendInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubSendInviteResponse_ErrorType error;
} SendInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubSendInviteResponse_ErrorType_EnumDescriptor,
        .number = SendInviteResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendInviteResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendInviteResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendInviteResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendInviteResponse_Error_RawValue(SendInviteResponse *message) {
  GPBDescriptor *descriptor = [SendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendInviteResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetSendInviteResponse_Error_RawValue(SendInviteResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SendInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendInviteResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - EditMemberRequest

@implementation EditMemberRequest

@dynamic userId;
@dynamic email;
@dynamic type;
@dynamic fetchExisting;
@dynamic fetchPending;
@dynamic fetchBanned;
@dynamic banDuration;

typedef struct EditMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *userId;
  NSString *email;
  int64_t banDuration;
} EditMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EditMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_Email,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EditMemberRequest__storage_, email),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = EditMemberRequest_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EditMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "fetchExisting",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_FetchExisting,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchPending",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_FetchPending,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "fetchBanned",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_FetchBanned,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = NULL,
        .number = EditMemberRequest_FieldNumber_BanDuration,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(EditMemberRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EditMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EditMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EditMemberRequest_Type_RawValue(EditMemberRequest *message) {
  GPBDescriptor *descriptor = [EditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EditMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetEditMemberRequest_Type_RawValue(EditMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [EditMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EditMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - EditMemberResponse

@implementation EditMemberResponse

@dynamic error;
@dynamic existingUsersArray, existingUsersArray_Count;
@dynamic pendingUsersArray, pendingUsersArray_Count;
@dynamic bannedUsersArray, bannedUsersArray_Count;
@dynamic hasUpdatedEntry, updatedEntry;

typedef struct EditMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubEditMemberResponse_ErrorType error;
  NSMutableArray *existingUsersArray;
  NSMutableArray *pendingUsersArray;
  NSMutableArray *bannedUsersArray;
  MembershipEntry *updatedEntry;
} EditMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubEditMemberResponse_ErrorType_EnumDescriptor,
        .number = EditMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EditMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "existingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = EditMemberResponse_FieldNumber_ExistingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EditMemberResponse__storage_, existingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = EditMemberResponse_FieldNumber_PendingUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EditMemberResponse__storage_, pendingUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bannedUsersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = EditMemberResponse_FieldNumber_BannedUsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EditMemberResponse__storage_, bannedUsersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedEntry",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = EditMemberResponse_FieldNumber_UpdatedEntry,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EditMemberResponse__storage_, updatedEntry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EditMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EditMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EditMemberResponse_Error_RawValue(EditMemberResponse *message) {
  GPBDescriptor *descriptor = [EditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EditMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetEditMemberResponse_Error_RawValue(EditMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [EditMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EditMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubAddExternalMemberRequest

@implementation HubAddExternalMemberRequest

@dynamic externalUserId;
@dynamic type;

typedef struct HubAddExternalMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *externalUserId;
} HubAddExternalMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = HubAddExternalMemberRequest_FieldNumber_ExternalUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddExternalMemberRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = HubAddExternalMemberRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubAddExternalMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddExternalMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddExternalMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubAddExternalMemberRequest_Type_RawValue(HubAddExternalMemberRequest *message) {
  GPBDescriptor *descriptor = [HubAddExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddExternalMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubAddExternalMemberRequest_Type_RawValue(HubAddExternalMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [HubAddExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddExternalMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubAddExternalMemberResponse

@implementation HubAddExternalMemberResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct HubAddExternalMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubAddExternalMemberResponse_ErrorType error;
  NSMutableArray *usersArray;
} HubAddExternalMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubAddExternalMemberResponse_ErrorType_EnumDescriptor,
        .number = HubAddExternalMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubAddExternalMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = HubAddExternalMemberResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubAddExternalMemberResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubAddExternalMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubAddExternalMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubAddExternalMemberResponse_Error_RawValue(HubAddExternalMemberResponse *message) {
  GPBDescriptor *descriptor = [HubAddExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddExternalMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubAddExternalMemberResponse_Error_RawValue(HubAddExternalMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubAddExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubAddExternalMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubEditExternalMemberRequest

@implementation HubEditExternalMemberRequest

@dynamic externalUserId;
@dynamic type;

typedef struct HubEditExternalMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  MembershipEntry_MembershipType type;
  NSString *externalUserId;
} HubEditExternalMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = HubEditExternalMemberRequest_FieldNumber_ExternalUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubEditExternalMemberRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MembershipEntry_MembershipType_EnumDescriptor,
        .number = HubEditExternalMemberRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubEditExternalMemberRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubEditExternalMemberRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubEditExternalMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubEditExternalMemberRequest_Type_RawValue(HubEditExternalMemberRequest *message) {
  GPBDescriptor *descriptor = [HubEditExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditExternalMemberRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubEditExternalMemberRequest_Type_RawValue(HubEditExternalMemberRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [HubEditExternalMemberRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditExternalMemberRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubEditExternalMemberResponse

@implementation HubEditExternalMemberResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct HubEditExternalMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubEditExternalMemberResponse_ErrorType error;
  NSMutableArray *usersArray;
} HubEditExternalMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubEditExternalMemberResponse_ErrorType_EnumDescriptor,
        .number = HubEditExternalMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubEditExternalMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = HubEditExternalMemberResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubEditExternalMemberResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubEditExternalMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubEditExternalMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubEditExternalMemberResponse_Error_RawValue(HubEditExternalMemberResponse *message) {
  GPBDescriptor *descriptor = [HubEditExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditExternalMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubEditExternalMemberResponse_Error_RawValue(HubEditExternalMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubEditExternalMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubEditExternalMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubGetExternalMembersResponse

@implementation HubGetExternalMembersResponse

@dynamic error;
@dynamic usersArray, usersArray_Count;

typedef struct HubGetExternalMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetExternalMembersResponse_ErrorType error;
  NSMutableArray *usersArray;
} HubGetExternalMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetExternalMembersResponse_ErrorType_EnumDescriptor,
        .number = HubGetExternalMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubGetExternalMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalMembershipEntry),
        .number = HubGetExternalMembersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HubGetExternalMembersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubGetExternalMembersResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubGetExternalMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubGetExternalMembersResponse_Error_RawValue(HubGetExternalMembersResponse *message) {
  GPBDescriptor *descriptor = [HubGetExternalMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetExternalMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubGetExternalMembersResponse_Error_RawValue(HubGetExternalMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubGetExternalMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetExternalMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubJoinHubRequest

@implementation HubJoinHubRequest

@dynamic code;

typedef struct HubJoinHubRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *code;
} HubJoinHubRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = HubJoinHubRequest_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubJoinHubRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubJoinHubRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubJoinHubRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HubJoinHubResponse

@implementation HubJoinHubResponse

@dynamic error;

typedef struct HubJoinHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubJoinHubResponse_ErrorType error;
} HubJoinHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubJoinHubResponse_ErrorType_EnumDescriptor,
        .number = HubJoinHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubJoinHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubJoinHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubJoinHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubJoinHubResponse_Error_RawValue(HubJoinHubResponse *message) {
  GPBDescriptor *descriptor = [HubJoinHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubJoinHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubJoinHubResponse_Error_RawValue(HubJoinHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubJoinHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubJoinHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubLeaveHubResponse

@implementation HubLeaveHubResponse

@dynamic error;

typedef struct HubLeaveHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubLeaveHubResponse_ErrorType error;
} HubLeaveHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubLeaveHubResponse_ErrorType_EnumDescriptor,
        .number = HubLeaveHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubLeaveHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubLeaveHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubLeaveHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubLeaveHubResponse_Error_RawValue(HubLeaveHubResponse *message) {
  GPBDescriptor *descriptor = [HubLeaveHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLeaveHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubLeaveHubResponse_Error_RawValue(HubLeaveHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubLeaveHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLeaveHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubLinkHubResponse

@implementation HubLinkHubResponse

@dynamic error;

typedef struct HubLinkHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubLinkHubResponse_ErrorType error;
} HubLinkHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubLinkHubResponse_ErrorType_EnumDescriptor,
        .number = HubLinkHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubLinkHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubLinkHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubLinkHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubLinkHubResponse_Error_RawValue(HubLinkHubResponse *message) {
  GPBDescriptor *descriptor = [HubLinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLinkHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubLinkHubResponse_Error_RawValue(HubLinkHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubLinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubLinkHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubUnlinkHubResponse

@implementation HubUnlinkHubResponse

@dynamic error;

typedef struct HubUnlinkHubResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubUnlinkHubResponse_ErrorType error;
} HubUnlinkHubResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubUnlinkHubResponse_ErrorType_EnumDescriptor,
        .number = HubUnlinkHubResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubUnlinkHubResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubUnlinkHubResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubUnlinkHubResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubUnlinkHubResponse_Error_RawValue(HubUnlinkHubResponse *message) {
  GPBDescriptor *descriptor = [HubUnlinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubUnlinkHubResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubUnlinkHubResponse_Error_RawValue(HubUnlinkHubResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubUnlinkHubResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubUnlinkHubResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RegisterExternalUserIDRequest

@implementation RegisterExternalUserIDRequest

@dynamic groupId;
@dynamic externalUserId;

typedef struct RegisterExternalUserIDRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *groupId;
  NSString *externalUserId;
} RegisterExternalUserIDRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterExternalUserIDRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterExternalUserIDRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "externalUserId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterExternalUserIDRequest_FieldNumber_ExternalUserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterExternalUserIDRequest__storage_, externalUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterExternalUserIDRequest class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterExternalUserIDRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterExternalUserIDResponse

@implementation RegisterExternalUserIDResponse

@dynamic error;

typedef struct RegisterExternalUserIDResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubRegisterExternalUserIDResponse_ErrorType error;
} RegisterExternalUserIDResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubRegisterExternalUserIDResponse_ErrorType_EnumDescriptor,
        .number = RegisterExternalUserIDResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterExternalUserIDResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterExternalUserIDResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterExternalUserIDResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RegisterExternalUserIDResponse_Error_RawValue(RegisterExternalUserIDResponse *message) {
  GPBDescriptor *descriptor = [RegisterExternalUserIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RegisterExternalUserIDResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRegisterExternalUserIDResponse_Error_RawValue(RegisterExternalUserIDResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RegisterExternalUserIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RegisterExternalUserIDResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubGetMemberResponse

@implementation HubGetMemberResponse

@dynamic error;
@dynamic type;

typedef struct HubGetMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCHubGetMemberResponse_ErrorType error;
  HubMembershipRecord_MembershipType type;
} HubGetMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCHubGetMemberResponse_ErrorType_EnumDescriptor,
        .number = HubGetMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubGetMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = HubMembershipRecord_MembershipType_EnumDescriptor,
        .number = HubGetMemberResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubGetMemberResponse__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubGetMemberResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubGetMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubGetMemberResponse_Error_RawValue(HubGetMemberResponse *message) {
  GPBDescriptor *descriptor = [HubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubGetMemberResponse_Error_RawValue(HubGetMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t HubGetMemberResponse_Type_RawValue(HubGetMemberResponse *message) {
  GPBDescriptor *descriptor = [HubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetMemberResponse_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubGetMemberResponse_Type_RawValue(HubGetMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubGetMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetMemberResponse_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - HubGetUserByExternalIDResponse

@implementation HubGetUserByExternalIDResponse

@dynamic error;
@dynamic hasUserInfo, userInfo;

typedef struct HubGetUserByExternalIDResponse__storage_ {
  uint32_t _has_storage_[1];
  HubGetUserByExternalIDResponse_ErrorType error;
  ExternalUserInfo *userInfo;
} HubGetUserByExternalIDResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = HubGetUserByExternalIDResponse_ErrorType_EnumDescriptor,
        .number = HubGetUserByExternalIDResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HubGetUserByExternalIDResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(ExternalUserInfo),
        .number = HubGetUserByExternalIDResponse_FieldNumber_UserInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HubGetUserByExternalIDResponse__storage_, userInfo),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HubGetUserByExternalIDResponse class]
                                     rootClass:[HubRoot class]
                                          file:HubRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HubGetUserByExternalIDResponse__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t HubGetUserByExternalIDResponse_Error_RawValue(HubGetUserByExternalIDResponse *message) {
  GPBDescriptor *descriptor = [HubGetUserByExternalIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetUserByExternalIDResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetHubGetUserByExternalIDResponse_Error_RawValue(HubGetUserByExternalIDResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [HubGetUserByExternalIDResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:HubGetUserByExternalIDResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum HubGetUserByExternalIDResponse_ErrorType

GPBEnumDescriptor *HubGetUserByExternalIDResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000NotFound\000";
    static const int32_t values[] = {
        HubGetUserByExternalIDResponse_ErrorType_None,
        HubGetUserByExternalIDResponse_ErrorType_UnknownError,
        HubGetUserByExternalIDResponse_ErrorType_BadRequest,
        HubGetUserByExternalIDResponse_ErrorType_NotFound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(HubGetUserByExternalIDResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:HubGetUserByExternalIDResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL HubGetUserByExternalIDResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case HubGetUserByExternalIDResponse_ErrorType_None:
    case HubGetUserByExternalIDResponse_ErrorType_UnknownError:
    case HubGetUserByExternalIDResponse_ErrorType_BadRequest:
    case HubGetUserByExternalIDResponse_ErrorType_NotFound:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
