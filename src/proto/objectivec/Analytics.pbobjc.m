// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytics.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Analytics.pbobjc.h"
#import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - AnalyticsRoot

@implementation AnalyticsRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - AnalyticsRoot_FileDescriptor

static GPBFileDescriptor *AnalyticsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AnalyticsEvent

@implementation AnalyticsEvent

@dynamic userId;
@dynamic agentId;
@dynamic ip;
@dynamic action;
@dynamic category;
@dynamic screen;
@dynamic properties, properties_Count;
@dynamic agentType;
@dynamic localAgentId;

typedef struct AnalyticsEvent__storage_ {
  uint32_t _has_storage_[1];
  UserAgent_UserAgentType agentType;
  NSString *userId;
  NSString *agentId;
  NSString *ip;
  NSString *action;
  NSString *category;
  NSString *screen;
  NSMutableDictionary *properties;
  NSString *localAgentId;
} AnalyticsEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .number = AnalyticsEvent_FieldNumber_UserId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, userId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentId",
        .number = AnalyticsEvent_FieldNumber_AgentId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, agentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ip",
        .number = AnalyticsEvent_FieldNumber_Ip,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, ip),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "action",
        .number = AnalyticsEvent_FieldNumber_Action,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, action),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "category",
        .number = AnalyticsEvent_FieldNumber_Category,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, category),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "screen",
        .number = AnalyticsEvent_FieldNumber_Screen,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, screen),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "properties",
        .number = AnalyticsEvent_FieldNumber_Properties,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, properties),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "agentType",
        .number = AnalyticsEvent_FieldNumber_AgentType,
        .hasIndex = 7,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(AnalyticsEvent__storage_, agentType),
        .defaultValue.valueEnum = UserAgent_UserAgentType_Unknown,
        .dataTypeSpecific.enumDescFunc = UserAgent_UserAgentType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "localAgentId",
        .number = AnalyticsEvent_FieldNumber_LocalAgentId,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AnalyticsEvent__storage_, localAgentId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AnalyticsEvent class]
                                     rootClass:[AnalyticsRoot class]
                                          file:AnalyticsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AnalyticsEvent__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AnalyticsEvent_AgentType_RawValue(AnalyticsEvent *message) {
  GPBDescriptor *descriptor = [AnalyticsEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyticsEvent_FieldNumber_AgentType];
  return GPBGetMessageInt32Field(message, field);
}

void SetAnalyticsEvent_AgentType_RawValue(AnalyticsEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [AnalyticsEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AnalyticsEvent_FieldNumber_AgentType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


// @@protoc_insertion_point(global_scope)
