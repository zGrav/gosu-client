// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "View.pbobjc.h"
 #import "Wrappers.pbobjc.h"
 #import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ViewRoot

@implementation ViewRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ViewRoot_FileDescriptor

static GPBFileDescriptor *ViewRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCViewsCreateViewRequest

@implementation RPCViewsCreateViewRequest

@dynamic userId;
@dynamic name;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct RPCViewsCreateViewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *name;
  NSMutableArray *propertiesArray;
} RPCViewsCreateViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsCreateViewRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsCreateViewRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsCreateViewRequest_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsCreateViewRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = RPCViewsCreateViewRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsCreateViewRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsCreateViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsCreateViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsCreateViewResponse

@implementation RPCViewsCreateViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct RPCViewsCreateViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsCreateViewResponse_ErrorType error;
  View *view;
} RPCViewsCreateViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsCreateViewResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsCreateViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsCreateViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsCreateViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsCreateViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsCreateViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsCreateViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsCreateViewResponse_Error_RawValue(RPCViewsCreateViewResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsCreateViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsCreateViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsCreateViewResponse_Error_RawValue(RPCViewsCreateViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsCreateViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsCreateViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsCreateViewResponse_ErrorType

GPBEnumDescriptor *RPCViewsCreateViewResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsCreateViewResponse_ErrorType_None,
        RPCViewsCreateViewResponse_ErrorType_UnknownError,
        RPCViewsCreateViewResponse_ErrorType_BadRequest,
        RPCViewsCreateViewResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsCreateViewResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsCreateViewResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsCreateViewResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsCreateViewResponse_ErrorType_None:
    case RPCViewsCreateViewResponse_ErrorType_UnknownError:
    case RPCViewsCreateViewResponse_ErrorType_BadRequest:
    case RPCViewsCreateViewResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsEditViewRequest

@implementation RPCViewsEditViewRequest

@dynamic userId;
@dynamic viewId;
@dynamic hasName, name;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct RPCViewsEditViewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  GPBStringValue *name;
  NSMutableArray *propertiesArray;
} RPCViewsEditViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsEditViewRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsEditViewRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsEditViewRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsEditViewRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = RPCViewsEditViewRequest_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCViewsEditViewRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = RPCViewsEditViewRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsEditViewRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsEditViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsEditViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsEditViewResponse

@implementation RPCViewsEditViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct RPCViewsEditViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsEditViewResponse_ErrorType error;
  View *view;
} RPCViewsEditViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsEditViewResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsEditViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsEditViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsEditViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsEditViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsEditViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsEditViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsEditViewResponse_Error_RawValue(RPCViewsEditViewResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsEditViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsEditViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsEditViewResponse_Error_RawValue(RPCViewsEditViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsEditViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsEditViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsEditViewResponse_ErrorType

GPBEnumDescriptor *RPCViewsEditViewResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsEditViewResponse_ErrorType_None,
        RPCViewsEditViewResponse_ErrorType_UnknownError,
        RPCViewsEditViewResponse_ErrorType_BadRequest,
        RPCViewsEditViewResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsEditViewResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsEditViewResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsEditViewResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsEditViewResponse_ErrorType_None:
    case RPCViewsEditViewResponse_ErrorType_UnknownError:
    case RPCViewsEditViewResponse_ErrorType_BadRequest:
    case RPCViewsEditViewResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsDeleteViewRequest

@implementation RPCViewsDeleteViewRequest

@dynamic userId;
@dynamic viewId;

typedef struct RPCViewsDeleteViewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
} RPCViewsDeleteViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsDeleteViewRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsDeleteViewRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsDeleteViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsDeleteViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsDeleteViewResponse

@implementation RPCViewsDeleteViewResponse

@dynamic error;

typedef struct RPCViewsDeleteViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsDeleteViewResponse_ErrorType error;
} RPCViewsDeleteViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsDeleteViewResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsDeleteViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsDeleteViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsDeleteViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsDeleteViewResponse_Error_RawValue(RPCViewsDeleteViewResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsDeleteViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsDeleteViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsDeleteViewResponse_Error_RawValue(RPCViewsDeleteViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsDeleteViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsDeleteViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsDeleteViewResponse_ErrorType

GPBEnumDescriptor *RPCViewsDeleteViewResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsDeleteViewResponse_ErrorType_None,
        RPCViewsDeleteViewResponse_ErrorType_UnknownError,
        RPCViewsDeleteViewResponse_ErrorType_BadRequest,
        RPCViewsDeleteViewResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsDeleteViewResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsDeleteViewResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsDeleteViewResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsDeleteViewResponse_ErrorType_None:
    case RPCViewsDeleteViewResponse_ErrorType_UnknownError:
    case RPCViewsDeleteViewResponse_ErrorType_BadRequest:
    case RPCViewsDeleteViewResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsGetViewRequest

@implementation RPCViewsGetViewRequest

@dynamic viewId;

typedef struct RPCViewsGetViewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *viewId;
} RPCViewsGetViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetViewRequest_FieldNumber_ViewId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetViewRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsGetViewResponse

@implementation RPCViewsGetViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct RPCViewsGetViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsGetViewResponse_ErrorType error;
  View *view;
} RPCViewsGetViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsGetViewResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsGetViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsGetViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsGetViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsGetViewResponse_Error_RawValue(RPCViewsGetViewResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsGetViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsGetViewResponse_Error_RawValue(RPCViewsGetViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsGetViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsGetViewResponse_ErrorType

GPBEnumDescriptor *RPCViewsGetViewResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000N"
        "otFound\000";
    static const int32_t values[] = {
        RPCViewsGetViewResponse_ErrorType_None,
        RPCViewsGetViewResponse_ErrorType_UnknownError,
        RPCViewsGetViewResponse_ErrorType_BadRequest,
        RPCViewsGetViewResponse_ErrorType_Forbidden,
        RPCViewsGetViewResponse_ErrorType_NotFound,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsGetViewResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsGetViewResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsGetViewResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsGetViewResponse_ErrorType_None:
    case RPCViewsGetViewResponse_ErrorType_UnknownError:
    case RPCViewsGetViewResponse_ErrorType_BadRequest:
    case RPCViewsGetViewResponse_ErrorType_Forbidden:
    case RPCViewsGetViewResponse_ErrorType_NotFound:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsGetViewsRequest

@implementation RPCViewsGetViewsRequest

@dynamic userId;

typedef struct RPCViewsGetViewsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
} RPCViewsGetViewsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetViewsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetViewsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetViewsRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetViewsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsGetViewsResponse

@implementation RPCViewsGetViewsResponse

@dynamic error;
@dynamic viewsArray, viewsArray_Count;
@dynamic viewsWithMetaArray, viewsWithMetaArray_Count;

typedef struct RPCViewsGetViewsResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsGetViewsResponse_ErrorType error;
  NSMutableArray *viewsArray;
  NSMutableArray *viewsWithMetaArray;
} RPCViewsGetViewsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsGetViewsResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsGetViewsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetViewsResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "viewsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsGetViewsResponse_FieldNumber_ViewsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsGetViewsResponse__storage_, viewsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "viewsWithMetaArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewWithMeta),
        .number = RPCViewsGetViewsResponse_FieldNumber_ViewsWithMetaArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsGetViewsResponse__storage_, viewsWithMetaArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetViewsResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetViewsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsGetViewsResponse_Error_RawValue(RPCViewsGetViewsResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsGetViewsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetViewsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsGetViewsResponse_Error_RawValue(RPCViewsGetViewsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsGetViewsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetViewsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsGetViewsResponse_ErrorType

GPBEnumDescriptor *RPCViewsGetViewsResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsGetViewsResponse_ErrorType_None,
        RPCViewsGetViewsResponse_ErrorType_UnknownError,
        RPCViewsGetViewsResponse_ErrorType_BadRequest,
        RPCViewsGetViewsResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsGetViewsResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsGetViewsResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsGetViewsResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsGetViewsResponse_ErrorType_None:
    case RPCViewsGetViewsResponse_ErrorType_UnknownError:
    case RPCViewsGetViewsResponse_ErrorType_BadRequest:
    case RPCViewsGetViewsResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsSetViewPropertiesRequest

@implementation RPCViewsSetViewPropertiesRequest

@dynamic userId;
@dynamic viewId;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct RPCViewsSetViewPropertiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  NSMutableArray *propertiesArray;
} RPCViewsSetViewPropertiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsSetViewPropertiesRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsSetViewPropertiesRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsSetViewPropertiesRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsSetViewPropertiesRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = RPCViewsSetViewPropertiesRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsSetViewPropertiesRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsSetViewPropertiesRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsSetViewPropertiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsSetViewPropertiesResponse

@implementation RPCViewsSetViewPropertiesResponse

@dynamic error;

typedef struct RPCViewsSetViewPropertiesResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsSetViewPropertiesResponse_ErrorType error;
} RPCViewsSetViewPropertiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsSetViewPropertiesResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsSetViewPropertiesResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsSetViewPropertiesResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsSetViewPropertiesResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsSetViewPropertiesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsSetViewPropertiesResponse_Error_RawValue(RPCViewsSetViewPropertiesResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsSetViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsSetViewPropertiesResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsSetViewPropertiesResponse_Error_RawValue(RPCViewsSetViewPropertiesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsSetViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsSetViewPropertiesResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsSetViewPropertiesResponse_ErrorType

GPBEnumDescriptor *RPCViewsSetViewPropertiesResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsSetViewPropertiesResponse_ErrorType_None,
        RPCViewsSetViewPropertiesResponse_ErrorType_UnknownError,
        RPCViewsSetViewPropertiesResponse_ErrorType_BadRequest,
        RPCViewsSetViewPropertiesResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsSetViewPropertiesResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsSetViewPropertiesResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsSetViewPropertiesResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsSetViewPropertiesResponse_ErrorType_None:
    case RPCViewsSetViewPropertiesResponse_ErrorType_UnknownError:
    case RPCViewsSetViewPropertiesResponse_ErrorType_BadRequest:
    case RPCViewsSetViewPropertiesResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsDeleteViewPropertiesRequest

@implementation RPCViewsDeleteViewPropertiesRequest

@dynamic userId;
@dynamic viewId;
@dynamic keysArray, keysArray_Count;

typedef struct RPCViewsDeleteViewPropertiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  NSMutableArray *keysArray;
} RPCViewsDeleteViewPropertiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsDeleteViewPropertiesRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewPropertiesRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsDeleteViewPropertiesRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewPropertiesRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keysArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsDeleteViewPropertiesRequest_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewPropertiesRequest__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsDeleteViewPropertiesRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsDeleteViewPropertiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsDeleteViewPropertiesResponse

@implementation RPCViewsDeleteViewPropertiesResponse

@dynamic error;

typedef struct RPCViewsDeleteViewPropertiesResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsDeleteViewPropertiesResponse_ErrorType error;
} RPCViewsDeleteViewPropertiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsDeleteViewPropertiesResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsDeleteViewPropertiesResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsDeleteViewPropertiesResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsDeleteViewPropertiesResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsDeleteViewPropertiesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsDeleteViewPropertiesResponse_Error_RawValue(RPCViewsDeleteViewPropertiesResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsDeleteViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsDeleteViewPropertiesResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsDeleteViewPropertiesResponse_Error_RawValue(RPCViewsDeleteViewPropertiesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsDeleteViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsDeleteViewPropertiesResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCViewsDeleteViewPropertiesResponse_ErrorType

GPBEnumDescriptor *RPCViewsDeleteViewPropertiesResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCViewsDeleteViewPropertiesResponse_ErrorType_None,
        RPCViewsDeleteViewPropertiesResponse_ErrorType_UnknownError,
        RPCViewsDeleteViewPropertiesResponse_ErrorType_BadRequest,
        RPCViewsDeleteViewPropertiesResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCViewsDeleteViewPropertiesResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCViewsDeleteViewPropertiesResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCViewsDeleteViewPropertiesResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCViewsDeleteViewPropertiesResponse_ErrorType_None:
    case RPCViewsDeleteViewPropertiesResponse_ErrorType_UnknownError:
    case RPCViewsDeleteViewPropertiesResponse_ErrorType_BadRequest:
    case RPCViewsDeleteViewPropertiesResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCViewsPopulateViewFromURLRequest

@implementation RPCViewsPopulateViewFromURLRequest

@dynamic userId;
@dynamic viewId;
@dynamic URL;

typedef struct RPCViewsPopulateViewFromURLRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  NSString *URL;
} RPCViewsPopulateViewFromURLRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsPopulateViewFromURLRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsPopulateViewFromURLRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsPopulateViewFromURLRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsPopulateViewFromURLRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsPopulateViewFromURLRequest_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCViewsPopulateViewFromURLRequest__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsPopulateViewFromURLRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsPopulateViewFromURLRequest__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsPopulateViewFromURLResponse

@implementation RPCViewsPopulateViewFromURLResponse

@dynamic error;
@dynamic hasView, view;

typedef struct RPCViewsPopulateViewFromURLResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsPopulateViewFromURLResponse_ErrorType error;
  View *view;
} RPCViewsPopulateViewFromURLResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsPopulateViewFromURLResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsPopulateViewFromURLResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsPopulateViewFromURLResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsPopulateViewFromURLResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsPopulateViewFromURLResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsPopulateViewFromURLResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsPopulateViewFromURLResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsPopulateViewFromURLResponse_Error_RawValue(RPCViewsPopulateViewFromURLResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsPopulateViewFromURLResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsPopulateViewFromURLResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsPopulateViewFromURLResponse_Error_RawValue(RPCViewsPopulateViewFromURLResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsPopulateViewFromURLResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsPopulateViewFromURLResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCViewsTransferOwnershipRequest

@implementation RPCViewsTransferOwnershipRequest

@dynamic userId;
@dynamic viewId;
@dynamic targetUserId;

typedef struct RPCViewsTransferOwnershipRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  NSString *targetUserId;
} RPCViewsTransferOwnershipRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsTransferOwnershipRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsTransferOwnershipRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsTransferOwnershipRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsTransferOwnershipRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsTransferOwnershipRequest_FieldNumber_TargetUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCViewsTransferOwnershipRequest__storage_, targetUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsTransferOwnershipRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsTransferOwnershipRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsTransferOwnershipResponse

@implementation RPCViewsTransferOwnershipResponse

@dynamic error;

typedef struct RPCViewsTransferOwnershipResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsTransferOwnershipResponse_ErrorType error;
} RPCViewsTransferOwnershipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsTransferOwnershipResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsTransferOwnershipResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsTransferOwnershipResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsTransferOwnershipResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsTransferOwnershipResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsTransferOwnershipResponse_Error_RawValue(RPCViewsTransferOwnershipResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsTransferOwnershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsTransferOwnershipResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsTransferOwnershipResponse_Error_RawValue(RPCViewsTransferOwnershipResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsTransferOwnershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsTransferOwnershipResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCViewsGetEditorInviteCodeRequest

@implementation RPCViewsGetEditorInviteCodeRequest

@dynamic userId;
@dynamic viewId;

typedef struct RPCViewsGetEditorInviteCodeRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
} RPCViewsGetEditorInviteCodeRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetEditorInviteCodeRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteCodeRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetEditorInviteCodeRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteCodeRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetEditorInviteCodeRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetEditorInviteCodeRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsGetEditorInviteCodeResponse

@implementation RPCViewsGetEditorInviteCodeResponse

@dynamic error;
@dynamic hasInvite, invite;

typedef struct RPCViewsGetEditorInviteCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsGetEditorInviteCodeResponse_ErrorType error;
  ViewEditorInvite *invite;
} RPCViewsGetEditorInviteCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsGetEditorInviteCodeResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsGetEditorInviteCodeResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteCodeResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewEditorInvite),
        .number = RPCViewsGetEditorInviteCodeResponse_FieldNumber_Invite,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteCodeResponse__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetEditorInviteCodeResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetEditorInviteCodeResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsGetEditorInviteCodeResponse_Error_RawValue(RPCViewsGetEditorInviteCodeResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsGetEditorInviteCodeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetEditorInviteCodeResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsGetEditorInviteCodeResponse_Error_RawValue(RPCViewsGetEditorInviteCodeResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsGetEditorInviteCodeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetEditorInviteCodeResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCViewsGetEditorInviteInfoRequest

@implementation RPCViewsGetEditorInviteInfoRequest

@dynamic userId;
@dynamic code;

typedef struct RPCViewsGetEditorInviteInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *code;
} RPCViewsGetEditorInviteInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetEditorInviteInfoRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteInfoRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsGetEditorInviteInfoRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteInfoRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetEditorInviteInfoRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetEditorInviteInfoRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsGetEditorInviteInfoResponse

@implementation RPCViewsGetEditorInviteInfoResponse

@dynamic error;
@dynamic hasInvite, invite;
@dynamic hasView, view;

typedef struct RPCViewsGetEditorInviteInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsGetEditorInviteInfoResponse_ErrorType error;
  ViewEditorInvite *invite;
  View *view;
} RPCViewsGetEditorInviteInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsGetEditorInviteInfoResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsGetEditorInviteInfoResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteInfoResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewEditorInvite),
        .number = RPCViewsGetEditorInviteInfoResponse_FieldNumber_Invite,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteInfoResponse__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsGetEditorInviteInfoResponse_FieldNumber_View,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCViewsGetEditorInviteInfoResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsGetEditorInviteInfoResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsGetEditorInviteInfoResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsGetEditorInviteInfoResponse_Error_RawValue(RPCViewsGetEditorInviteInfoResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsGetEditorInviteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetEditorInviteInfoResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsGetEditorInviteInfoResponse_Error_RawValue(RPCViewsGetEditorInviteInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsGetEditorInviteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsGetEditorInviteInfoResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCViewsAcceptEditorInviteRequest

@implementation RPCViewsAcceptEditorInviteRequest

@dynamic userId;
@dynamic code;

typedef struct RPCViewsAcceptEditorInviteRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *code;
} RPCViewsAcceptEditorInviteRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsAcceptEditorInviteRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsAcceptEditorInviteRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsAcceptEditorInviteRequest_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsAcceptEditorInviteRequest__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsAcceptEditorInviteRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsAcceptEditorInviteRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsAcceptEditorInviteResponse

@implementation RPCViewsAcceptEditorInviteResponse

@dynamic error;
@dynamic hasView, view;

typedef struct RPCViewsAcceptEditorInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsAcceptEditorInviteResponse_ErrorType error;
  View *view;
} RPCViewsAcceptEditorInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsAcceptEditorInviteResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsAcceptEditorInviteResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsAcceptEditorInviteResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = RPCViewsAcceptEditorInviteResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsAcceptEditorInviteResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsAcceptEditorInviteResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsAcceptEditorInviteResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsAcceptEditorInviteResponse_Error_RawValue(RPCViewsAcceptEditorInviteResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsAcceptEditorInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsAcceptEditorInviteResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsAcceptEditorInviteResponse_Error_RawValue(RPCViewsAcceptEditorInviteResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsAcceptEditorInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsAcceptEditorInviteResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCViewsRemoveEditorRequest

@implementation RPCViewsRemoveEditorRequest

@dynamic userId;
@dynamic viewId;
@dynamic targetUserId;

typedef struct RPCViewsRemoveEditorRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *viewId;
  NSString *targetUserId;
} RPCViewsRemoveEditorRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsRemoveEditorRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsRemoveEditorRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsRemoveEditorRequest_FieldNumber_ViewId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCViewsRemoveEditorRequest__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "targetUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCViewsRemoveEditorRequest_FieldNumber_TargetUserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCViewsRemoveEditorRequest__storage_, targetUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsRemoveEditorRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsRemoveEditorRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCViewsRemoveEditorResponse

@implementation RPCViewsRemoveEditorResponse

@dynamic error;

typedef struct RPCViewsRemoveEditorResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsRemoveEditorResponse_ErrorType error;
} RPCViewsRemoveEditorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsRemoveEditorResponse_ErrorType_EnumDescriptor,
        .number = RPCViewsRemoveEditorResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCViewsRemoveEditorResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCViewsRemoveEditorResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCViewsRemoveEditorResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCViewsRemoveEditorResponse_Error_RawValue(RPCViewsRemoveEditorResponse *message) {
  GPBDescriptor *descriptor = [RPCViewsRemoveEditorResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsRemoveEditorResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCViewsRemoveEditorResponse_Error_RawValue(RPCViewsRemoveEditorResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCViewsRemoveEditorResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCViewsRemoveEditorResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsCreateViewRequest

@implementation ViewsCreateViewRequest

@dynamic name;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct ViewsCreateViewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *propertiesArray;
} ViewsCreateViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = ViewsCreateViewRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsCreateViewRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = ViewsCreateViewRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsCreateViewRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsCreateViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsCreateViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewsCreateViewResponse

@implementation ViewsCreateViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct ViewsCreateViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsCreateViewResponse_ErrorType error;
  View *view;
} ViewsCreateViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsCreateViewResponse_ErrorType_EnumDescriptor,
        .number = ViewsCreateViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsCreateViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsCreateViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsCreateViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsCreateViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsCreateViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsCreateViewResponse_Error_RawValue(ViewsCreateViewResponse *message) {
  GPBDescriptor *descriptor = [ViewsCreateViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsCreateViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsCreateViewResponse_Error_RawValue(ViewsCreateViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsCreateViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsCreateViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsEditViewRequest

@implementation ViewsEditViewRequest

@dynamic hasName, name;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct ViewsEditViewRequest__storage_ {
  uint32_t _has_storage_[1];
  GPBStringValue *name;
  NSMutableArray *propertiesArray;
} ViewsEditViewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ViewsEditViewRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsEditViewRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = ViewsEditViewRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsEditViewRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsEditViewRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsEditViewRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewsEditViewResponse

@implementation ViewsEditViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct ViewsEditViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsEditViewResponse_ErrorType error;
  View *view;
} ViewsEditViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsEditViewResponse_ErrorType_EnumDescriptor,
        .number = ViewsEditViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsEditViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsEditViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsEditViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsEditViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsEditViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsEditViewResponse_Error_RawValue(ViewsEditViewResponse *message) {
  GPBDescriptor *descriptor = [ViewsEditViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsEditViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsEditViewResponse_Error_RawValue(ViewsEditViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsEditViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsEditViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsDeleteViewResponse

@implementation ViewsDeleteViewResponse

@dynamic error;

typedef struct ViewsDeleteViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsDeleteViewResponse_ErrorType error;
} ViewsDeleteViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsDeleteViewResponse_ErrorType_EnumDescriptor,
        .number = ViewsDeleteViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsDeleteViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsDeleteViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsDeleteViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsDeleteViewResponse_Error_RawValue(ViewsDeleteViewResponse *message) {
  GPBDescriptor *descriptor = [ViewsDeleteViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsDeleteViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsDeleteViewResponse_Error_RawValue(ViewsDeleteViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsDeleteViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsDeleteViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsGetViewResponse

@implementation ViewsGetViewResponse

@dynamic error;
@dynamic hasView, view;

typedef struct ViewsGetViewResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsGetViewResponse_ErrorType error;
  View *view;
} ViewsGetViewResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsGetViewResponse_ErrorType_EnumDescriptor,
        .number = ViewsGetViewResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsGetViewResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsGetViewResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsGetViewResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsGetViewResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsGetViewResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsGetViewResponse_Error_RawValue(ViewsGetViewResponse *message) {
  GPBDescriptor *descriptor = [ViewsGetViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetViewResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsGetViewResponse_Error_RawValue(ViewsGetViewResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsGetViewResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetViewResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsGetViewsResponse

@implementation ViewsGetViewsResponse

@dynamic error;
@dynamic viewsArray, viewsArray_Count;
@dynamic viewsWithMetaArray, viewsWithMetaArray_Count;

typedef struct ViewsGetViewsResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsGetViewsResponse_ErrorType error;
  NSMutableArray *viewsArray;
  NSMutableArray *viewsWithMetaArray;
} ViewsGetViewsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsGetViewsResponse_ErrorType_EnumDescriptor,
        .number = ViewsGetViewsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsGetViewsResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "viewsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsGetViewsResponse_FieldNumber_ViewsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsGetViewsResponse__storage_, viewsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "viewsWithMetaArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewWithMeta),
        .number = ViewsGetViewsResponse_FieldNumber_ViewsWithMetaArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsGetViewsResponse__storage_, viewsWithMetaArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsGetViewsResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsGetViewsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsGetViewsResponse_Error_RawValue(ViewsGetViewsResponse *message) {
  GPBDescriptor *descriptor = [ViewsGetViewsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetViewsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsGetViewsResponse_Error_RawValue(ViewsGetViewsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsGetViewsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetViewsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsSetViewPropertiesRequest

@implementation ViewsSetViewPropertiesRequest

@dynamic propertiesArray, propertiesArray_Count;

typedef struct ViewsSetViewPropertiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *propertiesArray;
} ViewsSetViewPropertiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = ViewsSetViewPropertiesRequest_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsSetViewPropertiesRequest__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsSetViewPropertiesRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsSetViewPropertiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewsSetViewPropertiesResponse

@implementation ViewsSetViewPropertiesResponse

@dynamic error;

typedef struct ViewsSetViewPropertiesResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsSetViewPropertiesResponse_ErrorType error;
} ViewsSetViewPropertiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsSetViewPropertiesResponse_ErrorType_EnumDescriptor,
        .number = ViewsSetViewPropertiesResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsSetViewPropertiesResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsSetViewPropertiesResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsSetViewPropertiesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsSetViewPropertiesResponse_Error_RawValue(ViewsSetViewPropertiesResponse *message) {
  GPBDescriptor *descriptor = [ViewsSetViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsSetViewPropertiesResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsSetViewPropertiesResponse_Error_RawValue(ViewsSetViewPropertiesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsSetViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsSetViewPropertiesResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsDeleteViewPropertiesRequest

@implementation ViewsDeleteViewPropertiesRequest

@dynamic keysArray, keysArray_Count;

typedef struct ViewsDeleteViewPropertiesRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *keysArray;
} ViewsDeleteViewPropertiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keysArray",
        .dataTypeSpecific.className = NULL,
        .number = ViewsDeleteViewPropertiesRequest_FieldNumber_KeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewsDeleteViewPropertiesRequest__storage_, keysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsDeleteViewPropertiesRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsDeleteViewPropertiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewsDeleteViewPropertiesResponse

@implementation ViewsDeleteViewPropertiesResponse

@dynamic error;

typedef struct ViewsDeleteViewPropertiesResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCViewsDeleteViewPropertiesResponse_ErrorType error;
} ViewsDeleteViewPropertiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCViewsDeleteViewPropertiesResponse_ErrorType_EnumDescriptor,
        .number = ViewsDeleteViewPropertiesResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsDeleteViewPropertiesResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsDeleteViewPropertiesResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsDeleteViewPropertiesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsDeleteViewPropertiesResponse_Error_RawValue(ViewsDeleteViewPropertiesResponse *message) {
  GPBDescriptor *descriptor = [ViewsDeleteViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsDeleteViewPropertiesResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsDeleteViewPropertiesResponse_Error_RawValue(ViewsDeleteViewPropertiesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsDeleteViewPropertiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsDeleteViewPropertiesResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ViewsPopulateViewFromURLRequest

@implementation ViewsPopulateViewFromURLRequest

@dynamic URL;

typedef struct ViewsPopulateViewFromURLRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} ViewsPopulateViewFromURLRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = ViewsPopulateViewFromURLRequest_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsPopulateViewFromURLRequest__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsPopulateViewFromURLRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsPopulateViewFromURLRequest__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewsPopulateViewFromURLResponse

@implementation ViewsPopulateViewFromURLResponse

@dynamic error;
@dynamic hasView, view;

typedef struct ViewsPopulateViewFromURLResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsPopulateViewFromURLResponse_ErrorType error;
  View *view;
} ViewsPopulateViewFromURLResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsPopulateViewFromURLResponse_ErrorType_EnumDescriptor,
        .number = ViewsPopulateViewFromURLResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsPopulateViewFromURLResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsPopulateViewFromURLResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsPopulateViewFromURLResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsPopulateViewFromURLResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsPopulateViewFromURLResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsPopulateViewFromURLResponse_Error_RawValue(ViewsPopulateViewFromURLResponse *message) {
  GPBDescriptor *descriptor = [ViewsPopulateViewFromURLResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsPopulateViewFromURLResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsPopulateViewFromURLResponse_Error_RawValue(ViewsPopulateViewFromURLResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsPopulateViewFromURLResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsPopulateViewFromURLResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsPopulateViewFromURLResponse_ErrorType

GPBEnumDescriptor *ViewsPopulateViewFromURLResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000P"
        "ageNotFound\000InvalidURL\000CouldNotCrawl\000";
    static const int32_t values[] = {
        ViewsPopulateViewFromURLResponse_ErrorType_None,
        ViewsPopulateViewFromURLResponse_ErrorType_UnknownError,
        ViewsPopulateViewFromURLResponse_ErrorType_BadRequest,
        ViewsPopulateViewFromURLResponse_ErrorType_Forbidden,
        ViewsPopulateViewFromURLResponse_ErrorType_PageNotFound,
        ViewsPopulateViewFromURLResponse_ErrorType_InvalidURL,
        ViewsPopulateViewFromURLResponse_ErrorType_CouldNotCrawl,
    };
    static const char *extraTextFormatInfo = "\001\005g\203\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsPopulateViewFromURLResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsPopulateViewFromURLResponse_ErrorType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsPopulateViewFromURLResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsPopulateViewFromURLResponse_ErrorType_None:
    case ViewsPopulateViewFromURLResponse_ErrorType_UnknownError:
    case ViewsPopulateViewFromURLResponse_ErrorType_BadRequest:
    case ViewsPopulateViewFromURLResponse_ErrorType_Forbidden:
    case ViewsPopulateViewFromURLResponse_ErrorType_PageNotFound:
    case ViewsPopulateViewFromURLResponse_ErrorType_InvalidURL:
    case ViewsPopulateViewFromURLResponse_ErrorType_CouldNotCrawl:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewsTransferOwnershipResponse

@implementation ViewsTransferOwnershipResponse

@dynamic error;

typedef struct ViewsTransferOwnershipResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsTransferOwnershipResponse_ErrorType error;
} ViewsTransferOwnershipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsTransferOwnershipResponse_ErrorType_EnumDescriptor,
        .number = ViewsTransferOwnershipResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsTransferOwnershipResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsTransferOwnershipResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsTransferOwnershipResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsTransferOwnershipResponse_Error_RawValue(ViewsTransferOwnershipResponse *message) {
  GPBDescriptor *descriptor = [ViewsTransferOwnershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsTransferOwnershipResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsTransferOwnershipResponse_Error_RawValue(ViewsTransferOwnershipResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsTransferOwnershipResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsTransferOwnershipResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsTransferOwnershipResponse_ErrorType

GPBEnumDescriptor *ViewsTransferOwnershipResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        ViewsTransferOwnershipResponse_ErrorType_None,
        ViewsTransferOwnershipResponse_ErrorType_UnknownError,
        ViewsTransferOwnershipResponse_ErrorType_BadRequest,
        ViewsTransferOwnershipResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsTransferOwnershipResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsTransferOwnershipResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsTransferOwnershipResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsTransferOwnershipResponse_ErrorType_None:
    case ViewsTransferOwnershipResponse_ErrorType_UnknownError:
    case ViewsTransferOwnershipResponse_ErrorType_BadRequest:
    case ViewsTransferOwnershipResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewsGetEditorInviteCodeResponse

@implementation ViewsGetEditorInviteCodeResponse

@dynamic error;
@dynamic hasInvite, invite;

typedef struct ViewsGetEditorInviteCodeResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsGetEditorInviteCodeResponse_ErrorType error;
  ViewEditorInvite *invite;
} ViewsGetEditorInviteCodeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsGetEditorInviteCodeResponse_ErrorType_EnumDescriptor,
        .number = ViewsGetEditorInviteCodeResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsGetEditorInviteCodeResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewEditorInvite),
        .number = ViewsGetEditorInviteCodeResponse_FieldNumber_Invite,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsGetEditorInviteCodeResponse__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsGetEditorInviteCodeResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsGetEditorInviteCodeResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsGetEditorInviteCodeResponse_Error_RawValue(ViewsGetEditorInviteCodeResponse *message) {
  GPBDescriptor *descriptor = [ViewsGetEditorInviteCodeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetEditorInviteCodeResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsGetEditorInviteCodeResponse_Error_RawValue(ViewsGetEditorInviteCodeResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsGetEditorInviteCodeResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetEditorInviteCodeResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsGetEditorInviteCodeResponse_ErrorType

GPBEnumDescriptor *ViewsGetEditorInviteCodeResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        ViewsGetEditorInviteCodeResponse_ErrorType_None,
        ViewsGetEditorInviteCodeResponse_ErrorType_UnknownError,
        ViewsGetEditorInviteCodeResponse_ErrorType_BadRequest,
        ViewsGetEditorInviteCodeResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsGetEditorInviteCodeResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsGetEditorInviteCodeResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsGetEditorInviteCodeResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsGetEditorInviteCodeResponse_ErrorType_None:
    case ViewsGetEditorInviteCodeResponse_ErrorType_UnknownError:
    case ViewsGetEditorInviteCodeResponse_ErrorType_BadRequest:
    case ViewsGetEditorInviteCodeResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewsGetEditorInviteInfoResponse

@implementation ViewsGetEditorInviteInfoResponse

@dynamic error;
@dynamic hasInvite, invite;
@dynamic hasView, view;

typedef struct ViewsGetEditorInviteInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsGetEditorInviteInfoResponse_ErrorType error;
  ViewEditorInvite *invite;
  View *view;
} ViewsGetEditorInviteInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsGetEditorInviteInfoResponse_ErrorType_EnumDescriptor,
        .number = ViewsGetEditorInviteInfoResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsGetEditorInviteInfoResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewEditorInvite),
        .number = ViewsGetEditorInviteInfoResponse_FieldNumber_Invite,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsGetEditorInviteInfoResponse__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsGetEditorInviteInfoResponse_FieldNumber_View,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ViewsGetEditorInviteInfoResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsGetEditorInviteInfoResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsGetEditorInviteInfoResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsGetEditorInviteInfoResponse_Error_RawValue(ViewsGetEditorInviteInfoResponse *message) {
  GPBDescriptor *descriptor = [ViewsGetEditorInviteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetEditorInviteInfoResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsGetEditorInviteInfoResponse_Error_RawValue(ViewsGetEditorInviteInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsGetEditorInviteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsGetEditorInviteInfoResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsGetEditorInviteInfoResponse_ErrorType

GPBEnumDescriptor *ViewsGetEditorInviteInfoResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000I"
        "nvalidCode\000";
    static const int32_t values[] = {
        ViewsGetEditorInviteInfoResponse_ErrorType_None,
        ViewsGetEditorInviteInfoResponse_ErrorType_UnknownError,
        ViewsGetEditorInviteInfoResponse_ErrorType_BadRequest,
        ViewsGetEditorInviteInfoResponse_ErrorType_Forbidden,
        ViewsGetEditorInviteInfoResponse_ErrorType_InvalidCode,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsGetEditorInviteInfoResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsGetEditorInviteInfoResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsGetEditorInviteInfoResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsGetEditorInviteInfoResponse_ErrorType_None:
    case ViewsGetEditorInviteInfoResponse_ErrorType_UnknownError:
    case ViewsGetEditorInviteInfoResponse_ErrorType_BadRequest:
    case ViewsGetEditorInviteInfoResponse_ErrorType_Forbidden:
    case ViewsGetEditorInviteInfoResponse_ErrorType_InvalidCode:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewsAcceptEditorInviteResponse

@implementation ViewsAcceptEditorInviteResponse

@dynamic error;
@dynamic hasView, view;

typedef struct ViewsAcceptEditorInviteResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsAcceptEditorInviteResponse_ErrorType error;
  View *view;
} ViewsAcceptEditorInviteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsAcceptEditorInviteResponse_ErrorType_EnumDescriptor,
        .number = ViewsAcceptEditorInviteResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsAcceptEditorInviteResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewsAcceptEditorInviteResponse_FieldNumber_View,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewsAcceptEditorInviteResponse__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsAcceptEditorInviteResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsAcceptEditorInviteResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsAcceptEditorInviteResponse_Error_RawValue(ViewsAcceptEditorInviteResponse *message) {
  GPBDescriptor *descriptor = [ViewsAcceptEditorInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsAcceptEditorInviteResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsAcceptEditorInviteResponse_Error_RawValue(ViewsAcceptEditorInviteResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsAcceptEditorInviteResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsAcceptEditorInviteResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsAcceptEditorInviteResponse_ErrorType

GPBEnumDescriptor *ViewsAcceptEditorInviteResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000I"
        "nvalidCode\000";
    static const int32_t values[] = {
        ViewsAcceptEditorInviteResponse_ErrorType_None,
        ViewsAcceptEditorInviteResponse_ErrorType_UnknownError,
        ViewsAcceptEditorInviteResponse_ErrorType_BadRequest,
        ViewsAcceptEditorInviteResponse_ErrorType_Forbidden,
        ViewsAcceptEditorInviteResponse_ErrorType_InvalidCode,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsAcceptEditorInviteResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsAcceptEditorInviteResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsAcceptEditorInviteResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsAcceptEditorInviteResponse_ErrorType_None:
    case ViewsAcceptEditorInviteResponse_ErrorType_UnknownError:
    case ViewsAcceptEditorInviteResponse_ErrorType_BadRequest:
    case ViewsAcceptEditorInviteResponse_ErrorType_Forbidden:
    case ViewsAcceptEditorInviteResponse_ErrorType_InvalidCode:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ViewsRemoveEditorResponse

@implementation ViewsRemoveEditorResponse

@dynamic error;

typedef struct ViewsRemoveEditorResponse__storage_ {
  uint32_t _has_storage_[1];
  ViewsRemoveEditorResponse_ErrorType error;
} ViewsRemoveEditorResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ViewsRemoveEditorResponse_ErrorType_EnumDescriptor,
        .number = ViewsRemoveEditorResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewsRemoveEditorResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewsRemoveEditorResponse class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewsRemoveEditorResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ViewsRemoveEditorResponse_Error_RawValue(ViewsRemoveEditorResponse *message) {
  GPBDescriptor *descriptor = [ViewsRemoveEditorResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsRemoveEditorResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetViewsRemoveEditorResponse_Error_RawValue(ViewsRemoveEditorResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ViewsRemoveEditorResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ViewsRemoveEditorResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ViewsRemoveEditorResponse_ErrorType

GPBEnumDescriptor *ViewsRemoveEditorResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        ViewsRemoveEditorResponse_ErrorType_None,
        ViewsRemoveEditorResponse_ErrorType_UnknownError,
        ViewsRemoveEditorResponse_ErrorType_BadRequest,
        ViewsRemoveEditorResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ViewsRemoveEditorResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ViewsRemoveEditorResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ViewsRemoveEditorResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ViewsRemoveEditorResponse_ErrorType_None:
    case ViewsRemoveEditorResponse_ErrorType_UnknownError:
    case ViewsRemoveEditorResponse_ErrorType_BadRequest:
    case ViewsRemoveEditorResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - View

@implementation View

@dynamic id_p;
@dynamic name;
@dynamic propertiesArray, propertiesArray_Count;

typedef struct View__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSMutableArray *propertiesArray;
} View__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = View_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(View__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = View_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(View__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "propertiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ViewProperty),
        .number = View_FieldNumber_PropertiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(View__storage_, propertiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[View class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(View__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewProperty

@implementation ViewProperty

@dynamic kindOneOfCase;
@dynamic key;
@dynamic stringValue;
@dynamic floatValue;
@dynamic intValue;
@dynamic boolValue;

typedef struct ViewProperty__storage_ {
  uint32_t _has_storage_[2];
  NSString *key;
  GPBStringValue *stringValue;
  GPBFloatValue *floatValue;
  GPBInt64Value *intValue;
  GPBBoolValue *boolValue;
} ViewProperty__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = ViewProperty_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewProperty__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBStringValue),
        .number = ViewProperty_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ViewProperty__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "floatValue",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBFloatValue),
        .number = ViewProperty_FieldNumber_FloatValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ViewProperty__storage_, floatValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intValue",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBInt64Value),
        .number = ViewProperty_FieldNumber_IntValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ViewProperty__storage_, intValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "boolValue",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBBoolValue),
        .number = ViewProperty_FieldNumber_BoolValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ViewProperty__storage_, boolValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewProperty class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewProperty__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ViewProperty_ClearKindOneOfCase(ViewProperty *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ViewWithMeta

@implementation ViewWithMeta

@dynamic hasView, view;
@dynamic hasOwner, owner;
@dynamic editorsArray, editorsArray_Count;

typedef struct ViewWithMeta__storage_ {
  uint32_t _has_storage_[1];
  View *view;
  ChatUser *owner;
  NSMutableArray *editorsArray;
} ViewWithMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "view",
        .dataTypeSpecific.className = GPBStringifySymbol(View),
        .number = ViewWithMeta_FieldNumber_View,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewWithMeta__storage_, view),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "owner",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = ViewWithMeta_FieldNumber_Owner,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewWithMeta__storage_, owner),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "editorsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatUser),
        .number = ViewWithMeta_FieldNumber_EditorsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ViewWithMeta__storage_, editorsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewWithMeta class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewWithMeta__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ViewEditorInvite

@implementation ViewEditorInvite

@dynamic createdAt;
@dynamic updatedAt;
@dynamic code;
@dynamic viewId;
@dynamic inviterId;

typedef struct ViewEditorInvite__storage_ {
  uint32_t _has_storage_[1];
  int32_t createdAt;
  int32_t updatedAt;
  NSString *code;
  NSString *viewId;
  NSString *inviterId;
} ViewEditorInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = ViewEditorInvite_FieldNumber_CreatedAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ViewEditorInvite__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.className = NULL,
        .number = ViewEditorInvite_FieldNumber_UpdatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ViewEditorInvite__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = ViewEditorInvite_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ViewEditorInvite__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "viewId",
        .dataTypeSpecific.className = NULL,
        .number = ViewEditorInvite_FieldNumber_ViewId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ViewEditorInvite__storage_, viewId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = ViewEditorInvite_FieldNumber_InviterId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ViewEditorInvite__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ViewEditorInvite class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ViewEditorInvite__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
