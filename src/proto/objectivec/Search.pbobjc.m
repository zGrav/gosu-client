// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Search.pbobjc.h"
 #import "Any.pbobjc.h"
 #import "Profile.pbobjc.h"
 #import "HubBase.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SearchRoot

@implementation SearchRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnyRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SearchRoot_FileDescriptor

static GPBFileDescriptor *SearchRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ActiveCommunitiesRequest

@implementation ActiveCommunitiesRequest

@dynamic size;
@dynamic from;

typedef struct ActiveCommunitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int32_t from;
} ActiveCommunitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = ActiveCommunitiesRequest_FieldNumber_Size,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActiveCommunitiesRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = ActiveCommunitiesRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActiveCommunitiesRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActiveCommunitiesRequest class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActiveCommunitiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchRequest

@implementation SearchRequest

@dynamic typesArray, typesArray_Count;
@dynamic fieldsArray, fieldsArray_Count;
@dynamic text;
@dynamic fuzzy;
@dynamic size;
@dynamic from;

typedef struct SearchRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t size;
  int32_t from;
  NSMutableArray *typesArray;
  NSMutableArray *fieldsArray;
  NSString *text;
} SearchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typesArray",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_TypesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, typesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fieldsArray",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_FieldsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, fieldsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fuzzy",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_Fuzzy,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_Size,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SearchRequest_FieldNumber_From,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchRequest class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchResponse

@implementation SearchResponse

@dynamic hits, hits_Count;
@dynamic from;

typedef struct SearchResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  NSMutableDictionary *hits;
} SearchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hits",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchHits),
        .number = SearchResponse_FieldNumber_Hits,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchResponse__storage_, hits),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SearchResponse_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchResponse class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchCommunitiesRequest

@implementation SearchCommunitiesRequest

@dynamic hasGeoLocation, geoLocation;
@dynamic from;
@dynamic size;

typedef struct SearchCommunitiesRequest__storage_ {
  uint32_t _has_storage_[1];
  GeoLocation *geoLocation;
  int64_t from;
  int64_t size;
} SearchCommunitiesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "geoLocation",
        .dataTypeSpecific.className = GPBStringifySymbol(GeoLocation),
        .number = SearchCommunitiesRequest_FieldNumber_GeoLocation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchCommunitiesRequest__storage_, geoLocation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SearchCommunitiesRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchCommunitiesRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = SearchCommunitiesRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchCommunitiesRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchCommunitiesRequest class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchCommunitiesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchCommunitiesResponse

@implementation SearchCommunitiesResponse

@dynamic error;
@dynamic totalResults;
@dynamic from;
@dynamic communitiesArray, communitiesArray_Count;

typedef struct SearchCommunitiesResponse__storage_ {
  uint32_t _has_storage_[1];
  SearchCommunitiesResponse_ErrorType error;
  NSMutableArray *communitiesArray;
  int64_t totalResults;
  int64_t from;
} SearchCommunitiesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = SearchCommunitiesResponse_ErrorType_EnumDescriptor,
        .number = SearchCommunitiesResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "totalResults",
        .dataTypeSpecific.className = NULL,
        .number = SearchCommunitiesResponse_FieldNumber_TotalResults,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponse__storage_, totalResults),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = SearchCommunitiesResponse_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "communitiesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchCommunitiesResponseEntry),
        .number = SearchCommunitiesResponse_FieldNumber_CommunitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponse__storage_, communitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchCommunitiesResponse class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchCommunitiesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SearchCommunitiesResponse_Error_RawValue(SearchCommunitiesResponse *message) {
  GPBDescriptor *descriptor = [SearchCommunitiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchCommunitiesResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetSearchCommunitiesResponse_Error_RawValue(SearchCommunitiesResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [SearchCommunitiesResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchCommunitiesResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum SearchCommunitiesResponse_ErrorType

GPBEnumDescriptor *SearchCommunitiesResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        SearchCommunitiesResponse_ErrorType_None,
        SearchCommunitiesResponse_ErrorType_UnknownError,
        SearchCommunitiesResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SearchCommunitiesResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SearchCommunitiesResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SearchCommunitiesResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case SearchCommunitiesResponse_ErrorType_None:
    case SearchCommunitiesResponse_ErrorType_UnknownError:
    case SearchCommunitiesResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SearchCommunitiesResponseEntry

@implementation SearchCommunitiesResponseEntry

@dynamic hasHub, hub;
@dynamic distance;

typedef struct SearchCommunitiesResponseEntry__storage_ {
  uint32_t _has_storage_[1];
  float distance;
  Hub *hub;
} SearchCommunitiesResponseEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hub",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = SearchCommunitiesResponseEntry_FieldNumber_Hub,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponseEntry__storage_, hub),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "distance",
        .dataTypeSpecific.className = NULL,
        .number = SearchCommunitiesResponseEntry_FieldNumber_Distance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchCommunitiesResponseEntry__storage_, distance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchCommunitiesResponseEntry class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchCommunitiesResponseEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchHits

@implementation SearchHits

@dynamic hitsArray, hitsArray_Count;
@dynamic type;
@dynamic total;

typedef struct SearchHits__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *hitsArray;
  NSString *type;
  int64_t total;
} SearchHits__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hitsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchHit),
        .number = SearchHits_FieldNumber_HitsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchHits__storage_, hitsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = SearchHits_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchHits__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "total",
        .dataTypeSpecific.className = NULL,
        .number = SearchHits_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchHits__storage_, total),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchHits class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchHits__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchHit

@implementation SearchHit

@dynamic sourceOneOfCase;
@dynamic score;
@dynamic index;
@dynamic type;
@dynamic id_p;
@dynamic highlights, highlights_Count;
@dynamic user;
@dynamic deprecatedGroup;
@dynamic deprecatedGame;
@dynamic community;

typedef struct SearchHit__storage_ {
  uint32_t _has_storage_[2];
  float score;
  SearchHit_Type type;
  NSString *index;
  NSString *id_p;
  NSMutableDictionary *highlights;
  SearchUser *user;
  SearchGroup *deprecatedGroup;
  SearchGame *deprecatedGame;
  Hub *community;
} SearchHit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = SearchHit_FieldNumber_Score,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchHit__storage_, score),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = SearchHit_FieldNumber_Index,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchHit__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = SearchHit_Type_EnumDescriptor,
        .number = SearchHit_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchHit__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchHit_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchHit__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "highlights",
        .dataTypeSpecific.className = GPBStringifySymbol(Highlights),
        .number = SearchHit_FieldNumber_Highlights,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchHit__storage_, highlights),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchUser),
        .number = SearchHit_FieldNumber_User,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SearchHit__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deprecatedGroup",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchGroup),
        .number = SearchHit_FieldNumber_DeprecatedGroup,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SearchHit__storage_, deprecatedGroup),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deprecatedGame",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchGame),
        .number = SearchHit_FieldNumber_DeprecatedGame,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SearchHit__storage_, deprecatedGame),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "community",
        .dataTypeSpecific.className = GPBStringifySymbol(Hub),
        .number = SearchHit_FieldNumber_Community,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SearchHit__storage_, community),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchHit class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchHit__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\013j\245\000\014j\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SearchHit_Type_RawValue(SearchHit *message) {
  GPBDescriptor *descriptor = [SearchHit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchHit_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSearchHit_Type_RawValue(SearchHit *message, int32_t value) {
  GPBDescriptor *descriptor = [SearchHit descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SearchHit_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void SearchHit_ClearSourceOneOfCase(SearchHit *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Enum SearchHit_Type

GPBEnumDescriptor *SearchHit_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000DeprecatedGroup\000User\000DeprecatedG"
        "ame\000Community\000";
    static const int32_t values[] = {
        SearchHit_Type_Unknown,
        SearchHit_Type_DeprecatedGroup,
        SearchHit_Type_User,
        SearchHit_Type_DeprecatedGame,
        SearchHit_Type_Community,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(SearchHit_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:SearchHit_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL SearchHit_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case SearchHit_Type_Unknown:
    case SearchHit_Type_DeprecatedGroup:
    case SearchHit_Type_User:
    case SearchHit_Type_DeprecatedGame:
    case SearchHit_Type_Community:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Highlights

@implementation Highlights

@dynamic field;
@dynamic highlightsArray, highlightsArray_Count;

typedef struct Highlights__storage_ {
  uint32_t _has_storage_[1];
  NSString *field;
  NSMutableArray *highlightsArray;
} Highlights__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "field",
        .dataTypeSpecific.className = NULL,
        .number = Highlights_FieldNumber_Field,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Highlights__storage_, field),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "highlightsArray",
        .dataTypeSpecific.className = NULL,
        .number = Highlights_FieldNumber_HighlightsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Highlights__storage_, highlightsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Highlights class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Highlights__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IndexResponse

@implementation IndexResponse

@dynamic index;
@dynamic type;
@dynamic id_p;
@dynamic version;
@dynamic created;

typedef struct IndexResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *index;
  NSString *type;
  NSString *id_p;
  int64_t version;
} IndexResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = IndexResponse_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IndexResponse__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = IndexResponse_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IndexResponse__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = IndexResponse_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IndexResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = IndexResponse_FieldNumber_Version,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IndexResponse__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = IndexResponse_FieldNumber_Created,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IndexResponse class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IndexResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteResponse

@implementation DeleteResponse

@dynamic found;
@dynamic index;
@dynamic type;
@dynamic id_p;
@dynamic version;

typedef struct DeleteResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *index;
  NSString *type;
  NSString *id_p;
  int64_t version;
} DeleteResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "found",
        .dataTypeSpecific.className = NULL,
        .number = DeleteResponse_FieldNumber_Found,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = DeleteResponse_FieldNumber_Index,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeleteResponse__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = DeleteResponse_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DeleteResponse__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = DeleteResponse_FieldNumber_Id_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DeleteResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = DeleteResponse_FieldNumber_Version,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DeleteResponse__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteResponse class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Suggestion

@implementation Suggestion

@dynamic id_p;
@dynamic type;
@dynamic title;
@dynamic image;
@dynamic deprecatedProprietary;
@dynamic hasData_p, data_p;

typedef struct Suggestion__storage_ {
  uint32_t _has_storage_[1];
  Suggestion_Type type;
  NSString *id_p;
  NSString *title;
  NSString *image;
  NSData *deprecatedProprietary;
  Any *data_p;
} Suggestion__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Suggestion_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Suggestion__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Suggestion_Type_EnumDescriptor,
        .number = Suggestion_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Suggestion__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = Suggestion_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Suggestion__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = Suggestion_FieldNumber_Image,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Suggestion__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deprecatedProprietary",
        .dataTypeSpecific.className = NULL,
        .number = Suggestion_FieldNumber_DeprecatedProprietary,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Suggestion__storage_, deprecatedProprietary),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(Any),
        .number = Suggestion_FieldNumber_Data_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Suggestion__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Suggestion class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Suggestion__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005j\253\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Suggestion_Type_RawValue(Suggestion *message) {
  GPBDescriptor *descriptor = [Suggestion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Suggestion_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSuggestion_Type_RawValue(Suggestion *message, int32_t value) {
  GPBDescriptor *descriptor = [Suggestion descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Suggestion_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Suggestion_Type

GPBEnumDescriptor *Suggestion_Type_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Group\000User\000DeprecatedGame\000Deprec"
        "atedCommunity\000";
    static const int32_t values[] = {
        Suggestion_Type_Unknown,
        Suggestion_Type_Group,
        Suggestion_Type_User,
        Suggestion_Type_DeprecatedGame,
        Suggestion_Type_DeprecatedCommunity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Suggestion_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Suggestion_Type_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Suggestion_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Suggestion_Type_Unknown:
    case Suggestion_Type_Group:
    case Suggestion_Type_User:
    case Suggestion_Type_DeprecatedGame:
    case Suggestion_Type_DeprecatedCommunity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SuggestionRequest

@implementation SuggestionRequest

@dynamic text;
@dynamic fuzzy;
@dynamic contextArray, contextArray_Count;

typedef struct SuggestionRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *text;
  NSMutableArray *contextArray;
} SuggestionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = SuggestionRequest_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SuggestionRequest__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fuzzy",
        .dataTypeSpecific.className = NULL,
        .number = SuggestionRequest_FieldNumber_Fuzzy,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "contextArray",
        .dataTypeSpecific.className = NULL,
        .number = SuggestionRequest_FieldNumber_ContextArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SuggestionRequest__storage_, contextArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SuggestionRequest class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SuggestionRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SuggestionResponse

@implementation SuggestionResponse

@dynamic suggestionsArray, suggestionsArray_Count;

typedef struct SuggestionResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *suggestionsArray;
} SuggestionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "suggestionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Suggestion),
        .number = SuggestionResponse_FieldNumber_SuggestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SuggestionResponse__storage_, suggestionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SuggestionResponse class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SuggestionResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchGroup

@implementation SearchGroup

@dynamic id_p;
@dynamic name;
@dynamic description_p;
@dynamic titleImage;
@dynamic backgroundImage;
@dynamic channelsArray, channelsArray_Count;

typedef struct SearchGroup__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *description_p;
  NSString *titleImage;
  NSString *backgroundImage;
  NSMutableArray *channelsArray;
} SearchGroup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchGroup_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SearchGroup_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchGroup_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = NULL,
        .number = SearchGroup_FieldNumber_TitleImage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = SearchGroup_FieldNumber_BackgroundImage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchChannel),
        .number = SearchGroup_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchGroup__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchGroup class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchGroup__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchGame

@implementation SearchGame

@dynamic id_p;
@dynamic name;
@dynamic shortName;
@dynamic titleImage;
@dynamic backgroundImagesArray, backgroundImagesArray_Count;
@dynamic channelsArray, channelsArray_Count;

typedef struct SearchGame__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *shortName;
  NSString *titleImage;
  NSMutableArray *backgroundImagesArray;
  NSMutableArray *channelsArray;
} SearchGame__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchGame_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchGame__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SearchGame_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchGame__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shortName",
        .dataTypeSpecific.className = NULL,
        .number = SearchGame_FieldNumber_ShortName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchGame__storage_, shortName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "titleImage",
        .dataTypeSpecific.className = NULL,
        .number = SearchGame_FieldNumber_TitleImage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchGame__storage_, titleImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundImagesArray",
        .dataTypeSpecific.className = NULL,
        .number = SearchGame_FieldNumber_BackgroundImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchGame__storage_, backgroundImagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SearchChannel),
        .number = SearchGame_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchGame__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchGame class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchGame__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchChannel

@implementation SearchChannel

@dynamic id_p;
@dynamic title;
@dynamic topic;
@dynamic tagsArray, tagsArray_Count;

typedef struct SearchChannel__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *title;
  NSString *topic;
  NSMutableArray *tagsArray;
} SearchChannel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchChannel_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchChannel__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = SearchChannel_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchChannel__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = SearchChannel_FieldNumber_Topic,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchChannel__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = SearchChannel_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SearchChannel__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchChannel class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchChannel__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SearchUser

@implementation SearchUser

@dynamic id_p;
@dynamic name;
@dynamic avatarImage;
@dynamic backgroundImage;

typedef struct SearchUser__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *avatarImage;
  NSString *backgroundImage;
} SearchUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = SearchUser_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SearchUser__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SearchUser_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SearchUser__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "avatarImage",
        .dataTypeSpecific.className = NULL,
        .number = SearchUser_FieldNumber_AvatarImage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SearchUser__storage_, avatarImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backgroundImage",
        .dataTypeSpecific.className = NULL,
        .number = SearchUser_FieldNumber_BackgroundImage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SearchUser__storage_, backgroundImage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SearchUser class]
                                     rootClass:[SearchRoot class]
                                          file:SearchRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SearchUser__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
