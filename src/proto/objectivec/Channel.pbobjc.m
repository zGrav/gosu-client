// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Channel.pbobjc.h"
 #import "Optional.pbobjc.h"
 #import "Profile.pbobjc.h"
 #import "Message.pbobjc.h"
 #import "Wrappers.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ChannelRoot

@implementation ChannelRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[OptionalRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[MessageRoot extensionRegistry]];
    [registry addExtensions:[GPBWrappersRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ChannelRoot_FileDescriptor

static GPBFileDescriptor *ChannelRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ChannelInfoResponse

@implementation ChannelInfoResponse

@dynamic hasChannel, channel;
@dynamic hasGroup, group;
@dynamic hasGame, game;
@dynamic isJoinable;

typedef struct ChannelInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
  Group *group;
  Game *game;
} ChannelInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = ChannelInfoResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelInfoResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .number = ChannelInfoResponse_FieldNumber_Group,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelInfoResponse__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "game",
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .number = ChannelInfoResponse_FieldNumber_Game,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChannelInfoResponse__storage_, game),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isJoinable",
        .dataTypeSpecific.className = NULL,
        .number = ChannelInfoResponse_FieldNumber_IsJoinable,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelInfoResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelInfoResponse__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EditChannelRequest

@implementation EditChannelRequest

@dynamic hasTitle, title;
@dynamic hasTopic, topic;
@dynamic hasVisibility, visibility;

typedef struct EditChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  OptionalString *title;
  OptionalString *topic;
  OptionalBool *visibility;
} EditChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .number = EditChannelRequest_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EditChannelRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .number = EditChannelRequest_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EditChannelRequest__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visibility",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalBool),
        .number = EditChannelRequest_FieldNumber_Visibility,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EditChannelRequest__storage_, visibility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EditChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EditChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelReadStatusResponseEntry

@implementation ChannelReadStatusResponseEntry

@dynamic channelId;
@dynamic timestamp;
@dynamic hasLatestMessage, latestMessage;
@dynamic unreadCount;
@dynamic unreadMentionCount;

typedef struct ChannelReadStatusResponseEntry__storage_ {
  uint32_t _has_storage_[1];
  int32_t unreadCount;
  int32_t unreadMentionCount;
  NSString *channelId;
  NSString *timestamp;
  WebsocketMessage *latestMessage;
} ChannelReadStatusResponseEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReadStatusResponseEntry_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponseEntry__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReadStatusResponseEntry_FieldNumber_Timestamp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponseEntry__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latestMessage",
        .dataTypeSpecific.className = GPBStringifySymbol(WebsocketMessage),
        .number = ChannelReadStatusResponseEntry_FieldNumber_LatestMessage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponseEntry__storage_, latestMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unreadCount",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReadStatusResponseEntry_FieldNumber_UnreadCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponseEntry__storage_, unreadCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "unreadMentionCount",
        .dataTypeSpecific.className = NULL,
        .number = ChannelReadStatusResponseEntry_FieldNumber_UnreadMentionCount,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponseEntry__storage_, unreadMentionCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelReadStatusResponseEntry class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelReadStatusResponseEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelReadStatusResponse

@implementation ChannelReadStatusResponse

@dynamic channelsArray, channelsArray_Count;

typedef struct ChannelReadStatusResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelsArray;
} ChannelReadStatusResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChannelReadStatusResponseEntry),
        .number = ChannelReadStatusResponse_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChannelReadStatusResponse__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelReadStatusResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelReadStatusResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelKickBanRequest

@implementation ChannelKickBanRequest

@dynamic channelId;
@dynamic kickedId;
@dynamic ban;
@dynamic hasBanDuration, banDuration;

typedef struct ChannelKickBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *kickedId;
  OptionalInt64 *banDuration;
} ChannelKickBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelKickBanRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelKickBanRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kickedId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelKickBanRequest_FieldNumber_KickedId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelKickBanRequest__storage_, kickedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ban",
        .dataTypeSpecific.className = NULL,
        .number = ChannelKickBanRequest_FieldNumber_Ban,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalInt64),
        .number = ChannelKickBanRequest_FieldNumber_BanDuration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChannelKickBanRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelKickBanRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelKickBanRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelKickBanResponse

@implementation ChannelKickBanResponse


typedef struct ChannelKickBanResponse__storage_ {
  uint32_t _has_storage_[1];
} ChannelKickBanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelKickBanResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ChannelKickBanResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelUnBanRequest

@implementation ChannelUnBanRequest

@dynamic channelId;
@dynamic unbannedId;

typedef struct ChannelUnBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *unbannedId;
} ChannelUnBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUnBanRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelUnBanRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unbannedId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUnBanRequest_FieldNumber_UnbannedId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelUnBanRequest__storage_, unbannedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelUnBanRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelUnBanRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelUnBanResponse

@implementation ChannelUnBanResponse


typedef struct ChannelUnBanResponse__storage_ {
  uint32_t _has_storage_[1];
} ChannelUnBanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelUnBanResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ChannelUnBanResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelJoinGameChannelRequest

@implementation ChannelJoinGameChannelRequest

@dynamic gameId;
@dynamic tagsArray, tagsArray_Count;

typedef struct ChannelJoinGameChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *gameId;
  NSMutableArray *tagsArray;
} ChannelJoinGameChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelJoinGameChannelRequest_FieldNumber_GameId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelJoinGameChannelRequest__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = ChannelJoinGameChannelRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChannelJoinGameChannelRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelJoinGameChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelJoinGameChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelJoinGameChannelResponse

@implementation ChannelJoinGameChannelResponse

@dynamic hasChannel, channel;

typedef struct ChannelJoinGameChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} ChannelJoinGameChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = ChannelJoinGameChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelJoinGameChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelJoinGameChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelJoinGameChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelCreateGroupChannelRequest

@implementation ChannelCreateGroupChannelRequest

@dynamic groupId;
@dynamic title;
@dynamic type;

typedef struct ChannelCreateGroupChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  Channel_ChannelType type;
  NSString *groupId;
  NSString *title;
} ChannelCreateGroupChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelCreateGroupChannelRequest_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelCreateGroupChannelRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = ChannelCreateGroupChannelRequest_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelCreateGroupChannelRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Channel_ChannelType_EnumDescriptor,
        .number = ChannelCreateGroupChannelRequest_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChannelCreateGroupChannelRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelCreateGroupChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelCreateGroupChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChannelCreateGroupChannelRequest_Type_RawValue(ChannelCreateGroupChannelRequest *message) {
  GPBDescriptor *descriptor = [ChannelCreateGroupChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelCreateGroupChannelRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetChannelCreateGroupChannelRequest_Type_RawValue(ChannelCreateGroupChannelRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [ChannelCreateGroupChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelCreateGroupChannelRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ChannelCreateGroupChannelResponse

@implementation ChannelCreateGroupChannelResponse

@dynamic hasUser, user;
@dynamic hasChannel, channel;

typedef struct ChannelCreateGroupChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  User *user;
  Channel *channel;
} ChannelCreateGroupChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = ChannelCreateGroupChannelResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelCreateGroupChannelResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = ChannelCreateGroupChannelResponse_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelCreateGroupChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelCreateGroupChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelCreateGroupChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelInviteMemberRequest

@implementation ChannelInviteMemberRequest

@dynamic channelId;
@dynamic userId;

typedef struct ChannelInviteMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *userId;
} ChannelInviteMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelInviteMemberRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelInviteMemberRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelInviteMemberRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelInviteMemberRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelInviteMemberRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelInviteMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelInviteMemberResponse

@implementation ChannelInviteMemberResponse

@dynamic error;

typedef struct ChannelInviteMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  ChannelInviteMemberResponse_ErrorType error;
} ChannelInviteMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ChannelInviteMemberResponse_ErrorType_EnumDescriptor,
        .number = ChannelInviteMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelInviteMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelInviteMemberResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelInviteMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChannelInviteMemberResponse_Error_RawValue(ChannelInviteMemberResponse *message) {
  GPBDescriptor *descriptor = [ChannelInviteMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelInviteMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetChannelInviteMemberResponse_Error_RawValue(ChannelInviteMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ChannelInviteMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelInviteMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChannelInviteMemberResponse_ErrorType

GPBEnumDescriptor *ChannelInviteMemberResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000InvalidInput\000Forbidden\000UserAlreadyJ"
        "oined\000Server\000UserNotAllowed\000";
    static const int32_t values[] = {
        ChannelInviteMemberResponse_ErrorType_None,
        ChannelInviteMemberResponse_ErrorType_InvalidInput,
        ChannelInviteMemberResponse_ErrorType_Forbidden,
        ChannelInviteMemberResponse_ErrorType_UserAlreadyJoined,
        ChannelInviteMemberResponse_ErrorType_Server,
        ChannelInviteMemberResponse_ErrorType_UserNotAllowed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChannelInviteMemberResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChannelInviteMemberResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChannelInviteMemberResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChannelInviteMemberResponse_ErrorType_None:
    case ChannelInviteMemberResponse_ErrorType_InvalidInput:
    case ChannelInviteMemberResponse_ErrorType_Forbidden:
    case ChannelInviteMemberResponse_ErrorType_UserAlreadyJoined:
    case ChannelInviteMemberResponse_ErrorType_Server:
    case ChannelInviteMemberResponse_ErrorType_UserNotAllowed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - GameResponse

@implementation GameResponse

@dynamic hasGame, game;
@dynamic channelsArray, channelsArray_Count;

typedef struct GameResponse__storage_ {
  uint32_t _has_storage_[1];
  Game *game;
  NSMutableArray *channelsArray;
} GameResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "game",
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .number = GameResponse_FieldNumber_Game,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GameResponse__storage_, game),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = GameResponse_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GameResponse__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GameResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GameResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCJoinProprietaryChannelsRequest

@implementation RPCJoinProprietaryChannelsRequest

@dynamic userId;
@dynamic type;

typedef struct RPCJoinProprietaryChannelsRequest__storage_ {
  uint32_t _has_storage_[1];
  ProprietaryUserGroupRecord_Type type;
  NSString *userId;
} RPCJoinProprietaryChannelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCJoinProprietaryChannelsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCJoinProprietaryChannelsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ProprietaryUserGroupRecord_Type_EnumDescriptor,
        .number = RPCJoinProprietaryChannelsRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCJoinProprietaryChannelsRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCJoinProprietaryChannelsRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCJoinProprietaryChannelsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCJoinProprietaryChannelsRequest_Type_RawValue(RPCJoinProprietaryChannelsRequest *message) {
  GPBDescriptor *descriptor = [RPCJoinProprietaryChannelsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCJoinProprietaryChannelsRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCJoinProprietaryChannelsRequest_Type_RawValue(RPCJoinProprietaryChannelsRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCJoinProprietaryChannelsRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCJoinProprietaryChannelsRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCJoinProprietaryChannelsResponse

@implementation RPCJoinProprietaryChannelsResponse


typedef struct RPCJoinProprietaryChannelsResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCJoinProprietaryChannelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCJoinProprietaryChannelsResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RPCJoinProprietaryChannelsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCJoinChannelInfoRequest

@implementation RPCJoinChannelInfoRequest

@dynamic userId;
@dynamic hasChannel, channel;
@dynamic invite;

typedef struct RPCJoinChannelInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  Channel *channel;
  NSString *invite;
} RPCJoinChannelInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCJoinChannelInfoRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCJoinChannelInfoRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCJoinChannelInfoRequest_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCJoinChannelInfoRequest__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = NULL,
        .number = RPCJoinChannelInfoRequest_FieldNumber_Invite,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCJoinChannelInfoRequest__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCJoinChannelInfoRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCJoinChannelInfoRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCJoinChannelInfoResponse

@implementation RPCJoinChannelInfoResponse

@dynamic isJoinable;

typedef struct RPCJoinChannelInfoResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCJoinChannelInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isJoinable",
        .dataTypeSpecific.className = NULL,
        .number = RPCJoinChannelInfoResponse_FieldNumber_IsJoinable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCJoinChannelInfoResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCJoinChannelInfoResponse__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCDeleteChannelRequest

@implementation RPCDeleteChannelRequest

@dynamic userId;
@dynamic channelId;

typedef struct RPCDeleteChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *channelId;
} RPCDeleteChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCDeleteChannelRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCDeleteChannelRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCDeleteChannelRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCDeleteChannelRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCDeleteChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCDeleteChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCDeleteChannelResponse

@implementation RPCDeleteChannelResponse


typedef struct RPCDeleteChannelResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCDeleteChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCDeleteChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RPCDeleteChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCEditChannelRequest

@implementation RPCEditChannelRequest

@dynamic userId;
@dynamic channelId;
@dynamic hasTitle, title;
@dynamic hasTopic, topic;
@dynamic hasVisibility, visibility;

typedef struct RPCEditChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *channelId;
  OptionalString *title;
  OptionalString *topic;
  OptionalBool *visibility;
} RPCEditChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCEditChannelRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCEditChannelRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCEditChannelRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCEditChannelRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .number = RPCEditChannelRequest_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCEditChannelRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalString),
        .number = RPCEditChannelRequest_FieldNumber_Topic,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCEditChannelRequest__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "visibility",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalBool),
        .number = RPCEditChannelRequest_FieldNumber_Visibility,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCEditChannelRequest__storage_, visibility),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCEditChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCEditChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCEditChannelResponse

@implementation RPCEditChannelResponse

@dynamic hasChannel, channel;
@dynamic titleUpdated;
@dynamic topicUpdated;
@dynamic visibilityUpdated;

typedef struct RPCEditChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} RPCEditChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCEditChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCEditChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "titleUpdated",
        .dataTypeSpecific.className = NULL,
        .number = RPCEditChannelResponse_FieldNumber_TitleUpdated,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "topicUpdated",
        .dataTypeSpecific.className = NULL,
        .number = RPCEditChannelResponse_FieldNumber_TopicUpdated,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "visibilityUpdated",
        .dataTypeSpecific.className = NULL,
        .number = RPCEditChannelResponse_FieldNumber_VisibilityUpdated,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCEditChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCEditChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelCreateGroupChannelRequest

@implementation RPCChannelCreateGroupChannelRequest

@dynamic userId;
@dynamic groupId;
@dynamic title;
@dynamic type;

typedef struct RPCChannelCreateGroupChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  Channel_ChannelType type;
  NSString *userId;
  NSString *groupId;
  NSString *title;
} RPCChannelCreateGroupChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelCreateGroupChannelRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelCreateGroupChannelRequest_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelCreateGroupChannelRequest_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Channel_ChannelType_EnumDescriptor,
        .number = RPCChannelCreateGroupChannelRequest_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelCreateGroupChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelCreateGroupChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCChannelCreateGroupChannelRequest_Type_RawValue(RPCChannelCreateGroupChannelRequest *message) {
  GPBDescriptor *descriptor = [RPCChannelCreateGroupChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelCreateGroupChannelRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCChannelCreateGroupChannelRequest_Type_RawValue(RPCChannelCreateGroupChannelRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCChannelCreateGroupChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelCreateGroupChannelRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCChannelCreateGroupChannelResponse

@implementation RPCChannelCreateGroupChannelResponse

@dynamic hasUser, user;
@dynamic hasChannel, channel;

typedef struct RPCChannelCreateGroupChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  User *user;
  Channel *channel;
} RPCChannelCreateGroupChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = RPCChannelCreateGroupChannelResponse_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCChannelCreateGroupChannelResponse_FieldNumber_Channel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelCreateGroupChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelCreateGroupChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelCreateGroupChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelCreateChannelRequest

@implementation RPCChannelCreateChannelRequest

@dynamic title;
@dynamic type;
@dynamic groupId;

typedef struct RPCChannelCreateChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  Channel_ChannelType type;
  NSString *title;
  NSString *groupId;
} RPCChannelCreateChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelCreateChannelRequest_FieldNumber_Title,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelCreateChannelRequest__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Channel_ChannelType_EnumDescriptor,
        .number = RPCChannelCreateChannelRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelCreateChannelRequest__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelCreateChannelRequest_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCChannelCreateChannelRequest__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelCreateChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelCreateChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCChannelCreateChannelRequest_Type_RawValue(RPCChannelCreateChannelRequest *message) {
  GPBDescriptor *descriptor = [RPCChannelCreateChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelCreateChannelRequest_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCChannelCreateChannelRequest_Type_RawValue(RPCChannelCreateChannelRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCChannelCreateChannelRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelCreateChannelRequest_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCChannelCreateChannelResponse

@implementation RPCChannelCreateChannelResponse

@dynamic hasChannel, channel;

typedef struct RPCChannelCreateChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} RPCChannelCreateChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCChannelCreateChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelCreateChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelCreateChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelCreateChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCExtendedChannelInfoResponse

@implementation RPCExtendedChannelInfoResponse

@dynamic hasChannel, channel;
@dynamic hasGroup, group;
@dynamic hasGame, game;

typedef struct RPCExtendedChannelInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
  Group *group;
  Game *game;
} RPCExtendedChannelInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCExtendedChannelInfoResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCExtendedChannelInfoResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "group",
        .dataTypeSpecific.className = GPBStringifySymbol(Group),
        .number = RPCExtendedChannelInfoResponse_FieldNumber_Group,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCExtendedChannelInfoResponse__storage_, group),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "game",
        .dataTypeSpecific.className = GPBStringifySymbol(Game),
        .number = RPCExtendedChannelInfoResponse_FieldNumber_Game,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCExtendedChannelInfoResponse__storage_, game),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCExtendedChannelInfoResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCExtendedChannelInfoResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelUpdateRequest

@implementation ChannelUpdateRequest

@dynamic channelId;
@dynamic userId;
@dynamic invite;
@dynamic force;

typedef struct ChannelUpdateRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *userId;
  NSString *invite;
} ChannelUpdateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUpdateRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelUpdateRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUpdateRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelUpdateRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invite",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUpdateRequest_FieldNumber_Invite,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChannelUpdateRequest__storage_, invite),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "force",
        .dataTypeSpecific.className = NULL,
        .number = ChannelUpdateRequest_FieldNumber_Force,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelUpdateRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelUpdateRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelUpdateResponse

@implementation ChannelUpdateResponse

@dynamic error;
@dynamic hasUser, user;

typedef struct ChannelUpdateResponse__storage_ {
  uint32_t _has_storage_[1];
  ChannelUpdateResponse_ErrorType error;
  User *user;
} ChannelUpdateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ChannelUpdateResponse_ErrorType_EnumDescriptor,
        .number = ChannelUpdateResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChannelUpdateResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = ChannelUpdateResponse_FieldNumber_User,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChannelUpdateResponse__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelUpdateResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelUpdateResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ChannelUpdateResponse_Error_RawValue(ChannelUpdateResponse *message) {
  GPBDescriptor *descriptor = [ChannelUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelUpdateResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetChannelUpdateResponse_Error_RawValue(ChannelUpdateResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ChannelUpdateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ChannelUpdateResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum ChannelUpdateResponse_ErrorType

GPBEnumDescriptor *ChannelUpdateResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Unknown\000UserBanned\000UserNotAMember\000";
    static const int32_t values[] = {
        ChannelUpdateResponse_ErrorType_None,
        ChannelUpdateResponse_ErrorType_Unknown,
        ChannelUpdateResponse_ErrorType_UserBanned,
        ChannelUpdateResponse_ErrorType_UserNotAMember,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ChannelUpdateResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ChannelUpdateResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ChannelUpdateResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ChannelUpdateResponse_ErrorType_None:
    case ChannelUpdateResponse_ErrorType_Unknown:
    case ChannelUpdateResponse_ErrorType_UserBanned:
    case ChannelUpdateResponse_ErrorType_UserNotAMember:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCChannelAddUsersToHubChannelRequest

@implementation RPCChannelAddUsersToHubChannelRequest

@dynamic channelId;
@dynamic hubId;
@dynamic userIdsArray, userIdsArray_Count;
@dynamic remove;
@dynamic publishProfilePullRequests;

typedef struct RPCChannelAddUsersToHubChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *hubId;
  NSMutableArray *userIdsArray;
} RPCChannelAddUsersToHubChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelAddUsersToHubChannelRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelRequest_FieldNumber_HubId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelAddUsersToHubChannelRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelRequest_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelAddUsersToHubChannelRequest__storage_, userIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remove",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelRequest_FieldNumber_Remove,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "publishProfilePullRequests",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelRequest_FieldNumber_PublishProfilePullRequests,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelAddUsersToHubChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelAddUsersToHubChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelAddUsersToHubChannelResponse

@implementation RPCChannelAddUsersToHubChannelResponse

@dynamic error;
@dynamic processedUserIdsArray, processedUserIdsArray_Count;

typedef struct RPCChannelAddUsersToHubChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCChannelAddUsersToHubChannelResponse_ErrorType error;
  NSMutableArray *processedUserIdsArray;
} RPCChannelAddUsersToHubChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCChannelAddUsersToHubChannelResponse_ErrorType_EnumDescriptor,
        .number = RPCChannelAddUsersToHubChannelResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelAddUsersToHubChannelResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "processedUserIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUsersToHubChannelResponse_FieldNumber_ProcessedUserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelAddUsersToHubChannelResponse__storage_, processedUserIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelAddUsersToHubChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelAddUsersToHubChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCChannelAddUsersToHubChannelResponse_Error_RawValue(RPCChannelAddUsersToHubChannelResponse *message) {
  GPBDescriptor *descriptor = [RPCChannelAddUsersToHubChannelResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelAddUsersToHubChannelResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCChannelAddUsersToHubChannelResponse_Error_RawValue(RPCChannelAddUsersToHubChannelResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCChannelAddUsersToHubChannelResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelAddUsersToHubChannelResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCChannelAddUsersToHubChannelResponse_ErrorType

GPBEnumDescriptor *RPCChannelAddUsersToHubChannelResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        RPCChannelAddUsersToHubChannelResponse_ErrorType_None,
        RPCChannelAddUsersToHubChannelResponse_ErrorType_UnknownError,
        RPCChannelAddUsersToHubChannelResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCChannelAddUsersToHubChannelResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCChannelAddUsersToHubChannelResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCChannelAddUsersToHubChannelResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCChannelAddUsersToHubChannelResponse_ErrorType_None:
    case RPCChannelAddUsersToHubChannelResponse_ErrorType_UnknownError:
    case RPCChannelAddUsersToHubChannelResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCChannelAddUserToHubChannelsRequest

@implementation RPCChannelAddUserToHubChannelsRequest

@dynamic channelIdsArray, channelIdsArray_Count;
@dynamic userId;
@dynamic remove;

typedef struct RPCChannelAddUserToHubChannelsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelIdsArray;
  NSString *userId;
} RPCChannelAddUserToHubChannelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUserToHubChannelsRequest_FieldNumber_ChannelIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelAddUserToHubChannelsRequest__storage_, channelIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUserToHubChannelsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelAddUserToHubChannelsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remove",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelAddUserToHubChannelsRequest_FieldNumber_Remove,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelAddUserToHubChannelsRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelAddUserToHubChannelsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelAddUserToHubChannelsResponse

@implementation RPCChannelAddUserToHubChannelsResponse

@dynamic error;

typedef struct RPCChannelAddUserToHubChannelsResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCChannelAddUserToHubChannelsResponse_ErrorType error;
} RPCChannelAddUserToHubChannelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCChannelAddUserToHubChannelsResponse_ErrorType_EnumDescriptor,
        .number = RPCChannelAddUserToHubChannelsResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelAddUserToHubChannelsResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelAddUserToHubChannelsResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelAddUserToHubChannelsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCChannelAddUserToHubChannelsResponse_Error_RawValue(RPCChannelAddUserToHubChannelsResponse *message) {
  GPBDescriptor *descriptor = [RPCChannelAddUserToHubChannelsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelAddUserToHubChannelsResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCChannelAddUserToHubChannelsResponse_Error_RawValue(RPCChannelAddUserToHubChannelsResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCChannelAddUserToHubChannelsResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelAddUserToHubChannelsResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCChannelAddUserToHubChannelsResponse_ErrorType

GPBEnumDescriptor *RPCChannelAddUserToHubChannelsResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000";
    static const int32_t values[] = {
        RPCChannelAddUserToHubChannelsResponse_ErrorType_None,
        RPCChannelAddUserToHubChannelsResponse_ErrorType_UnknownError,
        RPCChannelAddUserToHubChannelsResponse_ErrorType_BadRequest,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCChannelAddUserToHubChannelsResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCChannelAddUserToHubChannelsResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCChannelAddUserToHubChannelsResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCChannelAddUserToHubChannelsResponse_ErrorType_None:
    case RPCChannelAddUserToHubChannelsResponse_ErrorType_UnknownError:
    case RPCChannelAddUserToHubChannelsResponse_ErrorType_BadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCChannelGetChannelRequest

@implementation RPCChannelGetChannelRequest

@dynamic channelId;

typedef struct RPCChannelGetChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
} RPCChannelGetChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelGetChannelRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelGetChannelRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelGetChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelGetChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelGetChannelResponse

@implementation RPCChannelGetChannelResponse

@dynamic hasChannel, channel;

typedef struct RPCChannelGetChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} RPCChannelGetChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCChannelGetChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelGetChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelGetChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelGetChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelJoinGameChannelRequest

@implementation RPCChannelJoinGameChannelRequest

@dynamic userId;
@dynamic gameId;
@dynamic tagsArray, tagsArray_Count;

typedef struct RPCChannelJoinGameChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *gameId;
  NSMutableArray *tagsArray;
} RPCChannelJoinGameChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelJoinGameChannelRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelJoinGameChannelRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelJoinGameChannelRequest_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelJoinGameChannelRequest__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelJoinGameChannelRequest_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelJoinGameChannelRequest__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelJoinGameChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelJoinGameChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelJoinGameChannelResponse

@implementation RPCChannelJoinGameChannelResponse

@dynamic hasChannel, channel;

typedef struct RPCChannelJoinGameChannelResponse__storage_ {
  uint32_t _has_storage_[1];
  Channel *channel;
} RPCChannelJoinGameChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.className = GPBStringifySymbol(Channel),
        .number = RPCChannelJoinGameChannelResponse_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelJoinGameChannelResponse__storage_, channel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelJoinGameChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelJoinGameChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelKickBanRequest

@implementation RPCChannelKickBanRequest

@dynamic channelId;
@dynamic kickerId;
@dynamic kickedId;
@dynamic ban;
@dynamic hasBanDuration, banDuration;

typedef struct RPCChannelKickBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *kickerId;
  NSString *kickedId;
  OptionalInt64 *banDuration;
} RPCChannelKickBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelKickBanRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelKickBanRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kickerId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelKickBanRequest_FieldNumber_KickerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelKickBanRequest__storage_, kickerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kickedId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelKickBanRequest_FieldNumber_KickedId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCChannelKickBanRequest__storage_, kickedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ban",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelKickBanRequest_FieldNumber_Ban,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "banDuration",
        .dataTypeSpecific.className = GPBStringifySymbol(OptionalInt64),
        .number = RPCChannelKickBanRequest_FieldNumber_BanDuration,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RPCChannelKickBanRequest__storage_, banDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelKickBanRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelKickBanRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelKickBanResponse

@implementation RPCChannelKickBanResponse


typedef struct RPCChannelKickBanResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCChannelKickBanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelKickBanResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RPCChannelKickBanResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelUnBanRequest

@implementation RPCChannelUnBanRequest

@dynamic channelId;
@dynamic unbannerId;
@dynamic unbannedId;

typedef struct RPCChannelUnBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *unbannerId;
  NSString *unbannedId;
} RPCChannelUnBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelUnBanRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelUnBanRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unbannerId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelUnBanRequest_FieldNumber_UnbannerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelUnBanRequest__storage_, unbannerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "unbannedId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelUnBanRequest_FieldNumber_UnbannedId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCChannelUnBanRequest__storage_, unbannedId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelUnBanRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelUnBanRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelUnBanResponse

@implementation RPCChannelUnBanResponse


typedef struct RPCChannelUnBanResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCChannelUnBanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelUnBanResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RPCChannelUnBanResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelGetChannelUsersRequest

@implementation RPCChannelGetChannelUsersRequest

@dynamic channelId;

typedef struct RPCChannelGetChannelUsersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
} RPCChannelGetChannelUsersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelGetChannelUsersRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelGetChannelUsersRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelGetChannelUsersRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelGetChannelUsersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelGetChannelUsersResponse

@implementation RPCChannelGetChannelUsersResponse

@dynamic usersArray, usersArray_Count;

typedef struct RPCChannelGetChannelUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *usersArray;
} RPCChannelGetChannelUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChannelUser),
        .number = RPCChannelGetChannelUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelGetChannelUsersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelGetChannelUsersResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelGetChannelUsersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelUnhideChannelRequest

@implementation RPCChannelUnhideChannelRequest

@dynamic userIdsArray, userIdsArray_Count;
@dynamic channelId;

typedef struct RPCChannelUnhideChannelRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userIdsArray;
  NSString *channelId;
} RPCChannelUnhideChannelRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelUnhideChannelRequest_FieldNumber_UserIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCChannelUnhideChannelRequest__storage_, userIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelUnhideChannelRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelUnhideChannelRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelUnhideChannelRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelUnhideChannelRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelUnhideChannelResponse

@implementation RPCChannelUnhideChannelResponse


typedef struct RPCChannelUnhideChannelResponse__storage_ {
  uint32_t _has_storage_[1];
} RPCChannelUnhideChannelResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelUnhideChannelResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(RPCChannelUnhideChannelResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelInviteMemberRequest

@implementation RPCChannelInviteMemberRequest

@dynamic channelId;
@dynamic inviterId;
@dynamic inviteeId;

typedef struct RPCChannelInviteMemberRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelId;
  NSString *inviterId;
  NSString *inviteeId;
} RPCChannelInviteMemberRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelInviteMemberRequest_FieldNumber_ChannelId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelInviteMemberRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviterId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelInviteMemberRequest_FieldNumber_InviterId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCChannelInviteMemberRequest__storage_, inviterId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviteeId",
        .dataTypeSpecific.className = NULL,
        .number = RPCChannelInviteMemberRequest_FieldNumber_InviteeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCChannelInviteMemberRequest__storage_, inviteeId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelInviteMemberRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelInviteMemberRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCChannelInviteMemberResponse

@implementation RPCChannelInviteMemberResponse

@dynamic error;

typedef struct RPCChannelInviteMemberResponse__storage_ {
  uint32_t _has_storage_[1];
  ChannelInviteMemberResponse_ErrorType error;
} RPCChannelInviteMemberResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = ChannelInviteMemberResponse_ErrorType_EnumDescriptor,
        .number = RPCChannelInviteMemberResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCChannelInviteMemberResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCChannelInviteMemberResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCChannelInviteMemberResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCChannelInviteMemberResponse_Error_RawValue(RPCChannelInviteMemberResponse *message) {
  GPBDescriptor *descriptor = [RPCChannelInviteMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelInviteMemberResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCChannelInviteMemberResponse_Error_RawValue(RPCChannelInviteMemberResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCChannelInviteMemberResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCChannelInviteMemberResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCGameGetGamesRequest

@implementation RPCGameGetGamesRequest

@dynamic cacheId;
@dynamic pageNumber;
@dynamic pageSize;

typedef struct RPCGameGetGamesRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageNumber;
  int32_t pageSize;
  NSString *cacheId;
} RPCGameGetGamesRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cacheId",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGamesRequest_FieldNumber_CacheId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCGameGetGamesRequest__storage_, cacheId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageNumber",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGamesRequest_FieldNumber_PageNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCGameGetGamesRequest__storage_, pageNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGamesRequest_FieldNumber_PageSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCGameGetGamesRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGameGetGamesRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCGameGetGamesRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGameGetGamesResponse

@implementation RPCGameGetGamesResponse

@dynamic hasPage, page;
@dynamic cacheId;

typedef struct RPCGameGetGamesResponse__storage_ {
  uint32_t _has_storage_[1];
  GameListPage *page;
  NSString *cacheId;
} RPCGameGetGamesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(GameListPage),
        .number = RPCGameGetGamesResponse_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCGameGetGamesResponse__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cacheId",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGamesResponse_FieldNumber_CacheId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCGameGetGamesResponse__storage_, cacheId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGameGetGamesResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCGameGetGamesResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGameGetGameChannelsRequest

@implementation RPCGameGetGameChannelsRequest

@dynamic cacheId;
@dynamic gameId;
@dynamic pageNumber;
@dynamic pageSize;

typedef struct RPCGameGetGameChannelsRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageNumber;
  int32_t pageSize;
  NSString *cacheId;
  NSString *gameId;
} RPCGameGetGameChannelsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cacheId",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGameChannelsRequest_FieldNumber_CacheId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsRequest__storage_, cacheId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gameId",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGameChannelsRequest_FieldNumber_GameId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsRequest__storage_, gameId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageNumber",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGameChannelsRequest_FieldNumber_PageNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsRequest__storage_, pageNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pageSize",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGameChannelsRequest_FieldNumber_PageSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsRequest__storage_, pageSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGameGetGameChannelsRequest class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCGameGetGameChannelsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCGameGetGameChannelsResponse

@implementation RPCGameGetGameChannelsResponse

@dynamic hasPage, page;
@dynamic cacheId;

typedef struct RPCGameGetGameChannelsResponse__storage_ {
  uint32_t _has_storage_[1];
  GameChannelListPage *page;
  NSString *cacheId;
} RPCGameGetGameChannelsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = GPBStringifySymbol(GameChannelListPage),
        .number = RPCGameGetGameChannelsResponse_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsResponse__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cacheId",
        .dataTypeSpecific.className = NULL,
        .number = RPCGameGetGameChannelsResponse_FieldNumber_CacheId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCGameGetGameChannelsResponse__storage_, cacheId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCGameGetGameChannelsResponse class]
                                     rootClass:[ChannelRoot class]
                                          file:ChannelRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCGameGetGameChannelsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
