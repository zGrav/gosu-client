// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userlist.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Userlist.pbobjc.h"
 #import "Any.pbobjc.h"
 #import "Profile.pbobjc.h"
 #import "HubBase.pbobjc.h"
 #import "Hub.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - UserlistRoot

@implementation UserlistRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnyRoot extensionRegistry]];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
    [registry addExtensions:[HubBaseRoot extensionRegistry]];
    [registry addExtensions:[HubRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - UserlistRoot_FileDescriptor

static GPBFileDescriptor *UserlistRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCUserlistGetChannelUsersRequest

@implementation RPCUserlistGetChannelUsersRequest

@dynamic requestingUserId;
@dynamic channelId;
@dynamic size;
@dynamic from;
@dynamic excludeOffline;

typedef struct RPCUserlistGetChannelUsersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *requestingUserId;
  NSString *channelId;
  int64_t size;
  int64_t from;
} RPCUserlistGetChannelUsersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersRequest_FieldNumber_RequestingUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersRequest__storage_, requestingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "channelId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersRequest_FieldNumber_ChannelId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersRequest__storage_, channelId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "excludeOffline",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersRequest_FieldNumber_ExcludeOffline,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetChannelUsersRequest class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetChannelUsersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserlistGetChannelUsersResponse

@implementation RPCUserlistGetChannelUsersResponse

@dynamic error;
@dynamic totalUsers;
@dynamic from;
@dynamic usersArray, usersArray_Count;
@dynamic onlineUsers;
@dynamic pagedUsers;

typedef struct RPCUserlistGetChannelUsersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCUserlistGetChannelUsersResponse_ErrorType error;
  NSMutableArray *usersArray;
  int64_t totalUsers;
  int64_t from;
  int64_t onlineUsers;
  int64_t pagedUsers;
} RPCUserlistGetChannelUsersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCUserlistGetChannelUsersResponse_ErrorType_EnumDescriptor,
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "totalUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_TotalUsers,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, totalUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChannelUser),
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "onlineUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_OnlineUsers,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, onlineUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetChannelUsersResponse_FieldNumber_PagedUsers,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCUserlistGetChannelUsersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetChannelUsersResponse class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetChannelUsersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserlistGetChannelUsersResponse_Error_RawValue(RPCUserlistGetChannelUsersResponse *message) {
  GPBDescriptor *descriptor = [RPCUserlistGetChannelUsersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistGetChannelUsersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserlistGetChannelUsersResponse_Error_RawValue(RPCUserlistGetChannelUsersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserlistGetChannelUsersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistGetChannelUsersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCUserlistGetChannelUsersResponse_ErrorType

GPBEnumDescriptor *RPCUserlistGetChannelUsersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCUserlistGetChannelUsersResponse_ErrorType_None,
        RPCUserlistGetChannelUsersResponse_ErrorType_UnknownError,
        RPCUserlistGetChannelUsersResponse_ErrorType_BadRequest,
        RPCUserlistGetChannelUsersResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCUserlistGetChannelUsersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCUserlistGetChannelUsersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCUserlistGetChannelUsersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCUserlistGetChannelUsersResponse_ErrorType_None:
    case RPCUserlistGetChannelUsersResponse_ErrorType_UnknownError:
    case RPCUserlistGetChannelUsersResponse_ErrorType_BadRequest:
    case RPCUserlistGetChannelUsersResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCUserlistGetHubMembersRequest

@implementation RPCUserlistGetHubMembersRequest

@dynamic requestingUserId;
@dynamic hubId;
@dynamic size;
@dynamic from;

typedef struct RPCUserlistGetHubMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *requestingUserId;
  NSString *hubId;
  int64_t size;
  int64_t from;
} RPCUserlistGetHubMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersRequest_FieldNumber_RequestingUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersRequest__storage_, requestingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersRequest_FieldNumber_HubId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetHubMembersRequest class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetHubMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserlistGetHubMembersResponse

@implementation RPCUserlistGetHubMembersResponse

@dynamic error;
@dynamic totalUsers;
@dynamic from;
@dynamic usersArray, usersArray_Count;
@dynamic pagedUsers;

typedef struct RPCUserlistGetHubMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  RPCUserlistGetHubMembersResponse_ErrorType error;
  NSMutableArray *usersArray;
  int64_t totalUsers;
  int64_t from;
  int64_t pagedUsers;
} RPCUserlistGetHubMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = RPCUserlistGetHubMembersResponse_ErrorType_EnumDescriptor,
        .number = RPCUserlistGetHubMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "totalUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersResponse_FieldNumber_TotalUsers,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersResponse__storage_, totalUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersResponse_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCUserlistGetHubMembersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetHubMembersResponse_FieldNumber_PagedUsers,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCUserlistGetHubMembersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetHubMembersResponse class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetHubMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserlistGetHubMembersResponse_Error_RawValue(RPCUserlistGetHubMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCUserlistGetHubMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistGetHubMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserlistGetHubMembersResponse_Error_RawValue(RPCUserlistGetHubMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserlistGetHubMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistGetHubMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum RPCUserlistGetHubMembersResponse_ErrorType

GPBEnumDescriptor *RPCUserlistGetHubMembersResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000UnknownError\000BadRequest\000Forbidden\000";
    static const int32_t values[] = {
        RPCUserlistGetHubMembersResponse_ErrorType_None,
        RPCUserlistGetHubMembersResponse_ErrorType_UnknownError,
        RPCUserlistGetHubMembersResponse_ErrorType_BadRequest,
        RPCUserlistGetHubMembersResponse_ErrorType_Forbidden,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(RPCUserlistGetHubMembersResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:RPCUserlistGetHubMembersResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL RPCUserlistGetHubMembersResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case RPCUserlistGetHubMembersResponse_ErrorType_None:
    case RPCUserlistGetHubMembersResponse_ErrorType_UnknownError:
    case RPCUserlistGetHubMembersResponse_ErrorType_BadRequest:
    case RPCUserlistGetHubMembersResponse_ErrorType_Forbidden:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RPCUserlistSearchHubMembersRequest

@implementation RPCUserlistSearchHubMembersRequest

@dynamic requestingUserId;
@dynamic hubId;
@dynamic size;
@dynamic from;
@dynamic term;
@dynamic fuzzy;

typedef struct RPCUserlistSearchHubMembersRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *requestingUserId;
  NSString *hubId;
  NSString *term;
  int64_t size;
  int64_t from;
} RPCUserlistSearchHubMembersRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_RequestingUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersRequest__storage_, requestingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hubId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_HubId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersRequest__storage_, hubId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "term",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_Term,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersRequest__storage_, term),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fuzzy",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersRequest_FieldNumber_Fuzzy,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistSearchHubMembersRequest class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistSearchHubMembersRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserlistSearchHubMembersResponse

@implementation RPCUserlistSearchHubMembersResponse

@dynamic error;
@dynamic from;
@dynamic usersArray, usersArray_Count;
@dynamic pagedUsers;

typedef struct RPCUserlistSearchHubMembersResponse__storage_ {
  uint32_t _has_storage_[1];
  SearchMembersResponse_ErrorType error;
  NSMutableArray *usersArray;
  int64_t from;
  int64_t pagedUsers;
} RPCUserlistSearchHubMembersResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = SearchMembersResponse_ErrorType_EnumDescriptor,
        .number = RPCUserlistSearchHubMembersResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersResponse_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "usersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MembershipEntry),
        .number = RPCUserlistSearchHubMembersResponse_FieldNumber_UsersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersResponse__storage_, usersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pagedUsers",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistSearchHubMembersResponse_FieldNumber_PagedUsers,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RPCUserlistSearchHubMembersResponse__storage_, pagedUsers),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistSearchHubMembersResponse class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistSearchHubMembersResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCUserlistSearchHubMembersResponse_Error_RawValue(RPCUserlistSearchHubMembersResponse *message) {
  GPBDescriptor *descriptor = [RPCUserlistSearchHubMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistSearchHubMembersResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCUserlistSearchHubMembersResponse_Error_RawValue(RPCUserlistSearchHubMembersResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCUserlistSearchHubMembersResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCUserlistSearchHubMembersResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RPCUserlistGetUserCountsRequest

@implementation RPCUserlistGetUserCountsRequest

@dynamic requestingUserId;
@dynamic hubIdsArray, hubIdsArray_Count;
@dynamic excludeOffline;

typedef struct RPCUserlistGetUserCountsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *requestingUserId;
  NSMutableArray *hubIdsArray;
} RPCUserlistGetUserCountsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestingUserId",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetUserCountsRequest_FieldNumber_RequestingUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCUserlistGetUserCountsRequest__storage_, requestingUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hubIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetUserCountsRequest_FieldNumber_HubIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserlistGetUserCountsRequest__storage_, hubIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "excludeOffline",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetUserCountsRequest_FieldNumber_ExcludeOffline,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetUserCountsRequest class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetUserCountsRequest__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCUserlistGetUserCountsResponse

@implementation RPCUserlistGetUserCountsResponse

@dynamic counts, counts_Count;

typedef struct RPCUserlistGetUserCountsResponse__storage_ {
  uint32_t _has_storage_[1];
  GPBStringInt64Dictionary *counts;
} RPCUserlistGetUserCountsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "counts",
        .dataTypeSpecific.className = NULL,
        .number = RPCUserlistGetUserCountsResponse_FieldNumber_Counts,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RPCUserlistGetUserCountsResponse__storage_, counts),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCUserlistGetUserCountsResponse class]
                                     rootClass:[UserlistRoot class]
                                          file:UserlistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCUserlistGetUserCountsResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
