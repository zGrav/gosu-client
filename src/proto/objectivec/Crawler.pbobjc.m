// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crawler.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Crawler.pbobjc.h"
 #import "Profile.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CrawlerRoot

@implementation CrawlerRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[ProfileRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - CrawlerRoot_FileDescriptor

static GPBFileDescriptor *CrawlerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RPCCrawlerGetSiteInfoRequest

@implementation RPCCrawlerGetSiteInfoRequest

@dynamic URL;

typedef struct RPCCrawlerGetSiteInfoRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
} RPCCrawlerGetSiteInfoRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = RPCCrawlerGetSiteInfoRequest_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCCrawlerGetSiteInfoRequest__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCCrawlerGetSiteInfoRequest class]
                                     rootClass:[CrawlerRoot class]
                                          file:CrawlerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCCrawlerGetSiteInfoRequest__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RPCCrawlerGetSiteInfoResponse

@implementation RPCCrawlerGetSiteInfoResponse

@dynamic error;
@dynamic hasSiteInfo, siteInfo;

typedef struct RPCCrawlerGetSiteInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  CrawlerGetSiteInfoResponse_ErrorType error;
  WebsiteInfo *siteInfo;
} RPCCrawlerGetSiteInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = CrawlerGetSiteInfoResponse_ErrorType_EnumDescriptor,
        .number = RPCCrawlerGetSiteInfoResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RPCCrawlerGetSiteInfoResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "siteInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WebsiteInfo),
        .number = RPCCrawlerGetSiteInfoResponse_FieldNumber_SiteInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RPCCrawlerGetSiteInfoResponse__storage_, siteInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RPCCrawlerGetSiteInfoResponse class]
                                     rootClass:[CrawlerRoot class]
                                          file:CrawlerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RPCCrawlerGetSiteInfoResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RPCCrawlerGetSiteInfoResponse_Error_RawValue(RPCCrawlerGetSiteInfoResponse *message) {
  GPBDescriptor *descriptor = [RPCCrawlerGetSiteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCCrawlerGetSiteInfoResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetRPCCrawlerGetSiteInfoResponse_Error_RawValue(RPCCrawlerGetSiteInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [RPCCrawlerGetSiteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RPCCrawlerGetSiteInfoResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CrawlerGetSiteInfoResponse

@implementation CrawlerGetSiteInfoResponse

@dynamic error;
@dynamic hasSiteInfo, siteInfo;

typedef struct CrawlerGetSiteInfoResponse__storage_ {
  uint32_t _has_storage_[1];
  CrawlerGetSiteInfoResponse_ErrorType error;
  WebsiteInfo *siteInfo;
} CrawlerGetSiteInfoResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.enumDescFunc = CrawlerGetSiteInfoResponse_ErrorType_EnumDescriptor,
        .number = CrawlerGetSiteInfoResponse_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CrawlerGetSiteInfoResponse__storage_, error),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "siteInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(WebsiteInfo),
        .number = CrawlerGetSiteInfoResponse_FieldNumber_SiteInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CrawlerGetSiteInfoResponse__storage_, siteInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CrawlerGetSiteInfoResponse class]
                                     rootClass:[CrawlerRoot class]
                                          file:CrawlerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CrawlerGetSiteInfoResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CrawlerGetSiteInfoResponse_Error_RawValue(CrawlerGetSiteInfoResponse *message) {
  GPBDescriptor *descriptor = [CrawlerGetSiteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CrawlerGetSiteInfoResponse_FieldNumber_Error];
  return GPBGetMessageInt32Field(message, field);
}

void SetCrawlerGetSiteInfoResponse_Error_RawValue(CrawlerGetSiteInfoResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [CrawlerGetSiteInfoResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CrawlerGetSiteInfoResponse_FieldNumber_Error];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CrawlerGetSiteInfoResponse_ErrorType

GPBEnumDescriptor *CrawlerGetSiteInfoResponse_ErrorType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "None\000BadRequest\000Forbidden\000UnknownError\000P"
        "ageNotFound\000CouldNotDecode\000CouldNotCrawl"
        "\000";
    static const int32_t values[] = {
        CrawlerGetSiteInfoResponse_ErrorType_None,
        CrawlerGetSiteInfoResponse_ErrorType_BadRequest,
        CrawlerGetSiteInfoResponse_ErrorType_Forbidden,
        CrawlerGetSiteInfoResponse_ErrorType_UnknownError,
        CrawlerGetSiteInfoResponse_ErrorType_PageNotFound,
        CrawlerGetSiteInfoResponse_ErrorType_CouldNotDecode,
        CrawlerGetSiteInfoResponse_ErrorType_CouldNotCrawl,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CrawlerGetSiteInfoResponse_ErrorType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CrawlerGetSiteInfoResponse_ErrorType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CrawlerGetSiteInfoResponse_ErrorType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CrawlerGetSiteInfoResponse_ErrorType_None:
    case CrawlerGetSiteInfoResponse_ErrorType_BadRequest:
    case CrawlerGetSiteInfoResponse_ErrorType_Forbidden:
    case CrawlerGetSiteInfoResponse_ErrorType_UnknownError:
    case CrawlerGetSiteInfoResponse_ErrorType_PageNotFound:
    case CrawlerGetSiteInfoResponse_ErrorType_CouldNotDecode:
    case CrawlerGetSiteInfoResponse_ErrorType_CouldNotCrawl:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WebsiteInfo

@implementation WebsiteInfo

@dynamic URL;
@dynamic canonicalURL;
@dynamic title;
@dynamic description_p;
@dynamic keywordsArray, keywordsArray_Count;
@dynamic language;
@dynamic siteType;
@dynamic topic;
@dynamic hasColors, colors;
@dynamic shortName;
@dynamic imageURL;
@dynamic iconURL;

typedef struct WebsiteInfo__storage_ {
  uint32_t _has_storage_[1];
  WebsiteInfo_WebsiteType siteType;
  NSString *URL;
  NSString *canonicalURL;
  NSString *title;
  NSString *description_p;
  NSMutableArray *keywordsArray;
  NSString *language;
  NSString *topic;
  WebsiteColors *colors;
  NSString *shortName;
  NSString *imageURL;
  NSString *iconURL;
} WebsiteInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "canonicalURL",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_CanonicalURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, canonicalURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_Title,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keywordsArray",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_KeywordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, keywordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "language",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_Language,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, language),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "siteType",
        .dataTypeSpecific.enumDescFunc = WebsiteInfo_WebsiteType_EnumDescriptor,
        .number = WebsiteInfo_FieldNumber_SiteType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, siteType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_Topic,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "colors",
        .dataTypeSpecific.className = GPBStringifySymbol(WebsiteColors),
        .number = WebsiteInfo_FieldNumber_Colors,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, colors),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shortName",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_ShortName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, shortName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageURL",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_ImageURL,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, imageURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "iconURL",
        .dataTypeSpecific.className = NULL,
        .number = WebsiteInfo_FieldNumber_IconURL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(WebsiteInfo__storage_, iconURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WebsiteInfo class]
                                     rootClass:[CrawlerRoot class]
                                          file:CrawlerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WebsiteInfo__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001!!!\000\002\t\241!!\000\013\005\241!!\000\014\004\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WebsiteInfo_SiteType_RawValue(WebsiteInfo *message) {
  GPBDescriptor *descriptor = [WebsiteInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WebsiteInfo_FieldNumber_SiteType];
  return GPBGetMessageInt32Field(message, field);
}

void SetWebsiteInfo_SiteType_RawValue(WebsiteInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [WebsiteInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WebsiteInfo_FieldNumber_SiteType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum WebsiteInfo_WebsiteType

GPBEnumDescriptor *WebsiteInfo_WebsiteType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Wiki\000Forum\000";
    static const int32_t values[] = {
        WebsiteInfo_WebsiteType_Unknown,
        WebsiteInfo_WebsiteType_Wiki,
        WebsiteInfo_WebsiteType_Forum,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WebsiteInfo_WebsiteType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WebsiteInfo_WebsiteType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WebsiteInfo_WebsiteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case WebsiteInfo_WebsiteType_Unknown:
    case WebsiteInfo_WebsiteType_Wiki:
    case WebsiteInfo_WebsiteType_Forum:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - WebsiteColors

@implementation WebsiteColors


typedef struct WebsiteColors__storage_ {
  uint32_t _has_storage_[1];
} WebsiteColors__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WebsiteColors class]
                                     rootClass:[CrawlerRoot class]
                                          file:CrawlerRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WebsiteColors__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
